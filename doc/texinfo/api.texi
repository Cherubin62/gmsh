@c This file was generated by api/gen.py: do not edit manually!

@menu
* Namespace gmsh::
* Namespace gmsh/option::
* Namespace gmsh/model::
* Namespace gmsh/model/mesh::
* Namespace gmsh/model/mesh/field::
* Namespace gmsh/model/geo::
* Namespace gmsh/model/geo/mesh::
* Namespace gmsh/model/occ::
* Namespace gmsh/model/occ/mesh::
* Namespace gmsh/view::
* Namespace gmsh/plugin::
* Namespace gmsh/graphics::
* Namespace gmsh/fltk::
* Namespace gmsh/onelab::
* Namespace gmsh/logger::
@end menu

@node Namespace gmsh, Namespace gmsh/option, , Gmsh API
@section Namespace @code{gmsh}: top-level functions

@ftable @code
@item gmsh/initialize
Initialize Gmsh API. This must be called before any call to the other functions
in the API. If @code{argc} and @code{argv} (or just @code{argv} in Python or
Julia) are provided, they will be handled in the same way as the command line
arguments in the Gmsh app. If @code{readConfigFiles} is set, read system Gmsh
configuration files (gmshrc and gmsh-options). Initializing the API sets the
options "General.Terminal" to 1 and "General.AbortOnError" to 2.

@table @asis
@item Input:
@code{(argc = 0)}, @code{argv = []}, @code{readConfigFiles = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L63,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L46,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L211,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L39,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L18,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L17,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L15,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L17,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L78,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L15,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L15,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L13,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L13,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L13,t5.py}, ...)
@end table

@item gmsh/finalize
Finalize the Gmsh API. This must be called when you are done using the Gmsh API.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L70,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L52,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L231,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L53,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L177,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L172,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L106,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L173,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L230,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L170,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L165,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L102,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L180,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L225,t5.py}, ...)
@end table

@item gmsh/open
Open a file. Equivalent to the @code{File->Open} menu in the Gmsh app. Handling
of the file depends on its extension and/or its contents: opening a file with
model data will create a new model.

@table @asis
@item Input:
@code{fileName}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L77,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L57,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L246,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L69,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L30,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L13,explore.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_data.cpp#L13,onelab_data.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/open.cpp#L12,open.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L28,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L9,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/flatten.py#L13,flatten.py}, @url{@value{GITLAB-PREFIX}/demos/api/heal.py#L6,heal.py}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_data.py#L10,onelab_data.py}, ...)
@end table

@item gmsh/merge
Merge a file. Equivalent to the @code{File->Merge} menu in the Gmsh app.
Handling of the file depends on its extension and/or its contents. Merging a
file with model data will add the data to the current model.

@table @asis
@item Input:
@code{fileName}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L84,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L63,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L261,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L85,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t7.cpp#L21,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L37,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t9.cpp#L29,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L22,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t17.cpp#L33,t17.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t7.py#L20,t7.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L35,t8.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t9.py#L26,t9.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L19,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t17.py#L32,t17.py}, ...)
@end table

@item gmsh/write
Write a file. The export format is determined by the file extension.

@table @asis
@item Input:
@code{fileName}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L89,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L67,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L276,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L99,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L126,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L144,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L78,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L167,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L224,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L119,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L137,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L75,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L174,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L219,t5.py}, ...)
@end table

@item gmsh/clear
Clear all loaded models and post-processing data, and add a new empty model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L94,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L72,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L289,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L113,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L156,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L120,x1.py})
@end table

@end ftable

@node Namespace gmsh/option, Namespace gmsh/model, Namespace gmsh, Gmsh API
@section Namespace @code{gmsh/option}: option handling functions

@ftable @code
@item gmsh/option/setNumber
Set a numerical option to @code{value}. @code{name} is of the form
"category.option" or "category[num].option". Available categories and options
are listed in the Gmsh reference manual.

@table @asis
@item Input:
@code{name}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L103,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L77,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L309,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L138,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L84,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L206,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L97,t6.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t7.cpp#L56,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L54,t8.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L81,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L201,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L98,t6.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t7.py#L50,t7.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L47,t8.py}, ...)
@end table

@item gmsh/option/getNumber
Get the @code{value} of a numerical option. @code{name} is of the form
"category.option" or "category[num].option". Available categories and options
are listed in the Gmsh reference manual.

@table @asis
@item Input:
@code{name}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L111,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L84,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L326,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L156,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L118,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L95,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L152,t8.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L84,x3.py}, @url{@value{GITLAB-PREFIX}/demos/api/test.py#L5,test.py})
@end table

@item gmsh/option/setString
Set a string option to @code{value}. @code{name} is of the form
"category.option" or "category[num].option". Available categories and options
are listed in the Gmsh reference manual.

@table @asis
@item Input:
@code{name}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L119,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L91,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L347,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L173,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L151,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L92,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L159,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L89,t8.py})
@end table

@item gmsh/option/getString
Get the @code{value} of a string option. @code{name} is of the form
"category.option" or "category[num].option". Available categories and options
are listed in the Gmsh reference manual.

@table @asis
@item Input:
@code{name}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L127,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L98,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L364,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L191,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/test.py#L29,test.py})
@end table

@item gmsh/option/setColor
Set a color option to the RGBA value (@code{r}, @code{g}, @code{b}, @code{a}),
where where @code{r}, @code{g}, @code{b} and @code{a} should be integers between
0 and 255. @code{name} is of the form "category.option" or
"category[num].option". Available categories and options are listed in the Gmsh
reference manual, with the "Color." middle string removed.

@table @asis
@item Input:
@code{name}, @code{r}, @code{g}, @code{b}, @code{a = 255}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L137,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L107,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L385,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L211,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L85,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L61,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L82,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L58,t8.py})
@end table

@item gmsh/option/getColor
Get the @code{r}, @code{g}, @code{b}, @code{a} value of a color option.
@code{name} is of the form "category.option" or "category[num].option".
Available categories and options are listed in the Gmsh reference manual, with
the "Color." middle string removed.

@table @asis
@item Input:
@code{name}
@item Output:
@code{r}, @code{g}, @code{b}, @code{a}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L149,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L118,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L407,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L230,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L93,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L89,t3.py})
@end table

@end ftable

@node Namespace gmsh/model, Namespace gmsh/model/mesh, Namespace gmsh/option, Gmsh API
@section Namespace @code{gmsh/model}: model functions

@ftable @code
@item gmsh/model/add
Add a new model, with name @code{name}, and set it as the current model.

@table @asis
@item Input:
@code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L162,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L126,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L445,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L259,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L22,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L19,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L17,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L19,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L16,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L19,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L17,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L15,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L15,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L15,t5.py}, ...)
@end table

@item gmsh/model/remove
Remove the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L167,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L130,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L459,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L273,Julia}
@end table

@item gmsh/model/list
List the names of all models.

@table @asis
@item Input:
-
@item Output:
@code{names}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L172,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L133,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L472,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L289,Julia}
@end table

@item gmsh/model/getCurrent
Get the name of the current model.

@table @asis
@item Input:
-
@item Output:
@code{name}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L177,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L137,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L490,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L309,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L34,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L31,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L11,explore.py})
@end table

@item gmsh/model/setCurrent
Set the current model to the model with name @code{name}. If several models have
the same name, select the one that was added first.

@table @asis
@item Input:
@code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L183,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L142,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L508,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L326,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L44,copy_mesh.py})
@end table

@item gmsh/model/getEntities
Get all the entities in the current model. If @code{dim} is >= 0, return only
the entities of the specified dimension (e.g. points if @code{dim} == 0). The
entities are returned as a vector of (dim, tag) integer pairs.

@table @asis
@item Input:
@code{dim = -1}
@item Output:
@code{dimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L190,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L148,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L523,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L344,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L58,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L114,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L31,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L96,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L47,t21.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L48,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L97,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L29,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L78,t20.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L36,t21.py}, ...)
@end table

@item gmsh/model/setEntityName
Set the name of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L196,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L153,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L544,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L362,Julia}
@end table

@item gmsh/model/getEntityName
Get the name of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{name}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L203,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L159,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L560,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L378,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L92,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L82,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/step_assembly.py#L14,step_assembly.py})
@end table

@item gmsh/model/getPhysicalGroups
Get all the physical groups in the current model. If @code{dim} is >= 0, return
only the entities of the specified dimension (e.g. physical points if @code{dim}
== 0). The entities are returned as a vector of (dim, tag) integer pairs.

@table @asis
@item Input:
@code{dim = -1}
@item Output:
@code{dimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L212,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L167,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L580,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L398,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L83,poisson.py})
@end table

@item gmsh/model/getEntitiesForPhysicalGroup
Get the tags of the model entities making up the physical group of dimension
@code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{tags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L219,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L173,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L601,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L419,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L88,poisson.py}, @url{@value{GITLAB-PREFIX}/demos/api/test.py#L24,test.py})
@end table

@item gmsh/model/getPhysicalGroupsForEntity
Get the tags of the physical groups (if any) to which the model entity of
dimension @code{dim} and tag @code{tag} belongs.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{physicalTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L227,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L180,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L622,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L439,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L116,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L97,x1.py})
@end table

@item gmsh/model/addPhysicalGroup
Add a physical group of dimension @code{dim}, grouping the model entities with
tags @code{tags}. Return the tag of the physical group, equal to @code{tag} if
@code{tag} is positive, or a new tag if @code{tag} < 0.

@table @asis
@item Input:
@code{dim}, @code{tags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L236,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L188,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L643,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L460,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L118,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L34,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L32,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L196,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L76,t14.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L111,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L32,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L30,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L192,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L70,t14.py}, ...)
@end table

@item gmsh/model/removePhysicalGroups
Remove the physical groups @code{dimTags} from the current model. If
@code{dimTags} is empty, remove all groups.

@table @asis
@item Input:
@code{dimTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L244,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L195,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L665,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L475,Julia}
@end table

@item gmsh/model/setPhysicalName
Set the name of the physical group of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L249,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L199,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L681,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L491,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L120,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L36,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L34,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L77,t14.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L53,t21.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L113,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L34,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L32,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L71,t14.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L41,t21.py}, ...)
@end table

@item gmsh/model/removePhysicalName
Remove the physical name @code{name} from the current model.

@table @asis
@item Input:
@code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L256,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L205,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L697,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L505,Julia}
@end table

@item gmsh/model/getPhysicalName
Get the name of the physical group of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{name}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L261,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L209,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L711,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L521,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L121,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L101,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L87,poisson.py})
@end table

@item gmsh/model/getBoundary
Get the boundary of the model entities @code{dimTags}. Return in
@code{outDimTags} the boundary of the individual entities (if @code{combined} is
false) or the boundary of the combined geometrical shape formed by all input
entities (if @code{combined} is true). Return tags multiplied by the sign of the
boundary entity if @code{oriented} is true. Apply the boundary operator
recursively down to dimension 0 (i.e. to points) if @code{recursive} is true.

@table @asis
@item Input:
@code{dimTags}, @code{combined = True}, @code{oriented = True}, @code{recursive = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L273,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L220,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L731,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L544,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L88,t14.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L118,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L97,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L50,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L124,t21.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L82,t14.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L100,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L88,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L46,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L99,t21.py}, ...)
@end table

@item gmsh/model/getEntitiesInBoundingBox
Get the model entities in the bounding box defined by the two points
(@code{xmin}, @code{ymin}, @code{zmin}) and (@code{xmax}, @code{ymax},
@code{zmax}). If @code{dim} is >= 0, return only the entities of the specified
dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{xmin}, @code{ymin}, @code{zmin}, @code{xmax}, @code{ymax}, @code{zmax}, @code{dim = -1}
@item Output:
@code{tags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L285,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L231,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L759,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L568,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L123,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L86,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L114,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L105,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L80,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L94,t20.py})
@end table

@item gmsh/model/getBoundingBox
Get the bounding box (@code{xmin}, @code{ymin}, @code{zmin}), (@code{xmax},
@code{ymax}, @code{zmax}) of the model entity of dimension @code{dim} and tag
@code{tag}. If @code{dim} and @code{tag} are negative, get the bounding box of
the whole model.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{xmin}, @code{ymin}, @code{zmin}, @code{xmax}, @code{ymax}, @code{zmax}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L299,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L244,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L787,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L590,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L113,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L45,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L103,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L35,t20.py})
@end table

@item gmsh/model/getDimension
Get the geometrical dimension of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L311,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L255,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L825,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L612,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L35,x1.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L32,x1.py})
@end table

@item gmsh/model/addDiscreteEntity
Add a discrete model entity (defined by a mesh) of dimension @code{dim} in the
current model. Return the tag of the new discrete entity, equal to @code{tag} if
@code{tag} is positive, or a new tag if @code{tag} < 0. @code{boundary}
specifies the tags of the entities on the boundary of the discrete entity, if
any. Specifying @code{boundary} allows Gmsh to construct the topology of the
overall model.

@table @asis
@item Input:
@code{dim}, @code{tag = -1}, @code{boundary = []}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L320,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L262,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L841,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L632,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L78,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L24,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/discrete.cpp#L10,discrete.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L60,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L60,faces.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L74,x2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L22,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L27,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/discrete.py#L9,discrete.py}, @url{@value{GITLAB-PREFIX}/demos/api/import_perf.py#L47,import_perf.py}, ...)
@end table

@item gmsh/model/removeEntities
Remove the entities @code{dimTags} of the current model. If @code{recursive} is
true, remove all the entities on their boundaries, down to dimension 0.

@table @asis
@item Input:
@code{dimTags}, @code{recursive = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L328,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L269,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L865,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L647,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L92,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L128,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L84,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L102,t20.py}, @url{@value{GITLAB-PREFIX}/demos/api/spherical_surf.py#L16,spherical_surf.py})
@end table

@item gmsh/model/removeEntityName
Remove the entity name @code{name} from the current model.

@table @asis
@item Input:
@code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L334,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L274,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L882,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L663,Julia}
@end table

@item gmsh/model/getType
Get the type of the entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{entityType}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L339,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L278,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L896,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L679,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L114,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L90,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L36,explore.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L53,partition.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L96,t21.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L81,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L17,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/partition.py#L44,partition.py})
@end table

@item gmsh/model/getParent
In a partitioned model, get the parent of the entity of dimension @code{dim} and
tag @code{tag}, i.e. from which the entity is a part of, if any.
@code{parentDim} and @code{parentTag} are set to -1 if the entity has no parent.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{parentDim}, @code{parentTag}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L348,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L286,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L916,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L699,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L121,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L136,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L47,explore.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L61,partition.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L98,t21.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L110,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L31,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/partition.py#L46,partition.py})
@end table

@item gmsh/model/getPartitions
In a partitioned model, return the tags of the partition(s) to which the entity
belongs.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{partitions}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L357,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L294,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L942,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L718,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L111,t21.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L130,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L41,explore.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L50,partition.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L93,t21.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L107,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L28,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/partition.py#L41,partition.py})
@end table

@item gmsh/model/getValue
Evaluate the parametrization of the entity of dimension @code{dim} and tag
@code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for
@code{dim} equal to 0 (with empty @code{parametricCoord}), 1 (with
@code{parametricCoord} containing parametric coordinates on the curve) or 2
(with @code{parametricCoord} containing pairs of u, v parametric coordinates on
the surface, concatenated: [p1u, p1v, p2u, ...]). Return triplets of x, y, z
coordinates in @code{coord}, concatenated: [p1x, p1y, p1z, p2x, ...].

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}
@item Output:
@code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L370,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L306,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L963,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L743,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L91,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L86,t2.py}, @url{@value{GITLAB-PREFIX}/demos/api/reparamOnFace.py#L20,reparamOnFace.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L35,terrain_stl.py})
@end table

@item gmsh/model/getDerivative
Evaluate the derivative of the parametrization of the entity of dimension
@code{dim} and tag @code{tag} at the parametric coordinates
@code{parametricCoord}. Only valid for @code{dim} equal to 1 (with
@code{parametricCoord} containing parametric coordinates on the curve) or 2
(with @code{parametricCoord} containing pairs of u, v parametric coordinates on
the surface, concatenated: [p1u, p1v, p2u, ...]). For @code{dim} equal to 1
return the x, y, z components of the derivative with respect to u [d1ux, d1uy,
d1uz, d2ux, ...]; for @code{dim} equal to 2 return the x, y, z components of the
derivate with respect to u and v: [d1ux, d1uy, d1uz, d1vx, d1vy, d1vz, d2ux,
...].

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}
@item Output:
@code{derivatives}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L386,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L321,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L991,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L770,Julia}
@end table

@item gmsh/model/getCurvature
Evaluate the (maximum) curvature of the entity of dimension @code{dim} and tag
@code{tag} at the parametric coordinates @code{parametricCoord}. Only valid for
@code{dim} equal to 1 (with @code{parametricCoord} containing parametric
coordinates on the curve) or 2 (with @code{parametricCoord} containing pairs of
u, v parametric coordinates on the surface, concatenated: [p1u, p1v, p2u, ...]).

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}
@item Output:
@code{curvatures}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L398,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L332,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1021,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L793,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/normals.py#L28,normals.py})
@end table

@item gmsh/model/getPrincipalCurvatures
Evaluate the principal curvatures of the surface with tag @code{tag} at the
parametric coordinates @code{parametricCoord}, as well as their respective
directions. @code{parametricCoord} are given by pair of u and v coordinates,
concatenated: [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{tag}, @code{parametricCoord}
@item Output:
@code{curvatureMax}, @code{curvatureMin}, @code{directionMax}, @code{directionMin}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L409,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L342,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1047,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L815,Julia}
@end table

@item gmsh/model/getNormal
Get the normal to the surface with tag @code{tag} at the parametric coordinates
@code{parametricCoord}. @code{parametricCoord} are given by pairs of u and v
coordinates, concatenated: [p1u, p1v, p2u, ...]. @code{normals} are returned as
triplets of x, y, z components, concatenated: [n1x, n1y, n1z, n2x, ...].

@table @asis
@item Input:
@code{tag}, @code{parametricCoord}
@item Output:
@code{normals}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L422,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L354,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1081,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L846,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/normals.py#L26,normals.py})
@end table

@item gmsh/model/getParametrization
Get the parametric coordinates @code{parametricCoord} for the points
@code{coord} on the entity of dimension @code{dim} and tag @code{tag}.
@code{coord} are given as triplets of x, y, z coordinates, concatenated: [p1x,
p1y, p1z, p2x, ...]. @code{parametricCoord} returns the parametric coordinates t
on the curve (if @code{dim} = 1) or pairs of u and v coordinates concatenated on
the surface (if @code{dim} = 2), i.e. [p1t, p2t, ...] or [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{coord}
@item Output:
@code{parametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L434,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L365,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1105,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L870,Julia}
@end table

@item gmsh/model/getParametrizationBounds
Get the @code{min} and @code{max} bounds of the parametric coordinates for the
entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{min}, @code{max}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L443,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L373,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1132,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L890,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/reparamOnFace.py#L17,reparamOnFace.py})
@end table

@item gmsh/model/isInside
Check if the parametric coordinates provided in @code{parametricCoord}
correspond to points inside the entitiy of dimension @code{dim} and tag
@code{tag}, and return the number of points inside. This feature is only
available for a subset of curves and surfaces, depending on the underyling
geometrical representation.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L454,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L384,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1157,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L915,Julia}
@end table

@item gmsh/model/getClosestPoint
Get the points @code{closestCoord} on the entity of dimension @code{dim} and tag
@code{tag} to the points @code{coord}, by orthogonal projection. @code{coord}
and @code{closestCoord} are given as triplets of x, y, z coordinates,
concatenated: [p1x, p1y, p1z, p2x, ...]. @code{parametricCoord} returns the
parametric coordinates t on the curve (if @code{dim} = 1) or pairs of u and v
coordinates concatenated on the surface (if @code{dim} = 2), i.e. [p1t, p2t,
...] or [p1u, p1v, p2u, ...].

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{coord}
@item Output:
@code{closestCoord}, @code{parametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L466,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L396,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1181,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L936,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/closest_point.py#L11,closest_point.py})
@end table

@item gmsh/model/reparametrizeOnSurface
Reparametrize the boundary entity (point or curve, i.e. with @code{dim} == 0 or
@code{dim} == 1) of tag @code{tag} on the surface @code{surfaceTag}. If
@code{dim} == 1, reparametrize all the points corresponding to the parametric
coordinates @code{parametricCoord}. Multiple matches in case of periodic
surfaces can be selected with @code{which}. This feature is only available for a
subset of entities, depending on the underyling geometrical representation.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}, @code{surfaceTag}, @code{which = 0}
@item Output:
@code{surfaceParametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L480,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L409,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1213,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L963,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/reparamOnFace.py#L19,reparamOnFace.py})
@end table

@item gmsh/model/setVisibility
Set the visibility of the model entities @code{dimTags} to @code{value}. Apply
the visibility setting recursively if @code{recursive} is true.

@table @asis
@item Input:
@code{dimTags}, @code{value}, @code{recursive = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L491,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L419,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1242,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L981,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/gui.py#L31,gui.py})
@end table

@item gmsh/model/getVisibility
Get the visibility of the model entity of dimension @code{dim} and tag
@code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L498,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L425,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1260,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L999,Julia}
@end table

@item gmsh/model/setVisibilityPerWindow
Set the global visibility of the model per window to @code{value}, where
@code{windowIndex} identifies the window in the window list.

@table @asis
@item Input:
@code{value}, @code{windowIndex = 0}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L506,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L432,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1280,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1015,Julia}
@end table

@item gmsh/model/setColor
Set the color of the model entities @code{dimTags} to the RGBA value (@code{r},
@code{g}, @code{b}, @code{a}), where @code{r}, @code{g}, @code{b} and @code{a}
should be integers between 0 and 255. Apply the color setting recursively if
@code{recursive} is true.

@table @asis
@item Input:
@code{dimTags}, @code{r}, @code{g}, @code{b}, @code{a = 255}, @code{recursive = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L514,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L439,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1296,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1031,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L158,t4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L167,t4.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L33,gui.py})
@end table

@item gmsh/model/getColor
Get the color of the model entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{r}, @code{g}, @code{b}, @code{a}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L524,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L448,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1318,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1049,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/step_boundary_colors.py#L10,step_boundary_colors.py})
@end table

@item gmsh/model/setCoordinates
Set the @code{x}, @code{y}, @code{z} coordinates of a geometrical point.

@table @asis
@item Input:
@code{tag}, @code{x}, @code{y}, @code{z}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L534,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L457,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1348,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1067,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L79,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L75,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/reparamOnFace.py#L23,reparamOnFace.py})
@end table

@end ftable

@node Namespace gmsh/model/mesh, Namespace gmsh/model/mesh/field, Namespace gmsh/model, Gmsh API
@section Namespace @code{gmsh/model/mesh}: mesh functions

@ftable @code
@item gmsh/model/mesh/generate
Generate a mesh of the current model, up to dimension @code{dim} (0, 1, 2 or 3).

@table @asis
@item Input:
@code{dim = 3}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L545,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L464,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1371,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1090,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L123,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L143,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L77,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L165,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L223,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L116,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L136,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L74,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L172,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L218,t5.py}, ...)
@end table

@item gmsh/model/mesh/partition
Partition the mesh of the current model into @code{numPart} partitions.

@table @asis
@item Input:
@code{numPart}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L550,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L468,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1385,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1104,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L87,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L28,partition.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L73,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/partition.py#L26,partition.py})
@end table

@item gmsh/model/mesh/unpartition
Unpartition the mesh of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L555,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L472,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1399,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1118,Julia}
@end table

@item gmsh/model/mesh/optimize
Optimize the mesh of the current model using @code{method} (empty for default
tetrahedral mesh optimizer, "Netgen" for Netgen optimizer, "HighOrder" for
direct high-order mesh optimizer, "HighOrderElastic" for high-order elastic
smoother, "HighOrderFastCurving" for fast curving algorithm, "Laplace2D" for
Laplace smoothing, "Relocate2D" and "Relocate3D" for node relocation). If
@code{force} is set apply the optimization also to discrete entities. If
@code{dimTags} is given, only apply the optimizer to the given entities.

@table @asis
@item Input:
@code{method}, @code{force = False}, @code{niter = 1}, @code{dimTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L567,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L481,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1412,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1138,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/opt.py#L12,opt.py})
@end table

@item gmsh/model/mesh/recombine
Recombine the mesh of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L575,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L488,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1436,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1154,Julia}
@end table

@item gmsh/model/mesh/refine
Refine the mesh of the current model by uniformly splitting the elements.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L580,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L491,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1449,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1168,Julia}
@end table

@item gmsh/model/mesh/setOrder
Set the order of the elements in the mesh of the current model to @code{order}.

@table @asis
@item Input:
@code{order}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L585,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L494,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1462,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1182,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/periodic.py#L17,periodic.py})
@end table

@item gmsh/model/mesh/getLastEntityError
Get the last entities (if any) where a meshing error occurred. Currently only
populated by the new 3D meshing algorithms.

@table @asis
@item Input:
-
@item Output:
@code{dimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L591,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L499,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1476,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1199,Julia}
@end table

@item gmsh/model/mesh/getLastNodeError
Get the last nodes (if any) where a meshing error occurred. Currently only
populated by the new 3D meshing algorithms.

@table @asis
@item Input:
-
@item Output:
@code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L597,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L504,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1495,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1220,Julia}
@end table

@item gmsh/model/mesh/clear
Clear the mesh, i.e. delete all the nodes and elements, for the entities
@code{dimTags}. if @code{dimTags} is empty, clear the whole mesh. Note that the
mesh of an entity can only be cleared if this entity is not on the boundary of
another entity with a non-empty mesh.

@table @asis
@item Input:
@code{dimTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L605,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L511,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1514,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1240,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L52,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/flatten.py#L30,flatten.py})
@end table

@item gmsh/model/mesh/getNodes
Get the nodes classified on the entity of dimension @code{dim} and tag
@code{tag}. If @code{tag} < 0, get the nodes for all entities of dimension
@code{dim}. If @code{dim} and @code{tag} are negative, get all the nodes in the
mesh. @code{nodeTags} contains the node tags (their unique, strictly positive
identification numbers). @code{coord} is a vector of length 3 times the length
of @code{nodeTags} that contains the x, y, z coordinates of the nodes,
concatenated: [n1x, n1y, n1z, n2x, ...]. If @code{dim} >= 0 and
@code{returnParamtricCoord} is set, @code{parametricCoord} contains the
parametric coordinates ([u1, u2, ...] or [u1, v1, u2, ...]) of the nodes, if
available. The length of @code{parametricCoord} can be 0 or @code{dim} times the
length of @code{nodeTags}. If @code{includeBoundary} is set, also return the
nodes classified on the boundary of the entity (which will be reparametrized on
the entity if @code{dim} >= 0 in order to compute their parametric coordinates).

@table @asis
@item Input:
@code{dim = -1}, @code{tag = -1}, @code{includeBoundary = False}, @code{returnParametricCoord = True}
@item Output:
@code{nodeTags}, @code{coord}, @code{parametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L622,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L527,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1532,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1269,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L75,x1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L67,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L80,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L24,explore.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L69,x1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L61,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L15,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L19,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L19,explore.py}, ...)
@end table

@item gmsh/model/mesh/getNodesByElementType
Get the nodes classified on the entity of tag @code{tag}, for all the elements
of type @code{elementType}. The other arguments are treated as in
@code{getNodes}.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}, @code{returnParametricCoord = True}
@item Output:
@code{nodeTags}, @code{coord}, @code{parametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L634,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L538,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1573,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1295,Julia}
@end table

@item gmsh/model/mesh/getNode
Get the coordinates and the parametric coordinates (if any) of the node with tag
@code{tag}. This function relies on an internal cache (a vector in case of dense
node numbering, a map otherwise); for large meshes accessing nodes in bulk is
often preferable.

@table @asis
@item Input:
@code{nodeTag}
@item Output:
@code{coord}, @code{parametricCoord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L647,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L550,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1602,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1323,Julia}
@end table

@item gmsh/model/mesh/setNode
Set the coordinates and the parametric coordinates (if any) of the node with tag
@code{tag}. This function relies on an internal cache (a vector in case of dense
node numbering, a map otherwise); for large meshes accessing nodes in bulk is
often preferable.

@table @asis
@item Input:
@code{nodeTag}, @code{coord}, @code{parametricCoord}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L657,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L559,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1628,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1346,Julia}
@end table

@item gmsh/model/mesh/rebuildNodeCache
Rebuild the node cache.

@table @asis
@item Input:
@code{onlyIfNecessary = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L664,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L565,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1649,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1360,Julia}
@end table

@item gmsh/model/mesh/rebuildElementCache
Rebuild the element cache.

@table @asis
@item Input:
@code{onlyIfNecessary = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L669,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L569,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1663,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1374,Julia}
@end table

@item gmsh/model/mesh/getNodesForPhysicalGroup
Get the nodes from all the elements belonging to the physical group of dimension
@code{dim} and tag @code{tag}. @code{nodeTags} contains the node tags;
@code{coord} is a vector of length 3 times the length of @code{nodeTags} that
contains the x, y, z coordinates of the nodes, concatenated: [n1x, n1y, n1z,
n2x, ...].

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{nodeTags}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L677,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L576,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1677,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1393,Julia}
@end table

@item gmsh/model/mesh/addNodes
Add nodes classified on the model entity of dimension @code{dim} and tag
@code{tag}. @code{nodeTags} contains the node tags (their unique, strictly
positive identification numbers). @code{coord} is a vector of length 3 times the
length of @code{nodeTags} that contains the x, y, z coordinates of the nodes,
concatenated: [n1x, n1y, n1z, n2x, ...]. The optional @code{parametricCoord}
vector contains the parametric coordinates of the nodes, if any. The length of
@code{parametricCoord} can be 0 or @code{dim} times the length of
@code{nodeTags}. If the @code{nodeTags} vector is empty, new tags are
automatically assigned to the nodes.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{nodeTags}, @code{coord}, @code{parametricCoord = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L693,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L591,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1704,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1420,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L92,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L27,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/discrete.cpp#L13,discrete.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/import_perf.cpp#L51,import_perf.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L11,plugin.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L88,x2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L25,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L28,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/discrete.py#L12,discrete.py}, @url{@value{GITLAB-PREFIX}/demos/api/flatten.py#L36,flatten.py}, ...)
@end table

@item gmsh/model/mesh/reclassifyNodes
Reclassify all nodes on their associated model entity, based on the elements.
Can be used when importing nodes in bulk (e.g. by associating them all to a
single volume), to reclassify them correctly on model surfaces, curves, etc.
after the elements have been set.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L705,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L602,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1733,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1437,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L107,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L102,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L66,terrain.py})
@end table

@item gmsh/model/mesh/relocateNodes
Relocate the nodes classified on the entity of dimension @code{dim} and tag
@code{tag} using their parametric coordinates. If @code{tag} < 0, relocate the
nodes for all entities of dimension @code{dim}. If @code{dim} and @code{tag} are
negative, relocate all the nodes in the mesh.

@table @asis
@item Input:
@code{dim = -1}, @code{tag = -1}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L713,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L608,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1749,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1454,Julia}
@end table

@item gmsh/model/mesh/getElements
Get the elements classified on the entity of dimension @code{dim} and tag
@code{tag}. If @code{tag} < 0, get the elements for all entities of dimension
@code{dim}. If @code{dim} and @code{tag} are negative, get all the elements in
the mesh. @code{elementTypes} contains the MSH types of the elements (e.g.
@code{2} for 3-node triangles: see @code{getElementProperties} to obtain the
properties for a given element type). @code{elementTags} is a vector of the same
length as @code{elementTypes}; each entry is a vector containing the tags
(unique, strictly positive identifiers) of the elements of the corresponding
type. @code{nodeTags} is also a vector of the same length as
@code{elementTypes}; each entry is a vector of length equal to the number of
elements of the given type times the number N of nodes for this type of element,
that contains the node tags of all the elements of the given type, concatenated:
[e1n1, e1n2, ..., e1nN, e2n1, ...].

@table @asis
@item Input:
@code{dim = -1}, @code{tag = -1}
@item Output:
@code{elementTypes}, @code{elementTags}, @code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L731,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L625,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1767,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1481,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L80,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L83,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L29,explore.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L72,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L20,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L21,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/flatten.py#L27,flatten.py}, @url{@value{GITLAB-PREFIX}/demos/api/test.py#L41,test.py})
@end table

@item gmsh/model/mesh/getElement
Get the type and node tags of the element with tag @code{tag}. This function
relies on an internal cache (a vector in case of dense element numbering, a map
otherwise); for large meshes accessing elements in bulk is often preferable.

@table @asis
@item Input:
@code{elementTag}
@item Output:
@code{elementType}, @code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L743,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L636,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1806,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1514,Julia}
@end table

@item gmsh/model/mesh/getElementByCoordinates
Search the mesh for an element located at coordinates (@code{x}, @code{y},
@code{z}). This function performs a search in a spatial octree. If an element is
found, return its tag, type and node tags, as well as the local coordinates
(@code{u}, @code{v}, @code{w}) within the reference element corresponding to
search location. If @code{dim} is >= 0, only search for elements of the given
dimension. If @code{strict} is not set, use a tolerance to find elements near
the search location.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dim = -1}, @code{strict = False}
@item Output:
@code{elementTag}, @code{elementType}, @code{nodeTags}, @code{u}, @code{v}, @code{w}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L756,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L647,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1832,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1539,Julia}
@end table

@item gmsh/model/mesh/getElementsByCoordinates
Search the mesh for element(s) located at coordinates (@code{x}, @code{y},
@code{z}). This function performs a search in a spatial octree. Return the tags
of all found elements in @code{elementTags}. Additional information about the
elements can be accessed through @code{getElement} and
@code{getLocalCoordinatesInElement}. If @code{dim} is >= 0, only search for
elements of the given dimension. If @code{strict} is not set, use a tolerance to
find elements near the search location.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dim = -1}, @code{strict = False}
@item Output:
@code{elementTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L777,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L666,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1876,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1568,Julia}
@end table

@item gmsh/model/mesh/getLocalCoordinatesInElement
Return the local coordinates (@code{u}, @code{v}, @code{w}) within the element
@code{elementTag} corresponding to the model coordinates (@code{x}, @code{y},
@code{z}). This function relies on an internal cache (a vector in case of dense
element numbering, a map otherwise); for large meshes accessing elements in bulk
is often preferable.

@table @asis
@item Input:
@code{elementTag}, @code{x}, @code{y}, @code{z}
@item Output:
@code{u}, @code{v}, @code{w}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L791,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L679,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1904,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1590,Julia}
@end table

@item gmsh/model/mesh/getElementTypes
Get the types of elements in the entity of dimension @code{dim} and tag
@code{tag}. If @code{tag} < 0, get the types for all entities of dimension
@code{dim}. If @code{dim} and @code{tag} are negative, get all the types in the
mesh.

@table @asis
@item Input:
@code{dim = -1}, @code{tag = -1}
@item Output:
@code{elementTypes}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L804,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L691,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1937,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1611,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L30,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L30,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L92,poisson.py})
@end table

@item gmsh/model/mesh/getElementType
Return an element type given its family name @code{familyName} ("Point", "Line",
"Triangle", "Quadrangle", "Tetrahedron", "Pyramid", "Prism", "Hexahedron") and
polynomial order @code{order}. If @code{serendip} is true, return the
corresponding serendip element type (element without interior nodes).

@table @asis
@item Input:
@code{familyName}, @code{order}, @code{serendip = False}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L814,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L700,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1959,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1633,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L63,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L63,faces.cpp})
@end table

@item gmsh/model/mesh/getElementProperties
Get the properties of an element of type @code{elementType}: its name
(@code{elementName}), dimension (@code{dim}), order (@code{order}), number of
nodes (@code{numNodes}), local coordinates of the nodes in the reference element
(@code{localNodeCoord} vector, of length @code{dim} times @code{numNodes}) and
number of primary (first order) nodes (@code{numPrimaryNodes}).

@table @asis
@item Input:
@code{elementType}
@item Output:
@code{elementName}, @code{dim}, @code{order}, @code{numNodes}, @code{localNodeCoord}, @code{numPrimaryNodes}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L825,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L710,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L1981,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1653,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x1.cpp#L146,x1.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L39,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/explore.cpp#L55,explore.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L39,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x1.py#L114,x1.py}, @url{@value{GITLAB-PREFIX}/demos/api/explore.py#L33,explore.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L111,poisson.py})
@end table

@item gmsh/model/mesh/getElementsByType
Get the elements of type @code{elementType} classified on the entity of tag
@code{tag}. If @code{tag} < 0, get the elements for all entities.
@code{elementTags} is a vector containing the tags (unique, strictly positive
identifiers) of the elements of the corresponding type. @code{nodeTags} is a
vector of length equal to the number of elements of the given type times the
number N of nodes for this type of element, that contains the node tags of all
the elements of the given type, concatenated: [e1n1, e1n2, ..., e1nN, e2n1,
...]. If @code{numTasks} > 1, only compute and return the part of the data
indexed by @code{task}.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{elementTags}, @code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L844,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L728,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2020,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1685,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L51,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L51,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L18,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/neighbors.py#L15,neighbors.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L95,poisson.py})
@end table

@item gmsh/model/mesh/preallocateElementsByType
Preallocate data before calling @code{getElementsByType} with @code{numTasks} >
1. For C and C++ only.

@table @asis
@item Input:
@code{elementType}, @code{elementTag}, @code{nodeTag}, @code{tag = -1}
@item Output:
@code{elementTags}, @code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L855,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L738,C}
@end table

@item gmsh/model/mesh/addElements
Add elements classified on the entity of dimension @code{dim} and tag
@code{tag}. @code{types} contains the MSH types of the elements (e.g. @code{2}
for 3-node triangles: see the Gmsh reference manual). @code{elementTags} is a
vector of the same length as @code{types}; each entry is a vector containing the
tags (unique, strictly positive identifiers) of the elements of the
corresponding type. @code{nodeTags} is also a vector of the same length as
@code{types}; each entry is a vector of length equal to the number of elements
of the given type times the number N of nodes per element, that contains the
node tags of all the elements of the given type, concatenated: [e1n1, e1n2, ...,
e1nN, e2n1, ...].

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{elementTypes}, @code{elementTags}, @code{nodeTags}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L874,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L756,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2054,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1713,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/discrete.cpp#L20,discrete.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L13,plugin.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/view.cpp#L12,view.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L29,copy_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/discrete.py#L32,discrete.py}, @url{@value{GITLAB-PREFIX}/demos/api/flatten.py#L37,flatten.py}, @url{@value{GITLAB-PREFIX}/demos/api/mesh_from_discrete_curve.py#L21,mesh_from_discrete_curve.py}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L11,plugin.py}, ...)
@end table

@item gmsh/model/mesh/addElementsByType
Add elements of type @code{elementType} classified on the entity of tag
@code{tag}. @code{elementTags} contains the tags (unique, strictly positive
identifiers) of the elements of the corresponding type. @code{nodeTags} is a
vector of length equal to the number of elements times the number N of nodes per
element, that contains the node tags of all the elements, concatenated: [e1n1,
e1n2, ..., e1nN, e2n1, ...]. If the @code{elementTag} vector is empty, new tags
are automatically assigned to the elements.

@table @asis
@item Input:
@code{tag}, @code{elementType}, @code{elementTags}, @code{nodeTags}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L889,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L770,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2084,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1735,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L98,x2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L29,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L64,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L64,faces.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/import_perf.cpp#L56,import_perf.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L94,x2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L27,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/import_perf.py#L57,import_perf.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L58,terrain.py})
@end table

@item gmsh/model/mesh/getIntegrationPoints
Get the numerical quadrature information for the given element type
@code{elementType} and integration rule @code{integrationType} (e.g. "Gauss4"
for a Gauss quadrature suited for integrating 4th order polynomials).
@code{localCoord} contains the u, v, w coordinates of the G integration points
in the reference element: [g1u, g1v, g1w, ..., gGu, gGv, gGw]. @code{weights}
contains the associated weights: [g1q, ..., gGq].

@table @asis
@item Input:
@code{elementType}, @code{integrationType}
@item Output:
@code{localCoord}, @code{weights}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L902,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L782,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2109,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1756,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L90,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L84,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L84,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L30,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L112,poisson.py})
@end table

@item gmsh/model/mesh/getJacobians
Get the Jacobians of all the elements of type @code{elementType} classified on
the entity of tag @code{tag}, at the G evaluation points @code{localCoord} given
as concatenated triplets of coordinates in the reference element [g1u, g1v, g1w,
..., gGu, gGv, gGw]. Data is returned by element, with elements in the same
order as in @code{getElements} and @code{getElementsByType}. @code{jacobians}
contains for each element the 9 entries of the 3x3 Jacobian matrix at each
evaluation point. The matrix is returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu,
e1g1Jxv, ..., e1g1Jzw, e1g2Jxu, ..., e1gGJzw, e2g1Jxu, ...], with Jxu=dx/du,
Jyu=dy/du, etc. @code{determinants} contains for each element the determinant of
the Jacobian matrix at each evaluation point: [e1g1, e1g2, ... e1gG, e2g1, ...].
@code{coord} contains for each element the x, y, z coordinates of the evaluation
points. If @code{tag} < 0, get the Jacobian data for all entities. If
@code{numTasks} > 1, only compute and return the part of the data indexed by
@code{task}.

@table @asis
@item Input:
@code{elementType}, @code{localCoord}, @code{tag = -1}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{jacobians}, @code{determinants}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L923,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L802,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2138,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1790,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L93,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L97,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L97,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L31,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L131,poisson.py})
@end table

@item gmsh/model/mesh/preallocateJacobians
Preallocate data before calling @code{getJacobians} with @code{numTasks} > 1.
For C and C++ only.

@table @asis
@item Input:
@code{elementType}, @code{numEvaluationPoints}, @code{allocateJacobians}, @code{allocateDeterminants}, @code{allocateCoord}, @code{tag = -1}
@item Output:
@code{jacobians}, @code{determinants}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L936,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L814,C}
@end table

@item gmsh/model/mesh/getJacobian
Get the Jacobian for a single element @code{elementTag}, at the G evaluation
points @code{localCoord} given as concatenated triplets of coordinates in the
reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]. @code{jacobians} contains
the 9 entries of the 3x3 Jacobian matrix at each evaluation point. The matrix is
returned by column: [e1g1Jxu, e1g1Jyu, e1g1Jzu, e1g1Jxv, ..., e1g1Jzw, e1g2Jxu,
..., e1gGJzw, e2g1Jxu, ...], with Jxu=dx/du, Jyu=dy/du, etc. @code{determinants}
contains the determinant of the Jacobian matrix at each evaluation point.
@code{coord} contains the x, y, z coordinates of the evaluation points. This
function relies on an internal cache (a vector in case of dense element
numbering, a map otherwise); for large meshes accessing Jacobians in bulk is
often preferable.

@table @asis
@item Input:
@code{elementTag}, @code{localCoord}
@item Output:
@code{jacobians}, @code{determinants}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L959,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L836,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2182,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1824,Julia}
@end table

@item gmsh/model/mesh/getBasisFunctions
Get the basis functions of the element of type @code{elementType} at the
evaluation points @code{localCoord} (given as concatenated triplets of
coordinates in the reference element [g1u, g1v, g1w, ..., gGu, gGv, gGw]), for
the function space @code{functionSpaceType} (e.g. "Lagrange" or "GradLagrange"
for Lagrange basis functions or their gradient, in the u, v, w coordinates of
the reference element; or "H1Legendre3" or "GradH1Legendre3" for 3rd order
hierarchical H1 Legendre functions). @code{numComponents} returns the number C
of components of a basis function. @code{basisFunctions} returns the value of
the N basis functions at the evaluation points, i.e. [g1f1, g1f2, ..., g1fN,
g2f1, ...] when C == 1 or [g1f1u, g1f1v, g1f1w, g1f2u, ..., g1fNw, g2f1u, ...]
when C == 3. For basis functions that depend on the orientation of the elements,
all values for the first orientation are returned first, followed by values for
the second, etc. @code{numOrientations} returns the overall number of
orientations. If @code{wantedOrientations} is not empty, only return the values
for the desired orientation indices.

@table @asis
@item Input:
@code{elementType}, @code{localCoord}, @code{functionSpaceType}, @code{wantedOrientations = []}
@item Output:
@code{numComponents}, @code{basisFunctions}, @code{numOrientations}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L983,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L859,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2220,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1863,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L87,edges.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L87,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L32,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L114,poisson.py})
@end table

@item gmsh/model/mesh/getBasisFunctionsOrientation@-ForElements
Get the orientation index of the elements of type @code{elementType} in the
entity of tag @code{tag}. The arguments have the same meaning as in
@code{getBasisFunctions}. @code{basisFunctionsOrientation} is a vector giving
for each element the orientation index in the values returned by
@code{getBasisFunctions}. For Lagrange basis functions the call is superfluous
as it will return a vector of zeros.

@table @asis
@item Input:
@code{elementType}, @code{functionSpaceType}, @code{tag = -1}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{basisFunctionsOrientation}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L999,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L874,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2266,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1888,Julia}
@end table

@item gmsh/model/mesh/getBasisFunctionsOrientation@-ForElement
Get the orientation of a single element @code{elementTag}.

@table @asis
@item Input:
@code{elementTag}, @code{functionSpaceType}
@item Output:
@code{basisFunctionsOrientation}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1009,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L883,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2294,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1907,Julia}
@end table

@item gmsh/model/mesh/getNumberOfOrientations
Get the number of possible orientations for elements of type @code{elementType}
and function space named @code{functionSpaceType}.

@table @asis
@item Input:
@code{elementType}, @code{functionSpaceType}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1017,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L890,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2314,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1925,Julia}
@end table

@item gmsh/model/mesh/preallocateBasisFunctions@-OrientationForElements
Preallocate data before calling @code{getBasisFunctionsOrientationForElements}
with @code{numTasks} > 1. For C and C++ only.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}
@item Output:
@code{basisFunctionsOrientation}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1024,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L896,C}
@end table

@item gmsh/model/mesh/getEdgeNumber
Get the global edge identifier @code{edgeNum} for an input list of node pairs,
concatenated in the vector @code{edgeNodes}.  Warning: this is an experimental
feature and will probably change in a future release.

@table @asis
@item Input:
@code{edgeNodes}
@item Output:
@code{edgeNum}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1033,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L904,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2333,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1943,Julia}
@end table

@item gmsh/model/mesh/getLocalMultipliersForHcurl0
Get the local multipliers (to guarantee H(curl)-conformity) of the order 0
H(curl) basis functions. Warning: this is an experimental feature and will
probably change in a future release.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}
@item Output:
@code{localMultipliers}, @code{elementTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1041,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L911,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2355,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1964,Julia}
@end table

@item gmsh/model/mesh/getKeysForElements
Generate the @code{keys} for the elements of type @code{elementType} in the
entity of tag @code{tag}, for the @code{functionSpaceType} function space. Each
key uniquely identifies a basis function in the function space. If
@code{returnCoord} is set, the @code{coord} vector contains the x, y, z
coordinates locating basis functions for sorting purposes. Warning: this is an
experimental feature and will probably change in a future release.

@table @asis
@item Input:
@code{elementType}, @code{functionSpaceType}, @code{tag = -1}, @code{returnCoord = True}
@item Output:
@code{keys}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1054,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L923,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2381,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L1991,Julia}
@end table

@item gmsh/model/mesh/getKeysForElement
Get the keys for a single element @code{elementTag}.

@table @asis
@item Input:
@code{elementTag}, @code{functionSpaceType}, @code{returnCoord = True}
@item Output:
@code{keys}, @code{coord}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1064,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L932,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2412,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2014,Julia}
@end table

@item gmsh/model/mesh/getNumberOfKeysForElements
Get the number of keys by elements of type @code{elementType} for function space
named @code{functionSpaceType}.

@table @asis
@item Input:
@code{elementType}, @code{functionSpaceType}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1074,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L941,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2437,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2038,Julia}
@end table

@item gmsh/model/mesh/getInformationForElements
Get information about the @code{keys}. @code{infoKeys} returns information about
the functions associated with the @code{keys}. @code{infoKeys[0].first}
describes the type of function (0 for  vertex function, 1 for edge function, 2
for face function and 3 for bubble function). @code{infoKeys[0].second} gives
the order of the function associated with the key. Warning: this is an
experimental feature and will probably change in a future release.

@table @asis
@item Input:
@code{keys}, @code{elementType}, @code{functionSpaceType}
@item Output:
@code{infoKeys}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1085,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L951,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2456,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2059,Julia}
@end table

@item gmsh/model/mesh/getBarycenters
Get the barycenters of all elements of type @code{elementType} classified on the
entity of tag @code{tag}. If @code{primary} is set, only the primary nodes of
the elements are taken into account for the barycenter calculation. If
@code{fast} is set, the function returns the sum of the primary node coordinates
(without normalizing by the number of nodes). If @code{tag} < 0, get the
barycenters for all entities. If @code{numTasks} > 1, only compute and return
the part of the data indexed by @code{task}.

@table @asis
@item Input:
@code{elementType}, @code{tag}, @code{fast}, @code{primary}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{barycenters}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1099,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L964,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2483,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2086,Julia}
@end table

@item gmsh/model/mesh/preallocateBarycenters
Preallocate data before calling @code{getBarycenters} with @code{numTasks} > 1.
For C and C++ only.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}
@item Output:
@code{barycenters}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1111,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L975,C}
@end table

@item gmsh/model/mesh/getElementEdgeNodes
Get the nodes on the edges of all elements of type @code{elementType} classified
on the entity of tag @code{tag}. @code{nodeTags} contains the node tags of the
edges for all the elements: [e1a1n1, e1a1n2, e1a2n1, ...]. Data is returned by
element, with elements in the same order as in @code{getElements} and
@code{getElementsByType}. If @code{primary} is set, only the primary (begin/end)
nodes of the edges are returned. If @code{tag} < 0, get the edge nodes for all
entities. If @code{numTasks} > 1, only compute and return the part of the data
indexed by @code{task}.

@table @asis
@item Input:
@code{elementType}, @code{tag = -1}, @code{primary = False}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1125,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L988,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2513,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2111,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L57,edges.cpp})
@end table

@item gmsh/model/mesh/getElementFaceNodes
Get the nodes on the faces of type @code{faceType} (3 for triangular faces, 4
for quadrangular faces) of all elements of type @code{elementType} classified on
the entity of tag @code{tag}. @code{nodeTags} contains the node tags of the
faces for all elements: [e1f1n1, ..., e1f1nFaceType, e1f2n1, ...]. Data is
returned by element, with elements in the same order as in @code{getElements}
and @code{getElementsByType}. If @code{primary} is set, only the primary
(corner) nodes of the faces are returned. If @code{tag} < 0, get the face nodes
for all entities. If @code{numTasks} > 1, only compute and return the part of
the data indexed by @code{task}.

@table @asis
@item Input:
@code{elementType}, @code{faceType}, @code{tag = -1}, @code{primary = False}, @code{task = 0}, @code{numTasks = 1}
@item Output:
@code{nodeTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1143,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1005,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2543,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2137,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L57,faces.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/neighbors.py#L16,neighbors.py})
@end table

@item gmsh/model/mesh/getGhostElements
Get the ghost elements @code{elementTags} and their associated @code{partitions}
stored in the ghost entity of dimension @code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{elementTags}, @code{partitions}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1155,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1016,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2575,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2157,Julia}
@end table

@item gmsh/model/mesh/setSize
Set a mesh size constraint on the model entities @code{dimTags}. Currently only
entities of dimension 0 (points) are handled.

@table @asis
@item Input:
@code{dimTags}, @code{size}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1164,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1024,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2600,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2178,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L115,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L32,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L48,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L234,adapt_mesh.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L97,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L29,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L36,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L81,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/periodic.py#L11,periodic.py}, ...)
@end table

@item gmsh/model/mesh/setSizeAtParametricPoints
Set mesh size constraints at the given parametric points @code{parametricCoord}
on the model entity of dimension @code{dim} and tag @code{tag}. Currently only
entities of dimension 1 (lines) are handled.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{parametricCoord}, @code{sizes}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1172,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1031,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2617,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2196,Julia}
@end table

@item gmsh/model/mesh/setSizeCallback
Set a global mesh size callback. The callback should take 5 arguments
(@code{dim}, @code{tag}, @code{x}, @code{y} and @code{z}) and return the value
of the mesh size at coordinates (@code{x}, @code{y}, @code{z}).

@table @asis
@item Input:
@code{callback}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1182,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1040,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2638,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2212,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L115,t10.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L107,t10.py})
@end table

@item gmsh/model/mesh/removeSizeCallback
Remove the global mesh size callback.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1187,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1044,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2658,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2228,Julia}
@end table

@item gmsh/model/mesh/setTransfiniteCurve
Set a transfinite meshing constraint on the curve @code{tag}, with
@code{numNodes} nodes distributed according to @code{meshType} and @code{coef}.
Currently supported types are "Progression" (geometrical progression with power
@code{coef}) and "Bump" (refinement toward both extremities of the curve).

@table @asis
@item Input:
@code{tag}, @code{numNodes}, @code{meshType = "Progression"}, @code{coef = 1.}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1195,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1050,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2671,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2245,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L154,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L148,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L147,terrain.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L76,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteSurface
Set a transfinite meshing constraint on the surface @code{tag}.
@code{arrangement} describes the arrangement of the triangles when the surface
is not flagged as recombined: currently supported values are "Left", "Right",
"AlternateLeft" and "AlternateRight". @code{cornerTags} can be used to specify
the (3 or 4) corners of the transfinite interpolation explicitly; specifying the
corners explicitly is mandatory if the surface has more that 3 or 4 points on
its boundary.

@table @asis
@item Input:
@code{tag}, @code{arrangement = "Left"}, @code{cornerTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1209,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1063,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2691,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2264,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L158,x2.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.cpp#L13,get_data_perf.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/square.cpp#L7,square.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L150,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.py#L11,get_data_perf.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L149,terrain.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L78,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteVolume
Set a transfinite meshing constraint on the surface @code{tag}.
@code{cornerTags} can be used to specify the (6 or 8) corners of the transfinite
interpolation explicitly.

@table @asis
@item Input:
@code{tag}, @code{cornerTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1218,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1071,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2714,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2280,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L162,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L153,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L152,terrain.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L81,terrain_stl.py})
@end table

@item gmsh/model/mesh/setTransfiniteAutomatic
Set transfinite meshing constraints on the model entities in @code{dimTag}.
Transfinite meshing constraints are added to the curves of the quadrangular
surfaces and to the faces of 6-sided volumes. Quadragular faces with a corner
angle superior to @code{cornerAngle} (in radians) are ignored. The number of
points is automatically determined from the sizing constraints. If @code{dimTag}
is empty, the constraints are applied to all entities in the model. If
@code{recombine} is true, the recombine flag is automatically set on the
transfinite surfaces.

@table @asis
@item Input:
@code{dimTags = []}, @code{cornerAngle = 2.35}, @code{recombine = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1231,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1083,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2732,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2300,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L169,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L159,x2.py})
@end table

@item gmsh/model/mesh/setRecombine
Set a recombination meshing constraint on the model entity of dimension
@code{dim} and tag @code{tag}. Currently only entities of dimension 2 (to
recombine triangles into quadrangles) are supported.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1240,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1091,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2756,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2318,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t11.cpp#L44,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L159,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t11.py#L42,t11.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L151,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L238,poisson.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L150,terrain.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L79,terrain_stl.py})
@end table

@item gmsh/model/mesh/setSmoothing
Set a smoothing meshing constraint on the model entity of dimension @code{dim}
and tag @code{tag}. @code{val} iterations of a Laplace smoother are applied.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1247,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1097,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2773,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2333,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L160,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L152,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L151,terrain.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L80,terrain_stl.py})
@end table

@item gmsh/model/mesh/setReverse
Set a reverse meshing constraint on the model entity of dimension @code{dim} and
tag @code{tag}. If @code{val} is true, the mesh orientation will be reversed
with respect to the natural mesh orientation (i.e. the orientation consistent
with the orientation of the geometry). If @code{val} is false, the mesh is left
as-is.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1258,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1107,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2790,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2350,Julia}
@end table

@item gmsh/model/mesh/setAlgorithm
Set the meshing algorithm on the model entity of dimension @code{dim} and tag
@code{tag}. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1266,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1114,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2810,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2365,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L210,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L205,t5.py})
@end table

@item gmsh/model/mesh/setSizeFromBoundary
Force the mesh size to be extended from the boundary, or not, for the model
entity of dimension @code{dim} and tag @code{tag}. Currently only supported for
@code{dim} == 2.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1275,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1122,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2827,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2381,Julia}
@end table

@item gmsh/model/mesh/setCompound
Set a compound meshing constraint on the model entities of dimension @code{dim}
and tags @code{tags}. During meshing, compound entities are treated as a single
discrete entity, which is automatically reparametrized.

@table @asis
@item Input:
@code{dim}, @code{tags}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1284,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1130,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2845,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2397,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t12.cpp#L83,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t12.py#L79,t12.py})
@end table

@item gmsh/model/mesh/setOutwardOrientation
Set meshing constraints on the bounding surfaces of the volume of tag @code{tag}
so that all surfaces are oriented with outward pointing normals. Currently only
available with the OpenCASCADE kernel, as it relies on the STL triangulation.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1293,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1138,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2863,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2413,Julia}
@end table

@item gmsh/model/mesh/embed
Embed the model entities of dimension @code{dim} and tags @code{tags} in the
(@code{inDim}, @code{inTag}) model entity. The dimension @code{dim} can 0, 1 or
2 and must be strictly smaller than @code{inDim}, which must be either 2 or 3.
The embedded entities should not be part of the boundary of the entity
@code{inTag}, whose mesh will conform to the mesh of the embedded entities.

@table @asis
@item Input:
@code{dim}, @code{tags}, @code{inDim}, @code{inTag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1302,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1146,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2880,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2431,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t15.cpp#L51,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t15.py#L47,t15.py})
@end table

@item gmsh/model/mesh/removeEmbedded
Remove embedded entities from the model entities @code{dimTags}. if @code{dim}
is >= 0, only remove embedded entities of the given dimension (e.g. embedded
points if @code{dim} == 0).

@table @asis
@item Input:
@code{dimTags}, @code{dim = -1}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1312,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1155,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2902,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2447,Julia}
@end table

@item gmsh/model/mesh/reorderElements
Reorder the elements of type @code{elementType} classified on the entity of tag
@code{tag} according to @code{ordering}.

@table @asis
@item Input:
@code{elementType}, @code{tag}, @code{ordering}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1319,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1161,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2920,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2464,Julia}
@end table

@item gmsh/model/mesh/renumberNodes
Renumber the node tags in a continuous sequence.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1326,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1167,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2938,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2478,Julia}
@end table

@item gmsh/model/mesh/renumberElements
Renumber the element tags in a continuous sequence.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1331,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1170,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2951,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2492,Julia}
@end table

@item gmsh/model/mesh/setPeriodic
Set the meshes of the entities of dimension @code{dim} and tag @code{tags} as
periodic copies of the meshes of entities @code{tagsMaster}, using the affine
transformation specified in @code{affineTransformation} (16 entries of a 4x4
matrix, by row). If used after meshing, generate the periodic node
correspondence information assuming the meshes of entities @code{tags}
effectively match the meshes of entities @code{tagsMaster} (useful for
structured and extruded meshes). Currently only available for @code{dim} == 1
and @code{dim} == 2.

@table @asis
@item Input:
@code{dim}, @code{tags}, @code{tagsMaster}, @code{affineTransform}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1343,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1180,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2964,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2512,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L40,t18.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L36,t18.py}, @url{@value{GITLAB-PREFIX}/demos/api/periodic.py#L13,periodic.py})
@end table

@item gmsh/model/mesh/getPeriodicNodes
Get the master entity @code{tagMaster}, the node tags @code{nodeTags} and their
corresponding master node tags @code{nodeTagsMaster}, and the affine transform
@code{affineTransform} for the entity of dimension @code{dim} and tag
@code{tag}. If @code{includeHighOrderNodes} is set, include high-order nodes in
the returned data.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{includeHighOrderNodes = False}
@item Output:
@code{tagMaster}, @code{nodeTags}, @code{nodeTagsMaster}, @code{affineTransform}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1355,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1191,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L2991,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2531,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/periodic.py#L19,periodic.py})
@end table

@item gmsh/model/mesh/removeDuplicateNodes
Remove duplicate nodes in the mesh of the current model.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1366,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1201,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3026,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2555,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/glue_and_remesh_stl.py#L15,glue_and_remesh_stl.py})
@end table

@item gmsh/model/mesh/splitQuadrangles
Split (into two triangles) all quadrangles in surface @code{tag} whose quality
is lower than @code{quality}. If @code{tag} < 0, split quadrangles in all
surfaces.

@table @asis
@item Input:
@code{quality = 1.}, @code{tag = -1}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1372,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1205,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3039,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2570,Julia}
@end table

@item gmsh/model/mesh/classifySurfaces
Classify ("color") the surface mesh based on the angle threshold @code{angle}
(in radians), and create new discrete surfaces, curves and points accordingly.
If @code{boundary} is set, also create discrete curves on the boundary if the
surface is open. If @code{forReparametrization} is set, create edges and
surfaces that can be reparametrized using a single map. If @code{curveAngle} is
less than Pi, also force curves to be split according to @code{curveAngle}.

@table @asis
@item Input:
@code{angle}, @code{boundary = True}, @code{forReparametrization = False}, @code{curveAngle = pi}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1384,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1216,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3055,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2589,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L48,t13.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L39,t13.py}, @url{@value{GITLAB-PREFIX}/demos/api/glue_and_remesh_stl.py#L19,glue_and_remesh_stl.py}, @url{@value{GITLAB-PREFIX}/demos/api/remesh_stl.py#L18,remesh_stl.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L16,terrain_stl.py})
@end table

@item gmsh/model/mesh/createGeometry
Create a geometry for the discrete entities @code{dimTags} (represented solely
by a mesh, without an underlying CAD description), i.e. create a parametrization
for discrete curves and surfaces, assuming that each can be parametrized with a
single map. If @code{dimTags} is empty, create a geometry for all the discrete
entities.

@table @asis
@item Input:
@code{dimTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1396,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1227,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3078,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2607,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L54,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L111,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L45,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L106,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/glue_and_remesh_stl.py#L32,glue_and_remesh_stl.py}, @url{@value{GITLAB-PREFIX}/demos/api/remesh_stl.py#L22,remesh_stl.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain.py#L75,terrain.py}, ...)
@end table

@item gmsh/model/mesh/createTopology
Create a boundary representation from the mesh if the model does not have one
(e.g. when imported from mesh file formats with no BRep representation of the
underlying model). If @code{makeSimplyConnected} is set, enforce simply
connected discrete surfaces and volumes. If @code{exportDiscrete} is set, clear
any built-in CAD kernel entities and export the discrete entities in the built-
in CAD kernel.

@table @asis
@item Input:
@code{makeSimplyConnected = True}, @code{exportDiscrete = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1406,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1236,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3097,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2627,Julia}
@end table

@item gmsh/model/mesh/computeHomology
Compute a basis representation for homology spaces after a mesh has been
generated. The computation domain is given in a list of physical group tags
@code{domainTags}; if empty, the whole mesh is the domain. The computation
subdomain for relative homology computation is given in a list of physical group
tags @code{subdomainTags}; if empty, absolute homology is computed. The
dimensions homology bases to be computed are given in the list @code{dim}; if
empty, all bases are computed. Resulting basis representation chains are stored
as physical groups in the mesh.

@table @asis
@item Input:
@code{domainTags = []}, @code{subdomainTags = []}, @code{dims = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1419,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1248,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3117,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2648,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L112,t14.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L110,t14.py})
@end table

@item gmsh/model/mesh/computeCohomology
Compute a basis representation for cohomology spaces after a mesh has been
generated. The computation domain is given in a list of physical group tags
@code{domainTags}; if empty, the whole mesh is the domain. The computation
subdomain for relative cohomology computation is given in a list of physical
group tags @code{subdomainTags}; if empty, absolute cohomology is computed. The
dimensions homology bases to be computed are given in the list @code{dim}; if
empty, all bases are computed. Resulting basis representation cochains are
stored as physical groups in the mesh.

@table @asis
@item Input:
@code{domainTags = []}, @code{subdomainTags = []}, @code{dims = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1433,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1261,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3143,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2669,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L122,t14.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L122,t14.py})
@end table

@item gmsh/model/mesh/computeCrossField
Compute a cross field for the current mesh. The function creates 3 views: the H
function, the Theta function and cross directions. Return the tags of the views

@table @asis
@item Input:
-
@item Output:
@code{viewTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1442,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1269,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3169,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2686,Julia}
@end table

@end ftable

@node Namespace gmsh/model/mesh/field, Namespace gmsh/model/geo, Namespace gmsh/model/mesh, Gmsh API
@section Namespace @code{gmsh/model/mesh/field}: mesh size field functions

@ftable @code
@item gmsh/model/mesh/field/add
Add a new mesh size field of type @code{fieldType}. If @code{tag} is positive,
assign the tag explicitly; otherwise a new tag is assigned automatically. Return
the field tag.

@table @asis
@item Input:
@code{fieldType}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1451,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1275,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3195,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2716,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t7.cpp#L49,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L46,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t11.cpp#L38,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L68,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t17.cpp#L41,t17.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t7.py#L43,t7.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L43,t10.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L56,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t17.py#L35,t17.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L112,adapt_mesh.py}, ...)
@end table

@item gmsh/model/mesh/field/remove
Remove the field with tag @code{tag}.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1457,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1280,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3215,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2730,Julia}
@end table

@item gmsh/model/mesh/field/setNumber
Set the numerical option @code{option} to value @code{value} for field
@code{tag}.

@table @asis
@item Input:
@code{tag}, @code{option}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1462,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1284,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3229,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2744,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L48,t10.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L270,adapt_mesh.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L45,t10.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L113,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L46,copy_mesh.py})
@end table

@item gmsh/model/mesh/field/setString
Set the string option @code{option} to value @code{value} for field @code{tag}.

@table @asis
@item Input:
@code{tag}, @code{option}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1469,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1290,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3245,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2758,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L73,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t11.cpp#L39,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L70,t13.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L69,t10.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L58,t13.py})
@end table

@item gmsh/model/mesh/field/setNumbers
Set the numerical list option @code{option} to value @code{value} for field
@code{tag}.

@table @asis
@item Input:
@code{tag}, @code{option}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1476,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1296,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3261,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2772,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L47,t10.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L44,t10.py})
@end table

@item gmsh/model/mesh/field/setAsBackgroundMesh
Set the field @code{tag} as the background mesh size field.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1483,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1302,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3278,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2786,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t7.cpp#L52,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t10.cpp#L108,t10.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t11.cpp#L41,t11.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L73,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t17.cpp#L42,t17.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t7.py#L46,t7.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t10.py#L101,t10.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L61,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t17.py#L36,t17.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L114,adapt_mesh.py}, ...)
@end table

@item gmsh/model/mesh/field/setAsBoundaryLayer
Set the field @code{tag} as a boundary layer size field.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1488,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1306,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3292,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2800,Julia}
@end table

@end ftable

@node Namespace gmsh/model/geo, Namespace gmsh/model/geo/mesh, Namespace gmsh/model/mesh/field, Gmsh API
@section Namespace @code{gmsh/model/geo}: built-in CAD kernel functions

@ftable @code
@item gmsh/model/geo/addPoint
Add a geometrical point in the built-in CAD representation, at coordinates
(@code{x}, @code{y}, @code{z}). If @code{meshSize} is > 0, add a meshing
constraint at that point. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Return the tag of the point.
(Note that the point will be added in the current model only after
@code{synchronize} is called. This behavior holds for all the entities added in
the geo module.)

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{meshSize = 0.}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1504,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1315,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3312,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2834,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L37,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L23,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L21,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L19,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L20,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L34,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L21,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L19,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L45,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L19,t6.py}, ...)
@end table

@item gmsh/model/geo/addLine
Add a straight line segment in the built-in CAD representation, between the two
points with tags @code{startTag} and @code{endTag}. If @code{tag} is positive,
set the tag explicitly; otherwise a new tag is selected automatically. Return
the tag of the line.

@table @asis
@item Input:
@code{startTag}, @code{endTag}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1516,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1326,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3338,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2853,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L69,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L27,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L25,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L125,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L24,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L65,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L25,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L23,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L60,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L23,t6.py}, ...)
@end table

@item gmsh/model/geo/addCircleArc
Add a circle arc (strictly smaller than Pi) in the built-in CAD representation,
between the two points with tags @code{startTag} and @code{endTag}, and with
center @code{centerTag}. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. If (@code{nx}, @code{ny},
@code{nz}) != (0, 0, 0), explicitly set the plane of the circle arc. Return the
tag of the circle arc.

@table @asis
@item Input:
@code{startTag}, @code{centerTag}, @code{endTag}, @code{tag = -1}, @code{nx = 0.}, @code{ny = 0.}, @code{nz = 0.}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1528,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1337,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3360,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2873,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L27,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L119,t5.py})
@end table

@item gmsh/model/geo/addEllipseArc
Add an ellipse arc (strictly smaller than Pi) in the built-in CAD
representation, between the two points @code{startTag} and @code{endTag}, and
with center @code{centerTag} and major axis point @code{majorTag}. If @code{tag}
is positive, set the tag explicitly; otherwise a new tag is selected
automatically. If (@code{nx}, @code{ny}, @code{nz}) != (0, 0, 0), explicitly set
the plane of the circle arc. Return the tag of the ellipse arc.

@table @asis
@item Input:
@code{startTag}, @code{centerTag}, @code{majorTag}, @code{endTag}, @code{tag = -1}, @code{nx = 0.}, @code{ny = 0.}, @code{nz = 0.}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1544,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1352,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3388,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2894,Julia}
@end table

@item gmsh/model/geo/addSpline
Add a spline (Catmull-Rom) curve in the built-in CAD representation, going
through the points @code{pointTags}. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Create a periodic
curve if the first and last points are the same. Return the tag of the spline
curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1560,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1367,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3417,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2913,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t12.cpp#L67,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t12.py#L63,t12.py})
@end table

@item gmsh/model/geo/addBSpline
Add a cubic b-spline curve in the built-in CAD representation, with
@code{pointTags} control points. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Creates a periodic
curve if the first and last points are the same. Return the tag of the b-spline
curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1570,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1376,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3440,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2932,Julia}
@end table

@item gmsh/model/geo/addBezier
Add a Bezier curve in the built-in CAD representation, with @code{pointTags}
control points. If @code{tag} is positive, set the tag explicitly; otherwise a
new tag is selected automatically.  Return the tag of the Bezier curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1578,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1383,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3463,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2950,Julia}
@end table

@item gmsh/model/geo/addPolyline
Add a polyline curve in the built-in CAD representation, going through the
points @code{pointTags}. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Create a periodic curve if the
first and last points are the same. Return the tag of the polyline curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1588,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1391,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3484,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2969,Julia}
@end table

@item gmsh/model/geo/addCompoundSpline
Add a spline (Catmull-Rom) curve in the built-in CAD representation, going
through points sampling the curves in @code{curveTags}. The density of sampling
points on each curve is governed by @code{numIntervals}. If @code{tag} is
positive, set the tag explicitly; otherwise a new tag is selected automatically.
Return the tag of the spline.

@table @asis
@item Input:
@code{curveTags}, @code{numIntervals = 5}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1598,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1400,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3506,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L2989,Julia}
@end table

@item gmsh/model/geo/addCompoundBSpline
Add a b-spline curve in the built-in CAD representation, with control points
sampling the curves in @code{curveTags}. The density of sampling points on each
curve is governed by @code{numIntervals}. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Return the tag of the
b-spline.

@table @asis
@item Input:
@code{curveTags}, @code{numIntervals = 20}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1609,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1410,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3530,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3008,Julia}
@end table

@item gmsh/model/geo/addCurveLoop
Add a curve loop (a closed wire) in the built-in CAD representation, formed by
the curves @code{curveTags}. @code{curveTags} should contain (signed) tags of
model entities of dimension 1 forming a closed loop: a negative tag signifies
that the underlying curve is considered with reversed orientation. If @code{tag}
is positive, set the tag explicitly; otherwise a new tag is selected
automatically. If @code{reorient} is set, automatically reorient the curves if
necessary. Return the tag of the curve loop.

@table @asis
@item Input:
@code{curveTags}, @code{tag = -1}, @code{reorient = False}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1622,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1422,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3554,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3030,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L82,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L31,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L29,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L40,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L28,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L77,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L29,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L27,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L82,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L27,t6.py}, ...)
@end table

@item gmsh/model/geo/addPlaneSurface
Add a plane surface in the built-in CAD representation, defined by one or more
curve loops @code{wireTags}. The first curve loop defines the exterior contour;
additional curve loop define holes. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Return the tag of the
surface.

@table @asis
@item Input:
@code{wireTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1633,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1432,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3580,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3050,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L87,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L32,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L30,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L148,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L29,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L82,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L30,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L28,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L83,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L28,t6.py}, ...)
@end table

@item gmsh/model/geo/addSurfaceFilling
Add a surface in the built-in CAD representation, filling the curve loops in
@code{wireTags} using transfinite interpolation. Currently only a single curve
loop is supported; this curve loop should be composed by 3 or 4 curves only. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTags}, @code{tag = -1}, @code{sphereCenterTag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1643,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1441,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3603,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3070,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L61,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t12.cpp#L71,t12.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L153,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t12.py#L67,t12.py})
@end table

@item gmsh/model/geo/addSurfaceLoop
Add a surface loop (a closed shell) formed by @code{surfaceTags} in the built-in
CAD representation.  If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Return the tag of the shell.

@table @asis
@item Input:
@code{surfaceTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1653,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1449,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3627,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3088,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L114,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L70,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L61,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L141,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L109,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L103,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L49,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L136,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/glue_and_remesh_stl.py#L38,glue_and_remesh_stl.py}, ...)
@end table

@item gmsh/model/geo/addVolume
Add a volume (a region) in the built-in CAD representation, defined by one or
more shells @code{shellTags}. The first surface loop defines the exterior
boundary; additional surface loop define holes. If @code{tag} is positive, set
the tag explicitly; otherwise a new tag is selected automatically. Return the
tag of the volume.

@table @asis
@item Input:
@code{shellTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1663,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1458,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3648,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3108,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L115,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L71,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L62,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x2.cpp#L142,x2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L110,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L163,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t13.py#L50,t13.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x2.py#L137,x2.py}, @url{@value{GITLAB-PREFIX}/demos/api/glue_and_remesh_stl.py#L39,glue_and_remesh_stl.py}, ...)
@end table

@item gmsh/model/geo/extrude
Extrude the entities @code{dimTags} in the built-in CAD representation, using a
translation along (@code{dx}, @code{dy}, @code{dz}). Return extruded entities in
@code{outDimTags}. If @code{numElements} is not empty, also extrude the mesh:
the entries in @code{numElements} give the number of elements in each layer. If
@code{height} is not empty, it provides the (cumulative) height of the different
layers, normalized to 1. If @code{dx} == @code{dy} == @code{dz} == 0, the
entities are extruded along their normal.

@table @asis
@item Input:
@code{dimTags}, @code{dx}, @code{dy}, @code{dz}, @code{numElements = []}, @code{heights = []}, @code{recombine = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1675,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1469,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3671,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3130,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L125,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L46,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t14.cpp#L65,t14.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t15.cpp#L63,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L119,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L44,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t14.py#L59,t14.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t15.py#L59,t15.py}, @url{@value{GITLAB-PREFIX}/demos/api/hex.py#L8,hex.py})
@end table

@item gmsh/model/geo/revolve
Extrude the entities @code{dimTags} in the built-in CAD representation, using a
rotation of @code{angle} radians around the axis of revolution defined by the
point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay},
@code{az}). The angle should be strictly smaller than Pi. Return extruded
entities in @code{outDimTags}. If @code{numElements} is not empty, also extrude
the mesh: the entries in @code{numElements} give the number of elements in each
layer. If @code{height} is not empty, it provides the (cumulative) height of the
different layers, normalized to 1.

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{ax}, @code{ay}, @code{az}, @code{angle}, @code{numElements = []}, @code{heights = []}, @code{recombine = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1694,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1487,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3705,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3158,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L53,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L50,t3.py})
@end table

@item gmsh/model/geo/twist
Extrude the entities @code{dimTags} in the built-in CAD representation, using a
combined translation and rotation of @code{angle} radians, along (@code{dx},
@code{dy}, @code{dz}) and around the axis of revolution defined by the point
(@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay},
@code{az}). The angle should be strictly smaller than Pi. Return extruded
entities in @code{outDimTags}. If @code{numElements} is not empty, also extrude
the mesh: the entries in @code{numElements} give the number of elements in each
layer. If @code{height} is not empty, it provides the (cumulative) height of the
different layers, normalized to 1.

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{dz}, @code{ax}, @code{ay}, @code{az}, @code{angle}, @code{numElements = []}, @code{heights = []}, @code{recombine = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1718,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1509,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3744,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3187,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L64,t3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L61,t3.py})
@end table

@item gmsh/model/geo/translate
Translate the entities @code{dimTags} in the built-in CAD representation along
(@code{dx}, @code{dy}, @code{dz}).

@table @asis
@item Input:
@code{dimTags}, @code{dx}, @code{dy}, @code{dz}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1738,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1528,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3786,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3208,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L49,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L46,t2.py})
@end table

@item gmsh/model/geo/rotate
Rotate the entities @code{dimTags} in the built-in CAD representation by
@code{angle} radians around the axis of revolution defined by the point
(@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay},
@code{az}).

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{ax}, @code{ay}, @code{az}, @code{angle}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1748,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1537,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3805,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3226,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L53,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L50,t2.py})
@end table

@item gmsh/model/geo/dilate
Scale the entities @code{dimTag} in the built-in CAD representation by factors
@code{a}, @code{b} and @code{c} along the three coordinate axes; use (@code{x},
@code{y}, @code{z}) as the center of the homothetic transformation.

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{a}, @code{b}, @code{c}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1762,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1550,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3829,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3244,Julia}
@end table

@item gmsh/model/geo/mirror
Mirror the entities @code{dimTag} in the built-in CAD representation, with
respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z +
@code{d} = 0.

@table @asis
@item Input:
@code{dimTags}, @code{a}, @code{b}, @code{c}, @code{d}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1774,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1561,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3852,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3261,Julia}
@end table

@item gmsh/model/geo/symmetrize
Mirror the entities @code{dimTag} in the built-in CAD representation, with
respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z +
@code{d} = 0. (This is a synonym for @code{mirror}, which will be deprecated in
a future release.)

@table @asis
@item Input:
@code{dimTags}, @code{a}, @code{b}, @code{c}, @code{d}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1786,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1572,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3872,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3279,Julia}
@end table

@item gmsh/model/geo/copy
Copy the entities @code{dimTags} in the built-in CAD representation; the new
entities are returned in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1796,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1581,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3894,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3298,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L62,t2.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L58,t2.py})
@end table

@item gmsh/model/geo/remove
Remove the entities @code{dimTags} in the built-in CAD representation. If
@code{recursive} is true, remove all the entities on their boundaries, down to
dimension 0.

@table @asis
@item Input:
@code{dimTags}, @code{recursive = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1804,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1588,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3915,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3319,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L32,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L31,t6.py})
@end table

@item gmsh/model/geo/removeAllDuplicates
Remove all duplicate entities in the built-in CAD representation (different
entities at the same geometrical location).

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1811,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1594,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3933,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3336,Julia}
@end table

@item gmsh/model/geo/splitCurve
Split the curve of tag @code{tag} in the built-in CAD representation, on the
control points @code{pointTags}. Return the tags @code{curveTags} of the newly
created curves.

@table @asis
@item Input:
@code{tag}, @code{pointTags}
@item Output:
@code{curveTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1818,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1599,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3947,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3353,Julia}
@end table

@item gmsh/model/geo/getMaxTag
Get the maximum tag of entities of dimension @code{dim} in the built-in CAD
representation.

@table @asis
@item Input:
@code{dim}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1826,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1606,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3970,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3373,Julia}
@end table

@item gmsh/model/geo/setMaxTag
Set the maximum tag @code{maxTag} for entities of dimension @code{dim} in the
built-in CAD representation.

@table @asis
@item Input:
@code{dim}, @code{maxTag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1832,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1611,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L3988,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3388,Julia}
@end table

@item gmsh/model/geo/addPhysicalGroup
Add a physical group of dimension @code{dim}, grouping the entities with tags
@code{tags} in the built-in CAD representation. Return the tag of the physical
group, equal to @code{tag} if @code{tag} is positive, or a new tag if @code{tag}
< 0.

@table @asis
@item Input:
@code{dim}, @code{tags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1840,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1618,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4004,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3406,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L178,t5.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L177,t5.py})
@end table

@item gmsh/model/geo/removePhysicalGroups
Remove the physical groups @code{dimTags} from the built-in CAD representation.
If @code{dimTags} is empty, remove all groups.

@table @asis
@item Input:
@code{dimTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1848,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1625,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4026,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3421,Julia}
@end table

@item gmsh/model/geo/synchronize
Synchronize the built-in CAD representation with the current Gmsh model. This
can be called at any time, but since it involves a non trivial amount of
processing, the number of synchronization points should normally be minimized.
Without synchronization the entities in the built-in CAD representation are not
available to any function outside of the built-in CAD kernel functions.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1858,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1634,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4042,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3441,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L98,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L33,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L31,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L188,t5.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L99,t6.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L92,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L31,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L29,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L184,t5.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L94,t6.py}, ...)
@end table

@end ftable

@node Namespace gmsh/model/geo/mesh, Namespace gmsh/model/occ, Namespace gmsh/model/geo, Gmsh API
@section Namespace @code{gmsh/model/geo/mesh}: built-in CAD kernel meshing constraints

@ftable @code
@item gmsh/model/geo/mesh/setSize
Set a mesh size constraint on the entities @code{dimTags} in the built-in CAD
kernel representation. Currently only entities of dimension 0 (points) are
handled.

@table @asis
@item Input:
@code{dimTags}, @code{size}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1867,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1639,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4066,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3465,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L129,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t15.cpp#L41,t15.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L123,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t15.py#L37,t15.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteCurve
Set a transfinite meshing constraint on the curve @code{tag} in the built-in CAD
kernel representation, with @code{numNodes} nodes distributed according to
@code{meshType} and @code{coef}. Currently supported types are "Progression"
(geometrical progression with power @code{coef}) and "Bump" (refinement toward
both extremities of the curve).

@table @asis
@item Input:
@code{tag}, @code{nPoints}, @code{meshType = "Progression"}, @code{coef = 1.}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1877,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1648,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4084,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3484,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L48,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L47,t6.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteSurface
Set a transfinite meshing constraint on the surface @code{tag} in the built-in
CAD kernel representation. @code{arrangement} describes the arrangement of the
triangles when the surface is not flagged as recombined: currently supported
values are "Left", "Right", "AlternateLeft" and "AlternateRight".
@code{cornerTags} can be used to specify the (3 or 4) corners of the transfinite
interpolation explicitly; specifying the corners explicitly is mandatory if the
surface has more that 3 or 4 points on its boundary.

@table @asis
@item Input:
@code{tag}, @code{arrangement = "Left"}, @code{cornerTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1892,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1661,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4105,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3504,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L67,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L66,t6.py})
@end table

@item gmsh/model/geo/mesh/setTransfiniteVolume
Set a transfinite meshing constraint on the surface @code{tag} in the built-in
CAD kernel representation. @code{cornerTags} can be used to specify the (6 or 8)
corners of the transfinite interpolation explicitly.

@table @asis
@item Input:
@code{tag}, @code{cornerTags = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1901,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1669,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4128,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3520,Julia}
@end table

@item gmsh/model/geo/mesh/setRecombine
Set a recombination meshing constraint on the entity of dimension @code{dim} and
tag @code{tag} in the built-in CAD kernel representation. Currently only
entities of dimension 2 (to recombine triangles into quadrangles) are supported.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{angle = 45.}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1910,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1677,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4146,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3536,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t6.cpp#L71,t6.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t6.py#L70,t6.py})
@end table

@item gmsh/model/geo/mesh/setSmoothing
Set a smoothing meshing constraint on the entity of dimension @code{dim} and tag
@code{tag} in the built-in CAD kernel representation. @code{val} iterations of a
Laplace smoother are applied.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1919,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1685,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4165,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3552,Julia}
@end table

@item gmsh/model/geo/mesh/setReverse
Set a reverse meshing constraint on the entity of dimension @code{dim} and tag
@code{tag} in the built-in CAD kernel representation. If @code{val} is true, the
mesh orientation will be reversed with respect to the natural mesh orientation
(i.e. the orientation consistent with the orientation of the geometry). If
@code{val} is false, the mesh is left as-is.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1930,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1695,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4183,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3570,Julia}
@end table

@item gmsh/model/geo/mesh/setAlgorithm
Set the meshing algorithm on the entity of dimension @code{dim} and tag
@code{tag} in the built-in CAD kernel representation. Currently only supported
for @code{dim} == 2.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1939,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1703,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4203,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3585,Julia}
@end table

@item gmsh/model/geo/mesh/setSizeFromBoundary
Force the mesh size to be extended from the boundary, or not, for the entity of
dimension @code{dim} and tag @code{tag} in the built-in CAD kernel
representation. Currently only supported for @code{dim} == 2.

@table @asis
@item Input:
@code{dim}, @code{tag}, @code{val}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1948,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1711,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4221,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3601,Julia}
@end table

@end ftable

@node Namespace gmsh/model/occ, Namespace gmsh/model/occ/mesh, Namespace gmsh/model/geo/mesh, Gmsh API
@section Namespace @code{gmsh/model/occ}: OpenCASCADE CAD kernel functions

@ftable @code
@item gmsh/model/occ/addPoint
Add a geometrical point in the OpenCASCADE CAD representation, at coordinates
(@code{x}, @code{y}, @code{z}). If @code{meshSize} is > 0, add a meshing
constraint at that point. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Return the tag of the point.
(Note that the point will be added in the current model only after
@code{synchronize} is called. This behavior holds for all the entities added in
the occ module.)

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{meshSize = 0.}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1967,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1722,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4245,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3635,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L67,t19.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/spline.cpp#L10,spline.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L59,t19.py}, @url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L6,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/demos/api/bspline_filling.py#L14,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/demos/api/closest_point.py#L14,closest_point.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack.py#L11,crack.py}, ...)
@end table

@item gmsh/model/occ/addLine
Add a straight line segment in the OpenCASCADE CAD representation, between the
two points with tags @code{startTag} and @code{endTag}. If @code{tag} is
positive, set the tag explicitly; otherwise a new tag is selected automatically.
Return the tag of the line.

@table @asis
@item Input:
@code{startTag}, @code{endTag}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1979,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1733,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4271,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3654,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/crack.py#L13,crack.py})
@end table

@item gmsh/model/occ/addCircleArc
Add a circle arc in the OpenCASCADE CAD representation, between the two points
with tags @code{startTag} and @code{endTag}, with center @code{centerTag}. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the circle arc.

@table @asis
@item Input:
@code{startTag}, @code{centerTag}, @code{endTag}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L1989,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1742,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4293,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3673,Julia}
@end table

@item gmsh/model/occ/addCircle
Add a circle of center (@code{x}, @code{y}, @code{z}) and radius @code{r} in the
OpenCASCADE CAD representation. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. If @code{angle1} and
@code{angle2} are specified, create a circle arc between the two angles. Return
the tag of the circle.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{r}, @code{tag = -1}, @code{angle1 = 0.}, @code{angle2 = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2001,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1753,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4316,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3692,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L25,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L23,t19.py}, @url{@value{GITLAB-PREFIX}/demos/api/closest_point.py#L7,closest_point.py})
@end table

@item gmsh/model/occ/addEllipseArc
Add an ellipse arc in the OpenCASCADE CAD representation, between the two points
@code{startTag} and @code{endTag}, and with center @code{centerTag} and major
axis point @code{majorTag}. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Return the tag of the ellipse
arc. Note that OpenCASCADE does not allow creating ellipse arcs with the major
radius smaller than the minor radius.

@table @asis
@item Input:
@code{startTag}, @code{centerTag}, @code{majorTag}, @code{endTag}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2017,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1768,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4343,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3713,Julia}
@end table

@item gmsh/model/occ/addEllipse
Add an ellipse of center (@code{x}, @code{y}, @code{z}) and radii @code{r1} and
@code{r2} along the x- and y-axes, respectively, in the OpenCASCADE CAD
representation. If @code{tag} is positive, set the tag explicitly; otherwise a
new tag is selected automatically. If @code{angle1} and @code{angle2} are
specified, create an ellipse arc between the two angles. Return the tag of the
ellipse. Note that OpenCASCADE does not allow creating ellipses with the major
radius (along the x-axis) smaller than or equal to the minor radius (along the
y-axis): rotate the shape or use @code{addCircle} in such cases.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{r1}, @code{r2}, @code{tag = -1}, @code{angle1 = 0.}, @code{angle2 = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2033,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1783,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4369,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3736,Julia}
@end table

@item gmsh/model/occ/addSpline
Add a spline (C2 b-spline) curve in the OpenCASCADE CAD representation, going
through the points @code{pointTags}. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Create a periodic
curve if the first and last points are the same. Return the tag of the spline
curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2049,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1798,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4400,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3755,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L71,t19.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/spline.cpp#L12,spline.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L62,t19.py}, @url{@value{GITLAB-PREFIX}/demos/api/spline.py#L12,spline.py})
@end table

@item gmsh/model/occ/addBSpline
Add a b-spline curve of degree @code{degree} in the OpenCASCADE CAD
representation, with @code{pointTags} control points. If @code{weights},
@code{knots} or @code{multiplicities} are not provided, default parameters are
computed automatically. If @code{tag} is positive, set the tag explicitly;
otherwise a new tag is selected automatically. Create a periodic curve if the
first and last points are the same. Return the tag of the b-spline curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}, @code{degree = 3}, @code{weights = []}, @code{knots = []}, @code{multiplicities = []}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2060,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1808,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4423,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3776,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/spline.cpp#L13,spline.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_filling.py#L18,bspline_filling.py}, @url{@value{GITLAB-PREFIX}/demos/api/spline.py#L13,spline.py})
@end table

@item gmsh/model/occ/addBezier
Add a Bezier curve in the OpenCASCADE CAD representation, with @code{pointTags}
control points. If @code{tag} is positive, set the tag explicitly; otherwise a
new tag is selected automatically. Return the tag of the Bezier curve.

@table @asis
@item Input:
@code{pointTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2072,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1819,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4454,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3794,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/spline.cpp#L14,spline.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/spline.py#L14,spline.py})
@end table

@item gmsh/model/occ/addWire
Add a wire (open or closed) in the OpenCASCADE CAD representation, formed by the
curves @code{curveTags}. Note that an OpenCASCADE wire can be made of curves
that share geometrically identical (but topologically different) points. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the wire.

@table @asis
@item Input:
@code{curveTags}, @code{tag = -1}, @code{checkClosed = False}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2082,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1828,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4475,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3814,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L74,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L65,t19.py}, @url{@value{GITLAB-PREFIX}/demos/api/bspline_filling.py#L36,bspline_filling.py})
@end table

@item gmsh/model/occ/addCurveLoop
Add a curve loop (a closed wire) in the OpenCASCADE CAD representation, formed
by the curves @code{curveTags}. @code{curveTags} should contain tags of curves
forming a closed loop. Note that an OpenCASCADE curve loop can be made of curves
that share geometrically identical (but topologically different) points. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the curve loop.

@table @asis
@item Input:
@code{curveTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2094,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1839,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4499,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3835,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L26,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L24,t19.py})
@end table

@item gmsh/model/occ/addRectangle
Add a rectangle in the OpenCASCADE CAD representation, with lower left corner at
(@code{x}, @code{y}, @code{z}) and upper right corner at (@code{x} + @code{dx},
@code{y} + @code{dy}, @code{z}). If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Round the corners if
@code{roundedRadius} is nonzero. Return the tag of the rectangle.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{tag = -1}, @code{roundedRadius = 0.}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2104,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1848,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4523,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3855,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t17.cpp#L28,t17.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L67,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L40,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L228,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L13,edges.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t17.py#L27,t17.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L56,t20.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L32,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L76,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack3d.py#L9,crack3d.py}, ...)
@end table

@item gmsh/model/occ/addDisk
Add a disk in the OpenCASCADE CAD representation, with center (@code{xc},
@code{yc}, @code{zc}) and radius @code{rx} along the x-axis and @code{ry} along
the y-axis. If @code{tag} is positive, set the tag explicitly; otherwise a new
tag is selected automatically. Return the tag of the disk.

@table @asis
@item Input:
@code{xc}, @code{yc}, @code{zc}, @code{rx}, @code{ry}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2118,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1861,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4550,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3874,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L77,t19.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L15,edges.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L68,t19.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L37,poisson.py})
@end table

@item gmsh/model/occ/addPlaneSurface
Add a plane surface in the OpenCASCADE CAD representation, defined by one or
more curve loops (or closed wires) @code{wireTags}. The first curve loop defines
the exterior contour; additional curve loop define holes. If @code{tag} is
positive, set the tag explicitly; otherwise a new tag is selected automatically.
Return the tag of the surface.

@table @asis
@item Input:
@code{wireTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2132,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1874,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4575,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3894,Julia}
@end table

@item gmsh/model/occ/addSurfaceFilling
Add a surface in the OpenCASCADE CAD representation, filling the curve loop
@code{wireTag}. If @code{tag} is positive, set the tag explicitly; otherwise a
new tag is selected automatically. Return the tag of the surface. If
@code{pointTags} are provided, force the surface to pass through the given
points.

@table @asis
@item Input:
@code{wireTag}, @code{tag = -1}, @code{pointTags = []}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2142,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1883,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4598,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3913,Julia}
@end table

@item gmsh/model/occ/addBSplineFilling
Add a BSpline surface in the OpenCASCADE CAD representation, filling the curve
loop @code{wireTag}. The curve loop should be made of 2, 3 or 4 BSpline curves.
The optional @code{type} argument specifies the type of filling: "Stretch"
creates the flattest patch, "Curved" (the default) creates the most rounded
patch, and "Coons" creates a rounded patch with less depth than "Curved". If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTag}, @code{tag = -1}, @code{type = ""}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2155,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1895,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4622,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3935,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_filling.py#L39,bspline_filling.py})
@end table

@item gmsh/model/occ/addBezierFilling
Add a Bezier surface in the OpenCASCADE CAD representation, filling the curve
loop @code{wireTag}. The curve loop should be made of 2, 3 or 4 Bezier curves.
The optional @code{type} argument specifies the type of filling: "Stretch"
creates the flattest patch, "Curved" (the default) creates the most rounded
patch, and "Coons" creates a rounded patch with less depth than "Curved". If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the surface.

@table @asis
@item Input:
@code{wireTag}, @code{tag = -1}, @code{type = ""}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2168,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1907,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4647,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3957,Julia}
@end table

@item gmsh/model/occ/addBSplineSurface
Add a b-spline surface of degree @code{degreeU} x @code{degreeV} in the
OpenCASCADE CAD representation, with @code{pointTags} control points given as a
single vector [Pu1v1, ... Pu@code{numPointsU}v1, Pu1v2, ...]. If @code{weights},
@code{knotsU}, @code{knotsV}, @code{multiplicitiesU} or @code{multiplicitiesV}
are not provided, default parameters are computed automatically. If @code{tag}
is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the b-spline surface.

@table @asis
@item Input:
@code{pointTags}, @code{numPointsU}, @code{tag = -1}, @code{degreeU = 3}, @code{degreeV = 3}, @code{weights = []}, @code{knotsU = []}, @code{knotsV = []}, @code{multiplicitiesU = []}, @code{multiplicitiesV = []}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2181,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1919,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4672,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3978,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L55,bspline_bezier_patches.py})
@end table

@item gmsh/model/occ/addBezierSurface
Add a Bezier surface in the OpenCASCADE CAD representation, with
@code{pointTags} control points given as a single vector [Pu1v1, ...
Pu@code{numPointsU}v1, Pu1v2, ...]. If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Return the tag of the
b-spline surface.

@table @asis
@item Input:
@code{pointTags}, @code{numPointsU}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2199,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1936,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4710,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L3997,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L52,bspline_bezier_patches.py})
@end table

@item gmsh/model/occ/addSurfaceLoop
Add a surface loop (a closed shell) in the OpenCASCADE CAD representation,
formed by @code{surfaceTags}.  If @code{tag} is positive, set the tag
explicitly; otherwise a new tag is selected automatically. Return the tag of the
surface loop. Setting @code{sewing} allows to build a shell made of surfaces
that share geometrically identical (but topologically different) curves.

@table @asis
@item Input:
@code{surfaceTags}, @code{tag = -1}, @code{sewing = False}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2210,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1946,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4734,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4017,Julia}
@end table

@item gmsh/model/occ/addVolume
Add a volume (a region) in the OpenCASCADE CAD representation, defined by one or
more surface loops @code{shellTags}. The first surface loop defines the exterior
boundary; additional surface loop define holes. If @code{tag} is positive, set
the tag explicitly; otherwise a new tag is selected automatically. Return the
tag of the volume.

@table @asis
@item Input:
@code{shellTags}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2221,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1956,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4758,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4037,Julia}
@end table

@item gmsh/model/occ/addSphere
Add a sphere of center (@code{xc}, @code{yc}, @code{zc}) and radius @code{r} in
the OpenCASCADE CAD representation. The optional @code{angle1} and @code{angle2}
arguments define the polar angle opening (from -Pi/2 to Pi/2). The optional
@code{angle3} argument defines the azimuthal opening (from 0 to 2*Pi). If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. Return the tag of the sphere.

@table @asis
@item Input:
@code{xc}, @code{yc}, @code{zc}, @code{radius}, @code{tag = -1}, @code{angle1 = -pi/2}, @code{angle2 = pi/2}, @code{angle3 = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2232,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1966,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4781,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4058,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L53,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L61,t18.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L22,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L15,faces.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L21,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L47,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L59,t18.py}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L21,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L20,gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/normals.py#L6,normals.py}, ...)
@end table

@item gmsh/model/occ/addBox
Add a parallelepipedic box in the OpenCASCADE CAD representation, defined by a
point (@code{x}, @code{y}, @code{z}) and the extents along the x-, y- and
z-axes. If @code{tag} is positive, set the tag explicitly; otherwise a new tag
is selected automatically. Return the tag of the box.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{dz}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2247,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1980,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4810,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4077,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L31,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L27,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L60,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L21,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/faces.cpp#L13,faces.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L28,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L26,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L56,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L20,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L7,copy_mesh.py}, ...)
@end table

@item gmsh/model/occ/addCylinder
Add a cylinder in the OpenCASCADE CAD representation, defined by the center
(@code{x}, @code{y}, @code{z}) of its first circular face, the 3 components
(@code{dx}, @code{dy}, @code{dz}) of the vector defining its axis and its radius
@code{r}. The optional @code{angle} argument defines the angular opening (from 0
to 2*Pi). If @code{tag} is positive, set the tag explicitly; otherwise a new tag
is selected automatically. Return the tag of the cylinder.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{dz}, @code{r}, @code{tag = -1}, @code{angle = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2263,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L1995,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4836,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4098,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L24,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L23,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L23,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L22,gui.py})
@end table

@item gmsh/model/occ/addCone
Add a cone in the OpenCASCADE CAD representation, defined by the center
(@code{x}, @code{y}, @code{z}) of its first circular face, the 3 components of
the vector (@code{dx}, @code{dy}, @code{dz}) defining its axis and the two radii
@code{r1} and @code{r2} of the faces (these radii can be zero). If @code{tag} is
positive, set the tag explicitly; otherwise a new tag is selected automatically.
@code{angle} defines the optional angular opening (from 0 to 2*Pi). Return the
tag of the cone.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{dz}, @code{r1}, @code{r2}, @code{tag = -1}, @code{angle = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2281,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2012,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4866,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4119,Julia}
@end table

@item gmsh/model/occ/addWedge
Add a right angular wedge in the OpenCASCADE CAD representation, defined by the
right-angle point (@code{x}, @code{y}, @code{z}) and the 3 extends along the x-,
y- and z-axes (@code{dx}, @code{dy}, @code{dz}). If @code{tag} is positive, set
the tag explicitly; otherwise a new tag is selected automatically. The optional
argument @code{ltx} defines the top extent along the x-axis. Return the tag of
the wedge.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{dx}, @code{dy}, @code{dz}, @code{tag = -1}, @code{ltx = 0.}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2300,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2030,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4897,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4139,Julia}
@end table

@item gmsh/model/occ/addTorus
Add a torus in the OpenCASCADE CAD representation, defined by its center
(@code{x}, @code{y}, @code{z}) and its 2 radii @code{r} and @code{r2}. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically. The optional argument @code{angle} defines the angular opening
(from 0 to 2*Pi). Return the tag of the wedge.

@table @asis
@item Input:
@code{x}, @code{y}, @code{z}, @code{r1}, @code{r2}, @code{tag = -1}, @code{angle = 2*pi}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2316,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2045,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4926,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4159,Julia}
@end table

@item gmsh/model/occ/addThruSections
Add a volume (if the optional argument @code{makeSolid} is set) or surfaces in
the OpenCASCADE CAD representation, defined through the open or closed wires
@code{wireTags}. If @code{tag} is positive, set the tag explicitly; otherwise a
new tag is selected automatically. The new entities are returned in
@code{outDimTags}. If the optional argument @code{makeRuled} is set, the
surfaces created on the boundary are forced to be ruled surfaces. If
@code{maxDegree} is positive, set the maximal degree of resulting surface.

@table @asis
@item Input:
@code{wireTags}, @code{tag = -1}, @code{makeSolid = True}, @code{makeRuled = False}, @code{maxDegree = -1}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2333,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2061,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4953,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4181,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L32,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L29,t19.py})
@end table

@item gmsh/model/occ/addThickSolid
Add a hollowed volume in the OpenCASCADE CAD representation, built from an
initial volume @code{volumeTag} and a set of faces from this volume
@code{excludeSurfaceTags}, which are to be removed. The remaining faces of the
volume become the walls of the hollowed solid, with thickness @code{offset}. If
@code{tag} is positive, set the tag explicitly; otherwise a new tag is selected
automatically.

@table @asis
@item Input:
@code{volumeTag}, @code{excludeSurfaceTags}, @code{offset}, @code{tag = -1}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2348,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2075,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L4983,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4205,Julia}
@end table

@item gmsh/model/occ/extrude
Extrude the entities @code{dimTags} in the OpenCASCADE CAD representation, using
a translation along (@code{dx}, @code{dy}, @code{dz}). Return extruded entities
in @code{outDimTags}. If @code{numElements} is not empty, also extrude the mesh:
the entries in @code{numElements} give the number of elements in each layer. If
@code{height} is not empty, it provides the (cumulative) height of the different
layers, normalized to 1.

@table @asis
@item Input:
@code{dimTags}, @code{dx}, @code{dy}, @code{dz}, @code{numElements = []}, @code{heights = []}, @code{recombine = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2362,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2088,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5011,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4230,Julia}
@end table

@item gmsh/model/occ/revolve
Extrude the entities @code{dimTags} in the OpenCASCADE CAD representation, using
a rotation of @code{angle} radians around the axis of revolution defined by the
point (@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay},
@code{az}). Return extruded entities in @code{outDimTags}. If @code{numElements}
is not empty, also extrude the mesh: the entries in @code{numElements} give the
number of elements in each layer. If @code{height} is not empty, it provides the
(cumulative) height of the different layers, normalized to 1. When the mesh is
extruded the angle should be strictly smaller than 2*Pi.

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{ax}, @code{ay}, @code{az}, @code{angle}, @code{numElements = []}, @code{heights = []}, @code{recombine = False}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2381,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2106,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5044,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4259,Julia}
@end table

@item gmsh/model/occ/addPipe
Add a pipe in the OpenCASCADE CAD representation, by extruding the entities
@code{dimTags} along the wire @code{wireTag}. Return the pipe in
@code{outDimTags}.

@table @asis
@item Input:
@code{dimTags}, @code{wireTag}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2399,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2122,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5083,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4282,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L81,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L72,t19.py})
@end table

@item gmsh/model/occ/fillet
Fillet the volumes @code{volumeTags} on the curves @code{curveTags} with radii
@code{radii}. The @code{radii} vector can either contain a single radius, as
many radii as @code{curveTags}, or twice as many as @code{curveTags} (in which
case different radii are provided for the begin and end points of the curves).
Return the filleted entities in @code{outDimTags}. Remove the original volume if
@code{removeVolume} is set.

@table @asis
@item Input:
@code{volumeTags}, @code{curveTags}, @code{radii}, @code{removeVolume = True}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2411,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2133,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5105,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4308,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L55,t19.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L47,t19.py})
@end table

@item gmsh/model/occ/chamfer
Chamfer the volumes @code{volumeTags} on the curves @code{curveTags} with
distances @code{distances} measured on surfaces @code{surfaceTags}. The
@code{distances} vector can either contain a single distance, as many distances
as @code{curveTags} and @code{surfaceTags}, or twice as many as @code{curveTags}
and @code{surfaceTags} (in which case the first in each pair is measured on the
corresponding surface in @code{surfaceTags}, the other on the other adjacent
surface). Return the chamfered entities in @code{outDimTags}. Remove the
original volume if @code{removeVolume} is set.

@table @asis
@item Input:
@code{volumeTags}, @code{curveTags}, @code{surfaceTags}, @code{distances}, @code{removeVolume = True}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2427,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2148,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5135,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4334,Julia}
@end table

@item gmsh/model/occ/fuse
Compute the boolean union (the fusion) of the entities @code{objectDimTags} and
@code{toolDimTags} in the OpenCASCADE CAD representation. Return the resulting
entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag
explicitly (only valid if the boolean operation results in a single entity).
Remove the object if @code{removeObject} is set. Remove the tool if
@code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags}, @code{toolDimTags}, @code{tag = -1}, @code{removeObject = True}, @code{removeTool = True}
@item Output:
@code{outDimTags}, @code{outDimTagsMap}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2442,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2162,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5169,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4358,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L27,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L26,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L26,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L25,gui.py})
@end table

@item gmsh/model/occ/intersect
Compute the boolean intersection (the common parts) of the entities
@code{objectDimTags} and @code{toolDimTags} in the OpenCASCADE CAD
representation. Return the resulting entities in @code{outDimTags}. If
@code{tag} is positive, try to set the tag explicitly (only valid if the boolean
operation results in a single entity). Remove the object if @code{removeObject}
is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags}, @code{toolDimTags}, @code{tag = -1}, @code{removeObject = True}, @code{removeTool = True}
@item Output:
@code{outDimTags}, @code{outDimTagsMap}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2458,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2177,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5203,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4398,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L23,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L22,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L22,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L21,gui.py})
@end table

@item gmsh/model/occ/cut
Compute the boolean difference between the entities @code{objectDimTags} and
@code{toolDimTags} in the OpenCASCADE CAD representation. Return the resulting
entities in @code{outDimTags}. If @code{tag} is positive, try to set the tag
explicitly (only valid if the boolean operation results in a single entity).
Remove the object if @code{removeObject} is set. Remove the tool if
@code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags}, @code{toolDimTags}, @code{tag = -1}, @code{removeObject = True}, @code{removeTool = True}
@item Output:
@code{outDimTags}, @code{outDimTagsMap}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2474,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2192,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5237,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4437,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L41,t16.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.cpp#L28,boolean.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L27,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L32,t16.py}, @url{@value{GITLAB-PREFIX}/demos/api/boolean.py#L27,boolean.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L26,gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/spherical_surf.py#L13,spherical_surf.py})
@end table

@item gmsh/model/occ/fragment
Compute the boolean fragments (general fuse) of the entities
@code{objectDimTags} and @code{toolDimTags} in the OpenCASCADE CAD
representation. Return the resulting entities in @code{outDimTags}. If
@code{tag} is positive, try to set the tag explicitly (only valid if the boolean
operation results in a single entity). Remove the object if @code{removeObject}
is set. Remove the tool if @code{removeTool} is set.

@table @asis
@item Input:
@code{objectDimTags}, @code{toolDimTags}, @code{tag = -1}, @code{removeObject = True}, @code{removeTool = True}
@item Output:
@code{outDimTags}, @code{outDimTagsMap}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2490,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2207,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5271,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4476,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L61,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L75,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L90,t20.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L44,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/edges.cpp#L20,edges.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L54,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L70,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L72,t20.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L34,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L70,bspline_bezier_patches.py}, ...)
@end table

@item gmsh/model/occ/translate
Translate the entities @code{dimTags} in the OpenCASCADE CAD representation
along (@code{dx}, @code{dy}, @code{dz}).

@table @asis
@item Input:
@code{dimTags}, @code{dx}, @code{dy}, @code{dz}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2502,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2218,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5305,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4510,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L47,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L77,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L44,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L64,t20.py})
@end table

@item gmsh/model/occ/rotate
Rotate the entities @code{dimTags} in the OpenCASCADE CAD representation by
@code{angle} radians around the axis of revolution defined by the point
(@code{x}, @code{y}, @code{z}) and the direction (@code{ax}, @code{ay},
@code{az}).

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{ax}, @code{ay}, @code{az}, @code{angle}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2512,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2227,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5324,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4528,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L78,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L69,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L69,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L58,t20.py})
@end table

@item gmsh/model/occ/dilate
Scale the entities @code{dimTags} in the OpenCASCADE CAD representation by
factors @code{a}, @code{b} and @code{c} along the three coordinate axes; use
(@code{x}, @code{y}, @code{z}) as the center of the homothetic transformation.

@table @asis
@item Input:
@code{dimTags}, @code{x}, @code{y}, @code{z}, @code{a}, @code{b}, @code{c}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2526,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2240,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5348,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4546,Julia}
@end table

@item gmsh/model/occ/mirror
Mirror the entities @code{dimTags} in the OpenCASCADE CAD representation, with
respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z +
@code{d} = 0.

@table @asis
@item Input:
@code{dimTags}, @code{a}, @code{b}, @code{c}, @code{d}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2538,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2251,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5371,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4563,Julia}
@end table

@item gmsh/model/occ/symmetrize
Mirror the entities @code{dimTags} in the OpenCASCADE CAD representation, with
respect to the plane of equation @code{a} * x + @code{b} * y + @code{c} * z +
@code{d} = 0. (This is a synonym for @code{mirror}, which will be deprecated in
a future release.)

@table @asis
@item Input:
@code{dimTags}, @code{a}, @code{b}, @code{c}, @code{d}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2550,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2262,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5391,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4581,Julia}
@end table

@item gmsh/model/occ/affineTransform
Apply a general affine transformation matrix @code{a} (16 entries of a 4x4
matrix, by row; only the 12 first can be provided for convenience) to the
entities @code{dimTags} in the OpenCASCADE CAD representation.

@table @asis
@item Input:
@code{dimTags}, @code{a}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2561,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2272,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5413,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4599,Julia}
@end table

@item gmsh/model/occ/copy
Copy the entities @code{dimTags} in the OpenCASCADE CAD representation; the new
entities are returned in @code{outDimTags}.

@table @asis
@item Input:
@code{dimTags}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2568,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2278,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5432,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4618,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L46,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L82,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L43,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L68,t20.py})
@end table

@item gmsh/model/occ/remove
Remove the entities @code{dimTags} in the OpenCASCADE CAD representation. If
@code{recursive} is true, remove all the entities on their boundaries, down to
dimension 0.

@table @asis
@item Input:
@code{dimTags}, @code{recursive = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2576,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2285,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5453,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4640,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L85,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L97,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L76,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L78,t20.py})
@end table

@item gmsh/model/occ/removeAllDuplicates
Remove all duplicate entities in the OpenCASCADE CAD representation (different
entities at the same geometrical location) after intersecting (using boolean
fragments) all highest dimensional entities.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2584,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2292,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5471,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4658,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L75,bspline_bezier_patches.py})
@end table

@item gmsh/model/occ/healShapes
Apply various healing procedures to the entities @code{dimTags} (or to all the
entities in the model if @code{dimTags} is empty) in the OpenCASCADE CAD
representation. Return the healed entities in @code{outDimTags}. Available
healing options are listed in the Gmsh reference manual.

@table @asis
@item Input:
@code{dimTags = []}, @code{tolerance = 1e-8}, @code{fixDegenerated = True}, @code{fixSmallEdges = True}, @code{fixSmallFaces = True}, @code{sewFaces = True}, @code{makeSolids = True}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2592,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2298,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5486,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4677,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L65,bspline_bezier_patches.py}, @url{@value{GITLAB-PREFIX}/demos/api/heal.py#L11,heal.py})
@end table

@item gmsh/model/occ/importShapes
Import BREP, STEP or IGES shapes from the file @code{fileName} in the
OpenCASCADE CAD representation. The imported entities are returned in
@code{outDimTags}. If the optional argument @code{highestDimOnly} is set, only
import the highest dimensional entities in the file. The optional argument
@code{format} can be used to force the format of the file (currently "brep",
"step" or "iges").

@table @asis
@item Input:
@code{fileName}, @code{highestDimOnly = True}, @code{format = ""}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2609,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2314,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5515,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4703,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L28,t20.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L24,t20.py})
@end table

@item gmsh/model/occ/importShapesNativePointer
Imports an OpenCASCADE @code{shape} by providing a pointer to a native
OpenCASCADE @code{TopoDS_Shape} object (passed as a pointer to void). The
imported entities are returned in @code{outDimTags}. If the optional argument
@code{highestDimOnly} is set, only import the highest dimensional entities in
@code{shape}. For C and C++ only. Warning: this function is unsafe, as providing
an invalid pointer will lead to undefined behavior.

@table @asis
@item Input:
@code{shape}, @code{highestDimOnly = True}
@item Output:
@code{outDimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2622,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2326,C}
@end table

@item gmsh/model/occ/getEntities
Get all the OpenCASCADE entities. If @code{dim} is >= 0, return only the
entities of the specified dimension (e.g. points if @code{dim} == 0). The
entities are returned as a vector of (dim, tag) integer pairs.

@table @asis
@item Input:
@code{dim = -1}
@item Output:
@code{dimTags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2631,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2334,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5541,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4725,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/bspline_bezier_patches.py#L70,bspline_bezier_patches.py})
@end table

@item gmsh/model/occ/getEntitiesInBoundingBox
Get the OpenCASCADE entities in the bounding box defined by the two points
(@code{xmin}, @code{ymin}, @code{zmin}) and (@code{xmax}, @code{ymax},
@code{zmax}). If @code{dim} is >= 0, return only the entities of the specified
dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{xmin}, @code{ymin}, @code{zmin}, @code{xmax}, @code{ymax}, @code{zmax}, @code{dim = -1}
@item Output:
@code{tags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2640,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2342,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5562,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4747,Julia}
@end table

@item gmsh/model/occ/getBoundingBox
Get the bounding box (@code{xmin}, @code{ymin}, @code{zmin}), (@code{xmax},
@code{ymax}, @code{zmax}) of the OpenCASCADE entity of dimension @code{dim} and
tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{xmin}, @code{ymin}, @code{zmin}, @code{xmax}, @code{ymax}, @code{zmax}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2653,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2354,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5590,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4768,Julia}
@end table

@item gmsh/model/occ/getMass
Get the mass of the OpenCASCADE entity of dimension @code{dim} and tag
@code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{mass}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2665,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2365,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5627,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4790,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/step_assembly.py#L19,step_assembly.py}, @url{@value{GITLAB-PREFIX}/demos/api/volume.py#L9,volume.py})
@end table

@item gmsh/model/occ/getCenterOfMass
Get the center of mass of the OpenCASCADE entity of dimension @code{dim} and tag
@code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{x}, @code{y}, @code{z}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2673,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2372,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5647,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4808,Julia}
@end table

@item gmsh/model/occ/getMatrixOfInertia
Get the matrix of inertia (by row) of the OpenCASCADE entity of dimension
@code{dim} and tag @code{tag}.

@table @asis
@item Input:
@code{dim}, @code{tag}
@item Output:
@code{mat}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2683,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2381,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5675,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4828,Julia}
@end table

@item gmsh/model/occ/getMaxTag
Get the maximum tag of entities of dimension @code{dim} in the OpenCASCADE CAD
representation.

@table @asis
@item Input:
@code{dim}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2691,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2388,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5696,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4848,Julia}
@end table

@item gmsh/model/occ/setMaxTag
Set the maximum tag @code{maxTag} for entities of dimension @code{dim} in the
OpenCASCADE CAD representation.

@table @asis
@item Input:
@code{dim}, @code{maxTag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2697,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2393,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5714,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4863,Julia}
@end table

@item gmsh/model/occ/synchronize
Synchronize the OpenCASCADE CAD representation with the current Gmsh model. This
can be called at any time, but since it involves a non trivial amount of
processing, the number of synchronization points should normally be minimized.
Without synchronization the entities in the OpenCASCADE CAD representation are
not available to any function outside of the OpenCASCADE CAD kernel functions.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2708,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2403,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5730,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4881,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L84,t16.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t17.cpp#L29,t17.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t18.cpp#L28,t18.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t19.cpp#L33,t19.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t20.cpp#L43,t20.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L67,t16.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t17.py#L28,t17.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t18.py#L27,t18.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t19.py#L30,t19.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t20.py#L34,t20.py}, ...)
@end table

@end ftable

@node Namespace gmsh/model/occ/mesh, Namespace gmsh/view, Namespace gmsh/model/occ, Gmsh API
@section Namespace @code{gmsh/model/occ/mesh}: OpenCASCADE CAD kernel meshing constraints

@ftable @code
@item gmsh/model/occ/mesh/setSize
Set a mesh size constraint on the entities @code{dimTags} in the OpenCASCADE CAD
representation. Currently only entities of dimension 0 (points) are handled.

@table @asis
@item Input:
@code{dimTags}, @code{size}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2717,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2408,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5754,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4905,Julia}
@end table

@end ftable

@node Namespace gmsh/view, Namespace gmsh/plugin, Namespace gmsh/model/occ/mesh, Gmsh API
@section Namespace @code{gmsh/view}: post-processing view functions

@ftable @code
@item gmsh/view/add
Add a new post-processing view, with name @code{name}. If @code{tag} is positive
use it (and remove the view with that tag if it already exists), otherwise
associate a new tag. Return the view tag.

@table @asis
@item Input:
@code{name}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2733,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2415,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5778,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4940,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L111,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L28,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L33,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L245,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L17,plugin.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L118,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L25,x3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L31,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L89,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L38,copy_mesh.py}, ...)
@end table

@item gmsh/view/remove
Remove the view with tag @code{tag}.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2739,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2420,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5798,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4954,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L37,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L28,plugin.py})
@end table

@item gmsh/view/getIndex
Get the index of the view with tag @code{tag} in the list of currently loaded
views. This dynamic index (it can change when views are removed) is used to
access view options.

@table @asis
@item Input:
@code{tag}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2746,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2426,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5812,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4972,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L91,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L81,t8.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L81,x3.py})
@end table

@item gmsh/view/getTags
Get the tags of all views.

@table @asis
@item Input:
-
@item Output:
@code{tags}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2751,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2430,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5831,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L4988,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L41,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L78,t8.py}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L31,plugin.py})
@end table

@item gmsh/view/addModelData
Add model-based post-processing data to the view with tag @code{tag}.
@code{modelName} identifies the model the data is attached to. @code{dataType}
specifies the type of data, currently either "NodeData", "ElementData" or
"ElementNodeData". @code{step} specifies the identifier (>= 0) of the data in a
sequence. @code{tags} gives the tags of the nodes or elements in the mesh to
which the data is associated. @code{data} is a vector of the same length as
@code{tags}: each entry is the vector of double precision numbers representing
the data associated with the corresponding tag. The optional @code{time}
argument associate a time value with the data. @code{numComponents} gives the
number of data components (1 for scalar data, 3 for vector data, etc.) per
entity; if negative, it is automatically inferred (when possible) from the input
data. @code{partition} allows to specify data in several sub-sets.

@table @asis
@item Input:
@code{tag}, @code{step}, @code{modelName}, @code{dataType}, @code{tags}, @code{data}, @code{time = 0.}, @code{numComponents = -1}, @code{partition = 0}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2767,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2445,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5849,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5016,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L247,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L18,plugin.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/view.cpp#L20,view.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L90,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L16,plugin.py}, @url{@value{GITLAB-PREFIX}/demos/api/poisson.py#L229,poisson.py}, @url{@value{GITLAB-PREFIX}/demos/api/view.py#L19,view.py})
@end table

@item gmsh/view/addHomogeneousModelData
Add homogeneous model-based post-processing data to the view with tag
@code{tag}. The arguments have the same meaning as in @code{addModelData},
except that @code{data} is supposed to be homogeneous and is thus flattened in a
single vector. For data types that can lead to different data sizes per tag
(like "ElementNodeData"), the data should be padded.

@table @asis
@item Input:
@code{tag}, @code{step}, @code{modelName}, @code{dataType}, @code{tags}, @code{data}, @code{time = 0.}, @code{numComponents = -1}, @code{partition = 0}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2784,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2461,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5884,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5035,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L46,x4.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L33,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/copy_mesh.py#L40,copy_mesh.py})
@end table

@item gmsh/view/getModelData
Get model-based post-processing data from the view with tag @code{tag} at step
@code{step}. Return the @code{data} associated to the nodes or the elements with
tags @code{tags}, as well as the @code{dataType} and the number of components
@code{numComponents}.

@table @asis
@item Input:
@code{tag}, @code{step}
@item Output:
@code{dataType}, @code{tags}, @code{data}, @code{time}, @code{numComponents}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2800,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2476,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5912,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5053,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.cpp#L27,get_data_perf.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L27,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.py#L20,get_data_perf.py}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L20,plugin.py})
@end table

@item gmsh/view/getHomogeneousModelData
Get homogeneous model-based post-processing data from the view with tag
@code{tag} at step @code{step}. The arguments have the same meaning as in
@code{getModelData}, except that @code{data} is returned flattened in a single
vector, with the appropriate padding if necessary.

@table @asis
@item Input:
@code{tag}, @code{step}
@item Output:
@code{dataType}, @code{tags}, @code{data}, @code{time}, @code{numComponents}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2814,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2489,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5948,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5085,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.cpp#L33,get_data_perf.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.py#L25,get_data_perf.py})
@end table

@item gmsh/view/addListData
Add list-based post-processing data to the view with tag @code{tag}. List-based
datasets are independent from any model and any mesh. @code{dataType} identifies
the data by concatenating the field type ("S" for scalar, "V" for vector, "T"
for tensor) and the element type ("P" for point, "L" for line, "T" for triangle,
"S" for tetrahedron, "I" for prism, "H" for hexaHedron, "Y" for pyramid). For
example @code{dataType} should be "ST" for a scalar field on triangles.
@code{numEle} gives the number of elements in the data. @code{data} contains the
data for the @code{numEle} elements, concatenated, with node coordinates
followed by values per node, repeated for each step: [e1x1, ..., e1xn, e1y1,
..., e1yn, e1z1, ..., e1zn, e1v1..., e1vN, e2x1, ...].

@table @asis
@item Input:
@code{tag}, @code{dataType}, @code{numEle}, @code{data}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2834,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2508,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L5984,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5118,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L56,x3.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/viewlist.cpp#L24,viewlist.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L47,x3.py}, @url{@value{GITLAB-PREFIX}/demos/api/normals.py#L42,normals.py}, @url{@value{GITLAB-PREFIX}/demos/api/view_combine.py#L18,view_combine.py}, @url{@value{GITLAB-PREFIX}/demos/api/viewlist.py#L19,viewlist.py})
@end table

@item gmsh/view/getListData
Get list-based post-processing data from the view with tag @code{tag}. Return
the types @code{dataTypes}, the number of elements @code{numElements} for each
data type and the @code{data} for each data type.

@table @asis
@item Input:
@code{tag}
@item Output:
@code{dataType}, @code{numElements}, @code{data}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2844,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2517,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6011,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5136,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L47,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L35,plugin.py}, @url{@value{GITLAB-PREFIX}/demos/api/volume.py#L19,volume.py})
@end table

@item gmsh/view/addListDataString
Add a string to a list-based post-processing view with tag @code{tag}. If
@code{coord} contains 3 coordinates the string is positioned in the 3D model
space ("3D string"); if it contains 2 coordinates it is positioned in the 2D
graphics viewport ("2D string"). @code{data} contains one or more (for multistep
views) strings. @code{style} contains key-value pairs of styling parameters,
concatenated. Available keys are "Font" (possible values: "Times-Roman", "Times-
Bold", "Times-Italic", "Times-BoldItalic", "Helvetica", "Helvetica-Bold",
"Helvetica-Oblique", "Helvetica-BoldOblique", "Courier", "Courier-Bold",
"Courier-Oblique", "Courier-BoldOblique", "Symbol", "ZapfDingbats", "Screen"),
"FontSize" and "Align" (possible values: "Left" or "BottomLeft", "Center" or
"BottomCenter", "Right" or "BottomRight", "TopLeft", "TopCenter", "TopRight",
"CenterLeft", "CenterCenter", "CenterRight").

@table @asis
@item Input:
@code{tag}, @code{coord}, @code{data}, @code{style = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2863,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2536,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6039,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5174,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L115,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L82,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L122,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L72,x3.py})
@end table

@item gmsh/view/getListDataStrings
Get list-based post-processing data strings (2D strings if @code{dim} = 2, 3D
strings if @code{dim} = 3) from the view with tag @code{tag}. Return the
coordinates in @code{coord}, the strings in @code{data} and the styles in
@code{style}.

@table @asis
@item Input:
@code{tag}, @code{dim}
@item Output:
@code{coord}, @code{data}, @code{style}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2873,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2545,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6071,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5192,Julia}
@end table

@item gmsh/view/setInterpolationMatrices
Set interpolation matrices for the element family @code{type} ("Line",
"Triangle", "Quadrangle", "Tetrahedron", "Hexahedron", "Prism", "Pyramid") in
the view @code{tag}. The approximation of the values over an element is written
as a linear combination of @code{d} basis functions f_i(u, v, w) = sum_(j = 0,
..., @code{d} - 1) @code{coef}[i][j] u^@code{exp}[j][0] v^@code{exp}[j][1]
w^@code{exp}[j][2], i = 0, ..., @code{d}-1, with u, v, w the coordinates in the
reference element. The @code{coef} matrix (of size @code{d} x @code{d}) and the
@code{exp} matrix (of size @code{d} x 3) are stored as vectors, by row. If
@code{dGeo} is positive, use @code{coefGeo} and @code{expGeo} to define the
interpolation of the x, y, z coordinates of the element in terms of the u, v, w
coordinates, in exactly the same way. If @code{d} < 0, remove the interpolation
matrices.

@table @asis
@item Input:
@code{tag}, @code{type}, @code{d}, @code{coef}, @code{exp}, @code{dGeo = 0}, @code{coefGeo = []}, @code{expGeo = []}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2892,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2563,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6100,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5226,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L130,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L113,x3.py})
@end table

@item gmsh/view/addAlias
Add a post-processing view as an @code{alias} of the reference view with tag
@code{refTag}. If @code{copyOptions} is set, copy the options of the reference
view. If @code{tag} is positive use it (and remove the view with that tag if it
already exists), otherwise associate a new tag. Return the view tag.

@table @asis
@item Input:
@code{refTag}, @code{copyOptions = False}, @code{tag = -1}
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2907,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2577,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6135,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5245,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/view_combine.py#L27,view_combine.py})
@end table

@item gmsh/view/copyOptions
Copy the options from the view with tag @code{refTag} to the view with tag
@code{tag}.

@table @asis
@item Input:
@code{refTag}, @code{tag}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2914,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2584,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6157,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5259,Julia}
@end table

@item gmsh/view/combine
Combine elements (if @code{what} == "elements") or steps (if @code{what} ==
"steps") of all views (@code{how} == "all"), all visible views (@code{how} ==
"visible") or all views having the same name (@code{how} == "name"). Remove
original views if @code{remove} is set.

@table @asis
@item Input:
@code{what}, @code{how}, @code{remove = True}, @code{copyOptions = True}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2923,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2592,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6173,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5276,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/view_combine.py#L23,view_combine.py})
@end table

@item gmsh/view/probe
Probe the view @code{tag} for its @code{value} at point (@code{x}, @code{y},
@code{z}). Return only the value at step @code{step} is @code{step} is positive.
Return only values with @code{numComp} if @code{numComp} is positive. Return the
gradient of the @code{value} if @code{gradient} is set. Probes with a
geometrical tolerance (in the reference unit cube) of @code{tolerance} if
@code{tolerance} is not zero. Return the result from the element described by
its coordinates if @code{xElementCoord}, @code{yElementCoord} and
@code{zElementCoord} are provided.

@table @asis
@item Input:
@code{tag}, @code{x}, @code{y}, @code{z}, @code{step = -1}, @code{numComp = -1}, @code{gradient = False}, @code{tolerance = 0.}, @code{xElemCoord = []}, @code{yElemCoord = []}, @code{zElemCoord = []}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2937,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2605,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6193,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5298,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L102,x3.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L89,x3.py})
@end table

@item gmsh/view/write
Write the view to a file @code{fileName}. The export format is determined by the
file extension. Append to the file if @code{append} is set.

@table @asis
@item Input:
@code{tag}, @code{fileName}, @code{append = False}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2954,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2621,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6231,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5316,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/x3.cpp#L108,x3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/x4.cpp#L90,x4.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.cpp#L248,adapt_mesh.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L43,plugin.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/view.cpp#L24,view.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/x3.py#L92,x3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/x4.py#L81,x4.py}, @url{@value{GITLAB-PREFIX}/demos/api/adapt_mesh.py#L92,adapt_mesh.py}, @url{@value{GITLAB-PREFIX}/demos/api/normals.py#L43,normals.py}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.py#L33,plugin.py}, ...)
@end table

@item gmsh/view/setVisibilityPerWindow
Set the global visibility of the view @code{tag} per window to @code{value},
where @code{windowIndex} identifies the window in the window list.

@table @asis
@item Input:
@code{tag}, @code{value}, @code{windowIndex = 0}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2962,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2628,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6248,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5331,Julia}
@end table

@end ftable

@node Namespace gmsh/plugin, Namespace gmsh/graphics, Namespace gmsh/view, Gmsh API
@section Namespace @code{gmsh/plugin}: plugin functions

@ftable @code
@item gmsh/plugin/setNumber
Set the numerical option @code{option} to the value @code{value} for plugin
@code{name}.

@table @asis
@item Input:
@code{name}, @code{option}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2973,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2634,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6271,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5356,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t9.cpp#L38,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L95,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.cpp#L17,get_data_perf.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L30,partition.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L33,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t9.py#L30,t9.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L80,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack3d.py#L29,crack3d.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack.py#L33,crack.py}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.py#L15,get_data_perf.py}, ...)
@end table

@item gmsh/plugin/setString
Set the string option @code{option} to the value @code{value} for plugin
@code{name}.

@table @asis
@item Input:
@code{name}, @code{option}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2980,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2640,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6287,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5370,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t9.cpp#L54,t9.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t9.py#L46,t9.py})
@end table

@item gmsh/plugin/run
Run the plugin @code{name}.

@table @asis
@item Input:
@code{name}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2987,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2646,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6303,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5384,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t9.cpp#L40,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t21.cpp#L98,t21.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.cpp#L18,get_data_perf.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/partition.cpp#L31,partition.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/plugin.cpp#L34,plugin.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t9.py#L32,t9.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t21.py#L83,t21.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack3d.py#L31,crack3d.py}, @url{@value{GITLAB-PREFIX}/demos/api/crack.py#L34,crack.py}, @url{@value{GITLAB-PREFIX}/demos/api/get_data_perf.py#L16,get_data_perf.py}, ...)
@end table

@end ftable

@node Namespace gmsh/graphics, Namespace gmsh/fltk, Namespace gmsh/plugin, Gmsh API
@section Namespace @code{gmsh/graphics}: graphics functions

@ftable @code
@item gmsh/graphics/draw
Draw all the OpenGL scenes.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L2996,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2650,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6323,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5409,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L150,t8.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L178,t8.py}, @url{@value{GITLAB-PREFIX}/demos/api/split_window.py#L41,split_window.py})
@end table

@end ftable

@node Namespace gmsh/fltk, Namespace gmsh/onelab, Namespace gmsh/graphics, Gmsh API
@section Namespace @code{gmsh/fltk}: FLTK graphical user interface functions

@ftable @code
@item gmsh/fltk/initialize
Create the FLTK graphical user interface. Can only be called in the main thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3006,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2654,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6342,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5434,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L76,t8.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L72,custom_gui.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/gui.cpp#L10,gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t8.py#L71,t8.py}, @url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L75,custom_gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/gui.py#L9,gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/split_window.py#L13,split_window.py})
@end table

@item gmsh/fltk/wait
Wait at most @code{time} seconds for user interface events and return. If
@code{time} < 0, wait indefinitely. First automatically create the user
interface if it has not yet been initialized. Can only be called in the main
thread.

@table @asis
@item Input:
@code{time = -1.}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3013,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2659,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6356,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5450,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L79,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L83,custom_gui.py})
@end table

@item gmsh/fltk/update
Update the user interface (potentially creating new widgets and windows). First
automatically create the user interface if it has not yet been initialized. Can
only be called in the main thread: use @code{awake("update")} to trigger an
update of the user interface from another thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3021,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2666,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6372,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5467,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L90,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L94,custom_gui.py})
@end table

@item gmsh/fltk/awake
Awake the main user interface thread and process pending events, and optionally
perform an action (currently the only @code{action} allowed is "update").

@table @asis
@item Input:
@code{action = ""}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3028,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2671,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6388,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5482,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L39,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L66,custom_gui.py})
@end table

@item gmsh/fltk/lock
Block the current thread until it can safely modify the user interface.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3033,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2675,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6404,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5496,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L32,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L59,custom_gui.py})
@end table

@item gmsh/fltk/unlock
Release the lock that was set using lock.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3038,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2678,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6417,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5510,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L34,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L61,custom_gui.py})
@end table

@item gmsh/fltk/run
Run the event loop of the graphical user interface, i.e. repeatedly call
@code{wait()}. First automatically create the user interface if it has not yet
been initialized. Can only be called in the main thread.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3045,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2683,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6430,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5526,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t1.cpp#L153,t1.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t2.cpp#L170,t2.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t3.cpp#L98,t3.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t4.cpp#L171,t4.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t5.cpp#L228,t5.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t1.py#L146,t1.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t2.py#L163,t2.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t3.py#L94,t3.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t4.py#L178,t4.py}, @url{@value{GITLAB-PREFIX}/tutorial/python/t5.py#L223,t5.py}, ...)
@end table

@item gmsh/fltk/isAvailable
Check if the user interface is available (e.g. to detect if it has been closed).

@table @asis
@item Input:
-
@item Output:
-
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3051,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2687,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6445,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5542,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L76,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L79,custom_gui.py})
@end table

@item gmsh/fltk/selectEntities
Select entities in the user interface. If @code{dim} is >= 0, return only the
entities of the specified dimension (e.g. points if @code{dim} == 0).

@table @asis
@item Input:
@code{dim = -1}
@item Output:
@code{dimTags}
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3057,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2691,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6462,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5559,Julia}
@end table

@item gmsh/fltk/selectElements
Select elements in the user interface.

@table @asis
@item Input:
-
@item Output:
@code{elementTags}
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3063,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2696,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6484,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5579,Julia}
@end table

@item gmsh/fltk/selectViews
Select views in the user interface.

@table @asis
@item Input:
-
@item Output:
@code{viewTags}
@item Return:
integer value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3068,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2700,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6504,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5598,Julia}
@end table

@item gmsh/fltk/splitCurrentWindow
Split the current window horizontally (if @code{how} = "h") or vertically (if
@code{how} = "v"), using ratio @code{ratio}. If @code{how} = "u", restore a
single window.

@table @asis
@item Input:
@code{how = "v"}, @code{ratio = 0.5}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3074,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2705,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6524,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5616,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/split_window.py#L18,split_window.py})
@end table

@item gmsh/fltk/setCurrentWindow
Set the current window by speficying its index (starting at 0) in the list of
all windows. When new windows are created by splits, new windows are appended at
the end of the list.

@table @asis
@item Input:
@code{windowIndex = 0}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3082,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2712,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6540,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5632,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/split_window.py#L33,split_window.py})
@end table

@end ftable

@node Namespace gmsh/onelab, Namespace gmsh/logger, Namespace gmsh/fltk, Gmsh API
@section Namespace @code{gmsh/onelab}: ONELAB server functions

@ftable @code
@item gmsh/onelab/set
Set one or more parameters in the ONELAB database, encoded in @code{format}.

@table @asis
@item Input:
@code{data}, @code{format = "json"}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3091,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2716,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6562,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5657,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L69,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L33,custom_gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_test.py#L10,onelab_test.py})
@end table

@item gmsh/onelab/get
Get all the parameters (or a single one if @code{name} is specified) from the
ONELAB database, encoded in @code{format}.

@table @asis
@item Input:
@code{name = ""}, @code{format = "json"}
@item Output:
@code{data}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3098,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2722,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6577,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5674,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/onelab_data.cpp#L19,onelab_data.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/onelab_data.py#L15,onelab_data.py}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_test.py#L36,onelab_test.py})
@end table

@item gmsh/onelab/setNumber
Set the value of the number parameter @code{name} in the ONELAB database. Create
the parameter if it does not exist; update the value if the parameter exists.

@table @asis
@item Input:
@code{name}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3107,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2730,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6598,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5691,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L43,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L67,custom_gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_test.py#L41,onelab_test.py})
@end table

@item gmsh/onelab/setString
Set the value of the string parameter @code{name} in the ONELAB database. Create
the parameter if it does not exist; update the value if the parameter exists.

@table @asis
@item Input:
@code{name}, @code{value}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3115,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2737,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6616,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5706,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L29,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L56,custom_gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/onelab_test.py#L42,onelab_test.py})
@end table

@item gmsh/onelab/getNumber
Get the value of the number parameter @code{name} from the ONELAB database.
Return an empty vector if the parameter does not exist.

@table @asis
@item Input:
@code{name}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3122,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2743,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6634,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5723,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L16,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L41,custom_gui.py})
@end table

@item gmsh/onelab/getString
Get the value of the string parameter @code{name} from the ONELAB database.
Return an empty vector if the parameter does not exist.

@table @asis
@item Input:
@code{name}
@item Output:
@code{value}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3129,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2749,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6654,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5743,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L84,custom_gui.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L87,custom_gui.py})
@end table

@item gmsh/onelab/clear
Clear the ONELAB database, or remove a single parameter if @code{name} is given.

@table @asis
@item Input:
@code{name = ""}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3135,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2754,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6674,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5761,Julia}
@item Examples:
Python (@url{@value{GITLAB-PREFIX}/demos/api/onelab_test.py#L45,onelab_test.py})
@end table

@item gmsh/onelab/run
Run a ONELAB client. If @code{name} is provided, create a new ONELAB client with
name @code{name} and executes @code{command}. If not, try to run a client that
might be linked to the processed input files.

@table @asis
@item Input:
@code{name = ""}, @code{command = ""}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3142,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2760,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6688,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5777,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/onelab_data.cpp#L16,onelab_data.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/onelab_data.py#L13,onelab_data.py})
@end table

@end ftable

@node Namespace gmsh/logger, , Namespace gmsh/onelab, Gmsh API
@section Namespace @code{gmsh/logger}: information logging functions

@ftable @code
@item gmsh/logger/write
Write a @code{message}. @code{level} can be "info", "warning" or "error".

@table @asis
@item Input:
@code{message}, @code{level = "info"}
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3152,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2765,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6711,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5802,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t7.cpp#L23,t7.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t8.cpp#L41,t8.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t9.cpp#L31,t9.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t13.cpp#L24,t13.cpp}, @url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L34,t16.cpp}, ...), Python (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.py#L60,custom_gui.py}, @url{@value{GITLAB-PREFIX}/demos/api/terrain_stl.py#L26,terrain_stl.py})
@end table

@item gmsh/logger/start
Start logging messages.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3158,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2770,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6726,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5816,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L27,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L25,t16.py})
@end table

@item gmsh/logger/get
Get logged messages.

@table @asis
@item Input:
-
@item Output:
@code{log}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3163,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2773,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6739,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5832,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L137,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L117,t16.py})
@end table

@item gmsh/logger/stop
Stop logging messages.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3168,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2777,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6757,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5850,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/tutorial/c++/t16.cpp#L139,t16.cpp}), Python (@url{@value{GITLAB-PREFIX}/tutorial/python/t16.py#L119,t16.py})
@end table

@item gmsh/logger/getWallTime
Return wall clock time.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
floating point value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3173,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2780,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6770,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5866,Julia}
@item Examples:
C++ (@url{@value{GITLAB-PREFIX}/demos/api/custom_gui.cpp#L37,custom_gui.cpp}, @url{@value{GITLAB-PREFIX}/demos/api/import_perf.cpp#L10,import_perf.cpp}), Python (@url{@value{GITLAB-PREFIX}/demos/api/import_perf.py#L8,import_perf.py})
@end table

@item gmsh/logger/getCpuTime
Return CPU time.

@table @asis
@item Input:
-
@item Output:
-
@item Return:
floating point value
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3178,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2783,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6787,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5882,Julia}
@end table

@item gmsh/logger/getLastError
Return last error message, if any.

@table @asis
@item Input:
-
@item Output:
@code{error}
@item Return:
-
@item Language-specific definition:
@url{@value{GITLAB-PREFIX}/api/gmsh.h#L3183,C++}, @url{@value{GITLAB-PREFIX}/api/gmshc.h#L2786,C}, @url{@value{GITLAB-PREFIX}/api/gmsh.py#L6804,Python}, @url{@value{GITLAB-PREFIX}/api/gmsh.jl#L5898,Julia}
@end table

@end ftable

