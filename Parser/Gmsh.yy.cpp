#line 2 "Gmsh.yy.cpp"

#line 4 "Gmsh.yy.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer gmsh_yy_create_buffer
#define yy_delete_buffer gmsh_yy_delete_buffer
#define yy_flex_debug gmsh_yy_flex_debug
#define yy_init_buffer gmsh_yy_init_buffer
#define yy_flush_buffer gmsh_yy_flush_buffer
#define yy_load_buffer_state gmsh_yy_load_buffer_state
#define yy_switch_to_buffer gmsh_yy_switch_to_buffer
#define yyin gmsh_yyin
#define yyleng gmsh_yyleng
#define yylex gmsh_yylex
#define yylineno gmsh_yylineno
#define yyout gmsh_yyout
#define yyrestart gmsh_yyrestart
#define yytext gmsh_yytext
#define yywrap gmsh_yywrap
#define yyalloc gmsh_yyalloc
#define yyrealloc gmsh_yyrealloc
#define yyfree gmsh_yyfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gmsh_yyrestart(gmsh_yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t gmsh_yyleng;

extern FILE *gmsh_yyin, *gmsh_yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up gmsh_yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gmsh_yyrestart()), so that the user can continue scanning by
	 * just pointing gmsh_yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when gmsh_yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t gmsh_yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow gmsh_yywrap()'s to do buffer switches
 * instead of setting up a fresh gmsh_yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void gmsh_yyrestart (FILE *input_file  );
void gmsh_yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE gmsh_yy_create_buffer (FILE *file,int size  );
void gmsh_yy_delete_buffer (YY_BUFFER_STATE b  );
void gmsh_yy_flush_buffer (YY_BUFFER_STATE b  );
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void gmsh_yypop_buffer_state (void );

static void gmsh_yyensure_buffer_stack (void );
static void gmsh_yy_load_buffer_state (void );
static void gmsh_yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER gmsh_yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE gmsh_yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE gmsh_yy_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *gmsh_yyalloc (yy_size_t  );
void *gmsh_yyrealloc (void *,yy_size_t  );
void gmsh_yyfree (void *  );

#define yy_new_buffer gmsh_yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gmsh_yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *gmsh_yyin = (FILE *) 0, *gmsh_yyout = (FILE *) 0;

typedef int yy_state_type;

extern int gmsh_yylineno;

int gmsh_yylineno = 1;

extern char *gmsh_yytext;
#define yytext_ptr gmsh_yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up gmsh_yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	gmsh_yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 274
#define YY_END_OF_BUFFER 275
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1419] =
    {   0,
        0,    0,  275,  273,    1,    1,  273,    5,  273,    6,
      273,  273,  273,  273,  273,  268,   21,    2,  273,   16,
      273,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  273,   29,   25,   19,   26,
       17,   27,   18,    0,  270,    3,    4,   20,  269,  268,
        0,   23,   33,   30,   28,   31,   32,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  145,  146,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  183,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  245,  246,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
       24,   22,    0,  269,    0,    0,  271,  272,   35,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,   53,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,   84,   86,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  116,  272,  272,
      272,  272,  272,  272,  272,  272,  126,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  156,  272,  272,  272,  272,  165,
      272,  272,  169,  272,  171,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      209,  272,  272,  272,  272,  272,  221,  272,  272,  272,

      272,  272,  272,  230,  272,  272,  272,  272,  248,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,    0,  270,    0,    0,
      269,  272,  272,   37,  272,  272,  272,  272,  272,  272,
      272,   47,   48,  272,  272,  272,  272,  272,  272,   65,
      272,  272,   68,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,   81,  272,  272,   85,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  102,  103,
      272,  108,  272,  272,  272,  272,  272,  115,  272,  118,
      272,  272,  272,  122,  272,  272,  125,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  140,  141,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  153,  154,  272,
      272,  272,  272,  272,  164,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  192,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  220,  222,  272,  272,
      272,  272,  272,  229,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  247,  249,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  267,   10,   15,    9,    8,  272,   12,   14,
        0,  269,   34,  272,  272,  272,   40,  272,  272,  272,
      272,   49,  272,   51,  272,   54,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,   77,  272,
      272,  272,  272,  272,  272,   92,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  111,  112,  272,  272,
      272,  119,  272,  272,  272,  124,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  143,  272,  272,  148,
      272,  272,  272,  272,  272,  157,  272,  272,  272,  272,
      163,  272,  272,  272,  272,  272,  272,  272,  175,  272,

      178,  272,  272,  272,  272,  184,  272,  186,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  207,  208,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  223,  272,  272,  272,  227,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  254,  255,  272,
      272,  272,  272,  272,  263,  272,  272,  266,   11,  272,
       13,  272,  272,   39,  272,   43,   42,   44,   45,  272,
       52,  272,  272,  272,  272,  272,  272,  272,   72,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,   98,   99,  272,  272,  272,  272,  109,
      110,  272,  114,  272,  272,  121,  272,  272,  272,  272,
      272,  132,  272,  272,  272,  272,  272,  272,  272,  272,
      149,  150,  272,  272,  272,  272,  272,  272,  272,  166,
      272,  272,  170,  272,  272,  272,  272,  272,  180,  272,
      272,  185,  272,  188,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  203,  272,  206,  272,  272,  272,  272,
      272,  272,  272,  213,  218,  272,  272,  225,  226,  272,
      231,  272,  233,  272,  235,  272,  272,  272,  239,  272,
      241,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  261,  272,  264,  272,    7,  272,  272,  272,
       46,   50,  272,  272,  272,  272,  272,   70,  272,  272,
      272,  272,  272,  272,   79,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  101,  104,  272,
      272,  272,  272,  117,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  189,  272,
      272,  272,  272,  272,  272,  272,  272,  205,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  228,  272,  234,

      272,  272,  272,  272,  242,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  265,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,   66,  272,
      272,  272,  272,   74,  272,  272,  272,   80,  272,  272,
      272,  272,  272,  272,   93,  272,  272,  272,  272,  272,
      105,  272,  107,  272,  272,  272,  127,  272,  272,  272,
      272,  272,  272,  272,  138,  272,  142,  272,  272,  151,
      152,  272,  158,  272,  161,  162,  272,  272,  272,  272,
      174,  272,  272,  272,  181,  182,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  224,  272,  272,  272,
      272,  272,  243,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,   38,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
       75,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  106,  113,  272,  272,  272,  272,
      272,  131,  133,  135,  136,  272,  272,  147,  272,  159,
      272,  272,  272,  272,  272,  177,  272,  272,  272,  272,
      272,  194,  195,  196,  272,  272,  272,  272,  272,  272,
      272,  272,  214,  215,  272,  217,  272,  232,  236,  272,

      272,  272,  244,  250,  272,  272,  272,  272,  272,  272,
      259,  272,  262,  272,  272,  272,  272,   57,  272,  272,
      272,  272,  272,  272,  272,   67,  272,  272,  272,   76,
       78,  272,  272,  272,  272,   89,  272,  272,  272,  272,
      272,  272,  120,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  172,  272,  272,  179,  272,
      272,  272,  272,  272,  198,  272,  272,  272,  272,  272,
      211,  212,  272,  272,  272,  238,  272,  272,  252,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
       60,  272,  272,  272,   64,  272,  272,  272,   82,   83,

      272,  272,  272,  272,  272,  272,  272,   97,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  160,  272,
      272,  272,  272,  187,  272,  272,  272,  272,  272,  272,
      272,  204,  272,  272,  272,  237,  272,  272,  272,  256,
      272,  258,  272,   36,  272,  272,  272,  272,  272,  272,
      272,   63,   69,  272,  272,  272,  272,  272,  272,  272,
       95,   96,  100,  272,  272,  272,  272,  134,  272,  272,
      272,  155,  272,  272,  173,  176,  272,  272,  272,  272,
      199,  272,  200,  272,  216,  272,  240,  272,  253,  272,
      272,  272,  272,   56,  272,  272,  272,  272,  272,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  167,  272,  272,  272,  272,  197,  272,  272,
      272,  219,  272,  257,  272,  272,  272,  272,  272,  272,
       62,   71,  272,   87,   88,  272,  272,   94,  272,  272,
      272,  272,  137,  272,  272,  272,  272,  272,  193,  272,
      272,  210,  251,  272,  272,  272,  272,  272,  272,  272,
      272,   91,  123,  272,  272,  272,  272,  272,  272,  190,
      272,  272,  272,  272,   41,   55,  272,   59,  272,   73,
       90,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      260,   58,  272,  272,  272,  272,  272,  272,  272,  191,

      272,  201,  272,  128,  129,  130,  139,  272,  272,  272,
       61,  272,  272,  272,  144,  168,  202,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    6,    7,    1,
        1,    8,    9,    1,   10,   11,   12,   13,   14,   15,
       16,   17,   17,   17,   17,   17,   17,   18,   19,   20,
       21,   22,    1,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   46,   46,
        1,    1,    1,    1,   47,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   46,   57,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,   73,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[74] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    1,    1,    1,
        1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    1
    } ;

static yyconst flex_int16_t yy_base[1420] =
    {   0,
        0,    0, 1548, 1549, 1549, 1549, 1526, 1549, 1540, 1549,
     1524,   65,   66,   64,   76,   78, 1526, 1549,   62, 1522,
       77,   51,   62,   70,   55,   69,   87,  103,   86,  108,
        0, 1482,  104,  111,  125,   46,  123, 1474,  122,  178,
      187,  104, 1479,  134, 1487, 1465, 1549, 1549, 1549, 1549,
     1549, 1549, 1549, 1526,  194, 1549, 1549, 1549,  200,  242,
      251, 1549, 1549, 1549, 1549, 1549, 1549,    0,   47, 1475,
     1487, 1481, 1477, 1470, 1481, 1474, 1481, 1466,   24, 1466,
      124,   92,  120, 1478, 1461, 1476,  219, 1456, 1470, 1457,
     1462,  142,  140, 1471,  154, 1467, 1453, 1466,  220, 1466,

      231, 1453, 1452, 1448, 1451, 1469,  140, 1444, 1457,  164,
     1445, 1464,    0, 1439, 1443, 1432,  164,  160,  193, 1471,
      222,  231, 1441, 1449, 1458, 1439, 1428, 1432, 1443, 1443,
     1429, 1428, 1420,    0,  183,   95, 1434, 1441, 1428,  245,
      233, 1429, 1450, 1437,   55,  227, 1424, 1427, 1421,  252,
     1417, 1416, 1415,  249,    0,    0, 1443, 1417,  173,  207,
      251, 1428,  263, 1413, 1418, 1415, 1408, 1420, 1406, 1400,
     1549, 1549,  311,  316,  325,  331,  336, 1404, 1406, 1401,
     1403, 1408, 1415, 1410,  329, 1401, 1400, 1401, 1392, 1401,
     1406, 1397, 1394,    0, 1395,  245, 1394, 1385,  259, 1400,

     1384, 1396,  136, 1386,  307, 1394, 1381, 1373, 1388,    0,
     1394,  291, 1385, 1384, 1387, 1386, 1389, 1400, 1399, 1377,
     1364, 1376, 1379,  198, 1369, 1371,  271,    0, 1364, 1362,
     1368,  305, 1374, 1384, 1362, 1371,    0, 1371, 1390, 1392,
      337, 1363, 1365, 1364, 1354, 1353, 1386, 1360, 1345, 1358,
     1355, 1356,  320, 1341,  271, 1354, 1358, 1340, 1338,    0,
     1341, 1346,    0, 1333,    0, 1347, 1363, 1348, 1338, 1343,
      310, 1338, 1328, 1332, 1337, 1330, 1341, 1328, 1336, 1335,
      313, 1329, 1323, 1316, 1318, 1314, 1328, 1331, 1318, 1325,
        0, 1318,  357, 1319, 1312, 1304, 1317, 1320, 1309, 1317,

     1312, 1311, 1300,  362, 1312, 1305, 1313, 1335, 1306, 1294,
     1293, 1308, 1290, 1308, 1288, 1306, 1293, 1300, 1288, 1298,
     1289, 1281, 1287, 1292, 1293,  351,  407,  417,  426,  431,
      436, 1278, 1285,    0, 1276, 1281, 1275, 1279, 1277, 1281,
     1288,    0, 1320, 1278, 1277, 1280, 1274, 1278, 1278,    0,
     1268, 1260,    0, 1274, 1272, 1276, 1265, 1257, 1285, 1256,
     1260, 1254, 1261, 1255,    0, 1264, 1277,    0, 1247, 1260,
     1259, 1250, 1249, 1248, 1241, 1240, 1257, 1256,    0,    0,
     1241, 1271, 1240, 1247, 1235, 1242, 1231,    0, 1229,    0,
     1244, 1267, 1241,    0, 1240, 1227,    0, 1224, 1242, 1228,

     1227, 1225, 1218, 1218, 1235, 1255,    0,    0, 1223, 1214,
     1239, 1214, 1212, 1212, 1209, 1216, 1211,    0, 1244, 1258,
     1208, 1205,  326, 1207,    0, 1203,  353, 1208,  342, 1204,
     1199, 1215, 1198, 1202, 1200, 1198, 1202, 1205, 1200, 1189,
     1190, 1187,  344,    0, 1193, 1203, 1186, 1189, 1198, 1188,
     1190, 1181, 1180, 1177, 1191, 1190, 1188, 1184, 1190, 1189,
     1169, 1187, 1168, 1185, 1172, 1179,    0,    0, 1178, 1163,
     1164,  331, 1167,    0,  406, 1170, 1173, 1160, 1171, 1155,
     1161, 1170, 1171, 1166, 1182,    0,    0, 1182, 1192, 1157,
     1172, 1141, 1146, 1152, 1144, 1155, 1140, 1142, 1151, 1145,

     1147, 1150,    0,    0,    0, 1143,    0, 1148, 1141,    0,
      442,  453,    0, 1131, 1162, 1144, 1150, 1143, 1128, 1132,
     1131,    0, 1130,    0, 1125,    0, 1140, 1131, 1138, 1127,
     1120, 1131, 1132, 1129, 1124, 1131, 1126, 1116, 1134, 1115,
     1107, 1117, 1110, 1119, 1110,    0, 1118, 1116, 1115, 1114,
     1113, 1105, 1104,  323, 1109, 1097,    0,    0, 1109, 1094,
     1107,    0, 1087, 1090, 1097,    0, 1098,  376, 1087, 1084,
     1087, 1091, 1085, 1090, 1077, 1085,    0, 1107, 1079,    0,
     1078, 1087, 1076, 1092, 1075,    0, 1090, 1112, 1088, 1079,
        0, 1063, 1075, 1076, 1070, 1064, 1068, 1077,    0, 1078,

        0, 1074, 1059, 1073, 1073,    0, 1062,    0, 1080, 1067,
     1055, 1062, 1068, 1056, 1050, 1062, 1065, 1063, 1059, 1050,
     1044, 1056,    0,    0, 1073, 1058, 1055, 1034, 1044, 1038,
     1037, 1046, 1045, 1070,    0, 1042, 1044, 1043,    0, 1028,
     1027, 1031, 1029, 1030, 1029, 1036,  402, 1038, 1032, 1019,
     1034, 1017, 1021, 1029, 1014, 1038, 1026,    0,    0, 1042,
      354, 1020, 1023, 1049,    0, 1021, 1012,    0,    0, 1017,
        0, 1004, 1017,    0, 1012,    0,    0,    0, 1052, 1014,
        0, 1005, 1004,  999, 1004, 1024,  996,  993,    0, 1005,
      998,  996,  997, 1006, 1001,  992,  991,  984,  396,   19,

      202,  437,  209,    0,    0,  241,  270,  419,  304,    0,
        0,  319,    0,  325,  349,    0,  358,  356,  451,  403,
      371,    0,  378,  388,  407,  405,  424,  423,  442,  429,
        0,    0,  431,  434,  424,  436,  439,  428,  417,    0,
      436,  419,    0,  428,  452,  442,  472,  430,    0,  441,
      450,    0,  437,    0,  444,  451,  468,  449,  448,  470,
      440,  455,  448,    0,  457,    0,  462,  451,  447,  472,
      466,  450,  461,    0,    0,  454,  467,    0,    0,  467,
        0,  465,    0,  471,    0,  470,  477,  469,    0,  486,
        0,  477,  466,  480,  464,  467,  473,  485,  484,  498,

      490,  479,    0,  492,    0,  487,    0,  490,  478,  478,
        0,    0,  521,  491,  477,  510,  498,    0,  501,  484,
      504,  507,  497,  510,    0,  509,  515,  509,  514,  506,
      542,  505,  510,  505,  507,  526,  534,    0,    0,  511,
      521,  528,  531,    0,  515,  515,  522,  551,  548,  543,
      520,  535,  536,  529,  538,  541,  521,  559,  544,  529,
      544,  538,  546,  534,  543,  549,  541,  551,  537,  539,
      548,  557,  541,  545,  560,  553,  557,  590,    0,  566,
      555,  558,  549,  566,  567,  556,  555,  587,  558,  570,
      564,  579,  576,  573,  570,  570,  568,    0,  583,    0,

      578,  569,  588,  576,    0,  568,  588,  589,  578,  585,
      578,  586,  579,  587,  582,  597,  586,    0,  614,  598,
      599,  594,  600,  593,  598,  607,  602,  639,    0,  603,
      630,  602,  626,    0,  616,  615,  612,    0,  605,  611,
      612,  612,  619,  620,    0,  617,  619,  615,  614,  619,
        0,  631,    0,  623,  618,  629,    0,  649,  650,  663,
      618,  639,  627,  638,    0,  626,    0,  671,  629,    0,
        0,  668,    0,  645,    0,    0,  634,  671,  650,  637,
        0,  636,  643,  648,    0,    0,  653,  655,  646,  642,
      657,  658,  659,  647,  678,  679,  680,  664,  651,  666,

      655,  666,  657,  656,  669,  665,    0,  673,  656,  671,
      678,  693,    0,  672,  673,  676,  677,  678,  674,  688,
      681,  686,  714,  688,  693,    0,  705,  688,  678,  692,
      698,  683,  683,  700,  695,  691,  694,  706,  699,  689,
        0,  686,  706,  707,  700,  702,  701,  699,  706,  700,
      717,  711,  716,  721,    0,    0,  705,  703,  732,  733,
      744,    0,  734,    0,  732,  711,  736,    0,  723,  749,
      725,  718,  717,  728,  729,    0,  736,  723,  737,  753,
      738,  756,    0,    0,  737,  741,  742,  743,  731,  763,
      747,  728,    0,    0,  744,    0,  773,    0,    0,  734,

      751,  756,    0,    0,  756,  755,  746,  744,  758,  744,
        0,  750,    0,  746,  752,  763,  757,    0,  764,  764,
      767,  768,  755,  761,  753,    0,  759,  760,  762,    0,
        0,  762,  763,  777,  772,  779,  780,  767,  782,  775,
      785,  787,    0,  786,  792,  793,  794,  776,  795,  796,
      814,  788,  787,  782,  788,    0,  790,  790,    0,  800,
      809,  802,  791,  804,    0,  792,  793,  794,  805,  813,
        0,    0,  801,  807,  812,    0,  806,  799,    0,  807,
      797,  827,  818,  811,  817,  807,  810,  814,  824,  819,
        0,  815,  824,  821,    0,  817,  817,  831,    0,    0,

      819,  825,  837,  852,  841,  826,  837,    0,  840,  856,
      851,  852,  853,  834,  841,  851,  864,  850,    0,  848,
      845,  851,  846,    0,  855,  839,  861,  845,  856,  857,
      858,    0,  843,  855,  858,    0,  865,  852,  854,    0,
      856,    0,  856,    0,  866,  871,  864,  861,  874,  862,
      867,    0,    0,  873,  882,  867,  878,  867,  886,  875,
        0,    0,    0,  888,  910,  911,  912,    0,  873,  883,
      906,    0,  884,  920,    0,    0,  881,  902,  889,  893,
        0,  922,    0,  898,    0,  899,    0,  900,    0,  897,
      888,  894,  896,    0,  905,  899,  908,  901,  912,  913,

      893,  894,  905,  908,  902,  903,  931,  932,  933,  922,
      923,  929,    0,  916,  912,  927,  915,    0,  923,  921,
      919,    0,  919,    0,  937,  926,  937,  928,  923,  940,
        0,    0,  939,    0,    0,  928,  941,    0,  939,  954,
      955,  956,    0,  962,  958,  933,  936,  938,    0,  951,
      953,    0,    0,  945,  941,  955,  958,  944,  944,  946,
      941,    0,    0,  982,  983,  984,  968,  992,  958,    0,
      953,  961,  969,  956,    0,    0,  971,    0,  968,    0,
        0,  988,  989,  990,  969,  999,  979,  966,  980,  968,
        0,    0,  973,  999, 1000, 1001,  986, 1012,  992,    0,

      981,    0,  982,    0,    0,    0,    0, 1008,  980,  979,
        0, 1019,  976,  983,    0,    0,    0, 1549, 1047
    } ;

static yyconst flex_int16_t yy_def[1420] =
    {   0,
     1418,    1, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1418, 1418, 1418, 1418,
     1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,

     1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
     1419, 1419, 1419, 1419, 1419, 1419, 1419,    0, 1418
    } ;

static yyconst flex_int16_t yy_nxt[1623] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   16,   16,   16,   16,   17,   18,   19,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   45,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   46,   50,   54,   52,   55,   55,   55,   55,
       55,   63,   64,   56,  831,   51,   53,   57,   59,  189,
       60,   60,   60,   60,   60,  190,   58,   66,   67,   69,

       70,   71,   78,   72,   61,  129,   92,  178,   73,  130,
       93,  179,   74,   79,   75,   76,   77,   82,   94,   80,
      293,   83,   81,  294,   84,   85,   95,   86,   96,   61,
       87,   88,   97,   89,  100,   98,   90,  106,   99,  125,
       91,  109,  101,  112,  102,  103,  110,  104,  120,  195,
      276,  116,  277,  105,  107,  117,  111,  196,  121,  118,
      113,  108,  122,  163,  119,  164,  123,  114,  165,  139,
      131,  124,  126,  140,  132,  197,  127,  133,  134,  198,
      135,  167,  141,  136,  192,  168,  137,  360,  142,  169,
      193,  128,  143,  194,  214,  215,  361,  217,  218,  216,

      240,  155,  156,  219,  220,  241,   55,   55,   55,   55,
       55,  222,  174,  174,  174,  174,  174,  157,  223,  253,
      173,  244,  245,  251,  254,  383,  175,  144,  384,  145,
      274,  252,  146,  147,  158,  148,  149,  310,  159,  150,
      151,  160,  311,  152,  153,  173,  255,  161,  154,  275,
      162,  175,   59,  832,   60,   60,   60,   60,   60,  176,
      176,  256,  312,  177,  177,  177,  177,  177,   61,  202,
      313,  258,  836,  203,  295,  227,  204,  205,  206,  207,
      208,  228,  231,  209,  420,  229,  259,  296,  232,  261,
      233,  260,  837,   61,  281,  262,  351,  282,  288,  289,

      234,  314,  283,  352,  284,  285,  300,  306,  307,  301,
      286,  421,  287,  318,  315,  302,  316,  355,  319,  327,
      327,  838,  356,  328,  328,  328,  328,  328,  174,  174,
      174,  174,  174,  330,  330,  387,  388,  331,  331,  331,
      331,  331,  329,  177,  177,  177,  177,  177,  177,  177,
      177,  177,  177,  339,  370,  363,  392,  434,  371,  842,
      417,  435,  393,  401,  402,  589,  590,  329,  364,  340,
      341,  418,  403,  445,  843,  593,  844,  404,  446,  447,
      405,  458,  596,  597,  459,  611,  475,  708,  709,  476,
      638,  460,  461,  594,  462,  477,  639,  463,  464,  478,

      504,  479,  480,  505,  845,  846,  800,  612,  506,  611,
      719,  801,  507,  720,  508,  509,  847,  481,  510,  328,
      328,  328,  328,  328,  829,  850,  851,  852,  482,  328,
      328,  328,  328,  328,  511,  511,  853,  830,  512,  512,
      512,  512,  512,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  641,  512,  512,  512,  512,  512,  787,
      642,  833,  854,  788,  643,  512,  512,  512,  512,  512,
      839,  855,  834,  848,  840,  856,  857,  835,  858,  841,
      859,  849,  860,  861,  862,  863,  864,  865,  866,  867,
      868,  869,  870,  871,  872,  874,  875,  876,  877,  878,

      879,  880,  882,  883,  884,  885,  886,  887,  888,  889,
      890,  873,  891,  892,  893,  894,  895,  896,  897,  898,
      899,  900,  901,  881,  902,  880,  903,  904,  905,  906,
      907,  908,  909,  910,  911,  912,  913,  915,  916,  917,
      918,  919,  920,  921,  928,  922,  923,  929,  924,  930,
      931,  925,  932,  914,  933,  934,  935,  936,  937,  938,
      913,  926,  939,  927,  940,  941,  942,  943,  945,  944,
      946,  947,  948,  949,  950,  951,  952,  953,  954,  955,
      956,  957,  958,  959,  960,  961,  962,  963,  964,  965,
      966,  967,  968,  969,  970,  971,  972,  973,  974,  975,

      976,  977,  978,  979,  980,  981,  982,  983,  984,  985,
      986,  987,  988,  990,  991,  992,  993,  994,  995,  996,
      997,  998,  999, 1000, 1001,  989, 1002, 1003, 1004, 1005,
     1006, 1007, 1008, 1009, 1010, 1011, 1012,  988, 1013, 1014,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023,  989,
     1024, 1025, 1026, 1027, 1028, 1030, 1031, 1033, 1034, 1032,
     1029, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043,
     1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053,
     1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063,
     1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,

     1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083,
     1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093,
     1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103,
     1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113,
     1114, 1115, 1116, 1118, 1119, 1120, 1117, 1121, 1122, 1123,
     1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133,
     1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143,
     1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153,
     1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163,
     1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173,

     1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183,
     1184, 1185, 1162, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202,
     1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212,
     1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222,
     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242,
     1243, 1244, 1245, 1246, 1247, 1248, 1225, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261,
     1262, 1263, 1241, 1264, 1265, 1266, 1267, 1268, 1269, 1270,

     1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290,
     1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1321,
     1322, 1323, 1324, 1325, 1326, 1327, 1328, 1320, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1316,
     1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349,
     1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369,

     1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
     1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407, 1408, 1409,
     1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417,   68,  828,
      827,  826,  825,  824,  823,  822,  821,  820,  819,  818,
      817,  816,  815,  814,  813,  812,  811,  810,  809,  808,
      807,  806,  805,  804,  803,  802,  799,  798,  797,  796,
      795,  794,  793,  792,  791,  790,  789,  786,  785,  784,
      783,  782,  781,  780,  779,  778,  777,  776,  775,  774,

      773,  772,  771,  770,  769,  768,  767,  766,  765,  764,
      763,  762,  761,  760,  759,  758,  757,  756,  755,  754,
      753,  752,  751,  750,  749,  748,  747,  746,  745,  744,
      743,  742,  741,  740,  739,  738,  737,  736,  735,  734,
      733,  732,  731,  730,  729,  728,  727,  726,  725,  724,
      723,  722,  721,  718,  717,  716,  715,  714,  713,  712,
      711,  710,  707,  706,  705,  704,  703,  702,  701,  700,
      699,  698,  697,  696,  695,  694,  693,  692,  691,  690,
      689,  688,  687,  686,  685,  684,  683,  682,  681,  680,
      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,

      669,  668,  667,  666,  665,  664,  663,  662,  661,  660,
      659,  658,  657,  656,  655,  654,  653,  652,  651,  650,
      649,  648,  647,  646,  645,  644,  640,  637,  636,  635,
      634,  633,  632,  631,  630,  629,  628,  627,  626,  625,
      624,  623,  622,  621,  620,  619,  618,  617,  616,  615,
      614,  613,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  599,  598,  595,  592,  591,  588,  587,
      586,  585,  584,  583,  582,  581,  580,  579,  578,  577,
      576,  575,  574,  573,  572,  571,  570,  569,  568,  567,
      566,  565,  564,  563,  562,  561,  560,  559,  558,  557,

      556,  555,  554,  553,  552,  551,  550,  549,  548,  547,
      546,  545,  544,  543,  542,  541,  540,  539,  538,  537,
      536,  535,  534,  533,  532,  531,  530,  529,  528,  527,
      526,  525,  524,  523,  522,  521,  520,  519,  518,  517,
      516,  515,  514,  513,  503,  502,  501,  500,  499,  498,
      497,  496,  495,  494,  493,  492,  491,  490,  489,  488,
      487,  486,  485,  484,  483,  474,  473,  472,  471,  470,
      469,  468,  467,  466,  465,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  444,  443,  442,  441,  440,
      439,  438,  437,  436,  433,  432,  431,  430,  429,  428,

      427,  426,  425,  424,  423,  422,  419,  416,  415,  414,
      413,  412,  411,  410,  409,  408,  407,  406,  400,  399,
      398,  397,  396,  395,  394,  391,  390,  389,  386,  385,
      382,  381,  380,  379,  378,  377,  376,  375,  374,  373,
      372,  369,  368,  367,  366,  365,  362,  359,  358,  357,
      354,  353,  350,  349,  348,  347,  346,  345,  344,  343,
      342,  338,  337,  336,  335,  334,  333,  332,  326,  325,
      324,  323,  322,  321,  320,  317,  309,  308,  305,  304,
      303,  299,  298,  297,  292,  291,  290,  280,  279,  278,
      273,  272,  271,  270,  269,  268,  267,  266,  265,  264,

      263,  257,  250,  249,  248,  247,  246,  243,  242,  239,
      238,  237,  236,  235,  230,  226,  225,  224,  221,  213,
      212,  211,  210,  201,  200,  199,  191,  188,  187,  186,
      185,  184,  183,  182,  181,  180,  172,  171,  170,  166,
      138,  115,   65,   62,   49,   48,   47, 1418,    3, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418
    } ;

static yyconst flex_int16_t yy_chk[1623] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,   12,   14,   13,   14,   14,   14,   14,
       14,   19,   19,   15,  700,   12,   13,   15,   16,   79,
       16,   16,   16,   16,   16,   79,   15,   21,   21,   22,

       22,   22,   23,   22,   16,   36,   25,   69,   22,   36,
       25,   69,   22,   23,   22,   22,   22,   24,   25,   23,
      145,   24,   23,  145,   24,   24,   26,   24,   26,   16,
       24,   24,   26,   24,   27,   26,   24,   28,   26,   35,
       24,   29,   27,   30,   27,   27,   29,   27,   34,   82,
      136,   33,  136,   27,   28,   33,   29,   82,   34,   33,
       30,   28,   34,   42,   33,   42,   34,   30,   42,   39,
       37,   34,   35,   39,   37,   83,   35,   37,   37,   83,
       37,   44,   39,   37,   81,   44,   37,  203,   39,   44,
       81,   35,   40,   81,   92,   92,  203,   93,   93,   92,

      107,   41,   41,   93,   93,  107,   55,   55,   55,   55,
       55,   95,   59,   59,   59,   59,   59,   41,   95,  118,
       55,  110,  110,  117,  118,  224,   59,   40,  224,   40,
      135,  117,   40,   40,   41,   40,   40,  159,   41,   40,
       40,   41,  159,   40,   40,   55,  119,   41,   40,  135,
       41,   59,   60,  701,   60,   60,   60,   60,   60,   61,
       61,  119,  160,   61,   61,   61,   61,   61,   60,   87,
      160,  121,  703,   87,  146,   99,   87,   87,   87,   87,
       87,   99,  101,   87,  255,   99,  121,  146,  101,  122,
      101,  121,  706,   60,  140,  122,  196,  140,  141,  141,

      101,  161,  140,  196,  140,  140,  150,  154,  154,  150,
      140,  255,  140,  163,  161,  150,  161,  199,  163,  173,
      173,  707,  199,  173,  173,  173,  173,  173,  174,  174,
      174,  174,  174,  175,  175,  227,  227,  175,  175,  175,
      175,  175,  174,  176,  176,  176,  176,  176,  177,  177,
      177,  177,  177,  185,  212,  205,  232,  271,  212,  709,
      253,  271,  232,  241,  241,  423,  423,  174,  205,  185,
      185,  253,  241,  281,  712,  427,  714,  241,  281,  281,
      241,  293,  429,  429,  293,  443,  304,  554,  554,  304,
      472,  293,  293,  427,  293,  304,  472,  293,  293,  304,

      326,  304,  304,  326,  715,  717,  661,  443,  326,  443,
      568,  661,  326,  568,  326,  326,  718,  304,  326,  327,
      327,  327,  327,  327,  699,  720,  721,  723,  304,  328,
      328,  328,  328,  328,  329,  329,  724,  699,  329,  329,
      329,  329,  329,  330,  330,  330,  330,  330,  331,  331,
      331,  331,  331,  475,  511,  511,  511,  511,  511,  647,
      475,  702,  725,  647,  475,  512,  512,  512,  512,  512,
      708,  726,  702,  719,  708,  727,  728,  702,  729,  708,
      730,  719,  733,  734,  735,  736,  737,  738,  739,  741,
      742,  744,  745,  746,  747,  748,  750,  751,  753,  755,

      756,  757,  758,  759,  760,  761,  762,  763,  765,  767,
      768,  747,  769,  770,  771,  772,  773,  776,  777,  780,
      782,  784,  786,  757,  787,  757,  788,  790,  792,  793,
      794,  795,  796,  797,  798,  799,  800,  801,  802,  804,
      806,  808,  809,  810,  814,  813,  813,  815,  813,  816,
      817,  813,  819,  800,  820,  821,  822,  823,  824,  826,
      800,  813,  827,  813,  828,  829,  830,  831,  832,  831,
      833,  834,  835,  836,  837,  840,  841,  842,  843,  845,
      846,  847,  848,  849,  850,  851,  852,  853,  854,  855,
      856,  857,  858,  859,  860,  861,  862,  863,  864,  865,

      866,  867,  868,  869,  870,  871,  872,  873,  874,  875,
      876,  877,  878,  880,  881,  882,  883,  884,  885,  886,
      887,  888,  889,  890,  891,  878,  892,  893,  894,  895,
      896,  897,  899,  901,  902,  903,  904,  878,  906,  907,
      908,  909,  910,  911,  912,  913,  914,  915,  916,  878,
      917,  919,  920,  921,  922,  923,  924,  925,  926,  924,
      922,  927,  928,  930,  931,  932,  933,  935,  936,  937,
      939,  940,  941,  942,  943,  944,  946,  947,  948,  949,
      950,  952,  954,  955,  956,  958,  959,  960,  961,  962,
      963,  964,  966,  968,  969,  972,  974,  977,  978,  979,

      980,  982,  983,  984,  987,  988,  989,  990,  991,  992,
      993,  994,  995,  996,  997,  998,  999, 1000, 1001, 1002,
     1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1014,
     1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024,
     1025, 1027, 1028, 1029, 1030, 1031, 1028, 1032, 1033, 1034,
     1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1045,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1057,
     1058, 1059, 1060, 1061, 1063, 1065, 1066, 1067, 1069, 1070,
     1071, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1081,
     1082, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095,

     1097, 1100, 1101, 1102, 1105, 1106, 1107, 1108, 1109, 1110,
     1112, 1114, 1080, 1115, 1116, 1117, 1119, 1120, 1121, 1122,
     1123, 1124, 1125, 1127, 1128, 1129, 1132, 1133, 1134, 1135,
     1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146,
     1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1157,
     1158, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169,
     1170, 1173, 1174, 1175, 1177, 1178, 1180, 1181, 1182, 1183,
     1184, 1185, 1186, 1187, 1188, 1189, 1161, 1190, 1192, 1193,
     1194, 1196, 1197, 1198, 1201, 1202, 1203, 1204, 1205, 1206,
     1207, 1209, 1182, 1210, 1211, 1212, 1213, 1214, 1215, 1216,

     1217, 1218, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228,
     1229, 1230, 1231, 1233, 1234, 1235, 1237, 1238, 1239, 1241,
     1243, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1264, 1265, 1266, 1267, 1269,
     1270, 1271, 1273, 1274, 1277, 1278, 1279, 1280, 1282, 1284,
     1286, 1288, 1290, 1291, 1292, 1293, 1295, 1282, 1296, 1297,
     1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1278,
     1307, 1308, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317,
     1319, 1320, 1321, 1323, 1325, 1326, 1327, 1328, 1329, 1330,
     1333, 1336, 1337, 1339, 1340, 1341, 1342, 1344, 1345, 1346,

     1347, 1348, 1350, 1351, 1354, 1355, 1356, 1357, 1358, 1359,
     1360, 1361, 1364, 1365, 1366, 1367, 1368, 1369, 1371, 1372,
     1373, 1374, 1377, 1379, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1390, 1393, 1394, 1395, 1396, 1397, 1398, 1399,
     1401, 1403, 1408, 1409, 1410, 1412, 1413, 1414, 1419,  698,
      697,  696,  695,  694,  693,  692,  691,  690,  688,  687,
      686,  685,  684,  683,  682,  680,  679,  675,  673,  672,
      670,  667,  666,  664,  663,  662,  660,  657,  656,  655,
      654,  653,  652,  651,  650,  649,  648,  646,  645,  644,
      643,  642,  641,  640,  638,  637,  636,  634,  633,  632,

      631,  630,  629,  628,  627,  626,  625,  622,  621,  620,
      619,  618,  617,  616,  615,  614,  613,  612,  611,  610,
      609,  607,  605,  604,  603,  602,  600,  598,  597,  596,
      595,  594,  593,  592,  590,  589,  588,  587,  585,  584,
      583,  582,  581,  579,  578,  576,  575,  574,  573,  572,
      571,  570,  569,  567,  565,  564,  563,  561,  560,  559,
      556,  555,  553,  552,  551,  550,  549,  548,  547,  545,
      544,  543,  542,  541,  540,  539,  538,  537,  536,  535,
      534,  533,  532,  531,  530,  529,  528,  527,  525,  523,
      521,  520,  519,  518,  517,  516,  515,  514,  509,  508,

      506,  502,  501,  500,  499,  498,  497,  496,  495,  494,
      493,  492,  491,  490,  489,  488,  485,  484,  483,  482,
      481,  480,  479,  478,  477,  476,  473,  471,  470,  469,
      466,  465,  464,  463,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  451,  450,  449,  448,  447,
      446,  445,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  428,  426,  424,  422,  421,
      420,  419,  417,  416,  415,  414,  413,  412,  411,  410,
      409,  406,  405,  404,  403,  402,  401,  400,  399,  398,
      396,  395,  393,  392,  391,  389,  387,  386,  385,  384,

      383,  382,  381,  378,  377,  376,  375,  374,  373,  372,
      371,  370,  369,  367,  366,  364,  363,  362,  361,  360,
      359,  358,  357,  356,  355,  354,  352,  351,  349,  348,
      347,  346,  345,  344,  343,  341,  340,  339,  338,  337,
      336,  335,  333,  332,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  306,  305,  303,  302,  301,  300,  299,
      298,  297,  296,  295,  294,  292,  290,  289,  288,  287,
      286,  285,  284,  283,  282,  280,  279,  278,  277,  276,
      275,  274,  273,  272,  270,  269,  268,  267,  266,  264,

      262,  261,  259,  258,  257,  256,  254,  252,  251,  250,
      249,  248,  247,  246,  245,  244,  243,  242,  240,  239,
      238,  236,  235,  234,  233,  231,  230,  229,  226,  225,
      223,  222,  221,  220,  219,  218,  217,  216,  215,  214,
      213,  211,  209,  208,  207,  206,  204,  202,  201,  200,
      198,  197,  195,  193,  192,  191,  190,  189,  188,  187,
      186,  184,  183,  182,  181,  180,  179,  178,  170,  169,
      168,  167,  166,  165,  164,  162,  158,  157,  153,  152,
      151,  149,  148,  147,  144,  143,  142,  139,  138,  137,
      133,  132,  131,  130,  129,  128,  127,  126,  125,  124,

      123,  120,  116,  115,  114,  112,  111,  109,  108,  106,
      105,  104,  103,  102,  100,   98,   97,   96,   94,   91,
       90,   89,   88,   86,   85,   84,   80,   78,   77,   76,
       75,   74,   73,   72,   71,   70,   54,   46,   45,   43,
       38,   32,   20,   17,   11,    9,    7,    3, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,

     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
     1418, 1418
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int gmsh_yy_flex_debug;
int gmsh_yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *gmsh_yytext;
#line 1 "Gmsh.l"
#line 2 "Gmsh.l"
// Gmsh - Copyright (C) 1997-2020 C. Geuzaine, J.-F. Remacle
//
// See the LICENSE.txt file for license information. Please report all
// issues on https://gitlab.onelab.info/gmsh/gmsh/issues.

#include <algorithm>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "GmshConfig.h"
#include "GmshMessage.h"
#include "GModelIO_GEO.h"
#include "Geo.h" // for Shape, NEWPOINT(), etc.
#include "Parser.h"
#include "Gmsh.tab.hpp"

void   parsestring(char endchar);
char  *strsave(char *ptr);
void   skipcomments(void);
void   skipline(void);

#define YY_INPUT(buf,result,max_size)					\
  {									\
    int c = '*', n;							\
    for(n = 0; n < (int) max_size && (c = fgetc(gmsh_yyin)) != EOF &&        \
           c != '\n' && c != '\r'; ++n)                                 \
      buf[n] = (char) c;                                                \
    if(c == '\n' || c == '\r') {                                        \
      buf[n++] = (char) c;                                              \
      if(c == '\n') gmsh_yylineno++;                                         \
    }                                                                   \
    if(c == EOF && ferror(gmsh_yyin))                                        \
      Msg::Error("Input in flex scanner failed");			\
    result = n;                                                         \
  }

#if defined(WIN32)
#define isatty(arg) -1
#define YY_NO_UNISTD_H
#endif

// undefine register for C++11 compatibility of files generated with old
// versions of flex/bison
#define register

#line 1345 "Gmsh.yy.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gmsh_yylex_destroy (void );

int gmsh_yyget_debug (void );

void gmsh_yyset_debug (int debug_flag  );

YY_EXTRA_TYPE gmsh_yyget_extra (void );

void gmsh_yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *gmsh_yyget_in (void );

void gmsh_yyset_in  (FILE * in_str  );

FILE *gmsh_yyget_out (void );

void gmsh_yyset_out  (FILE * out_str  );

yy_size_t gmsh_yyget_leng (void );

char *gmsh_yyget_text (void );

int gmsh_yyget_lineno (void );

void gmsh_yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gmsh_yywrap (void );
#else
extern int gmsh_yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( gmsh_yytext, gmsh_yyleng, 1, gmsh_yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( gmsh_yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( gmsh_yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, gmsh_yyin))==0 && ferror(gmsh_yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(gmsh_yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gmsh_yylex (void);

#define YY_DECL int gmsh_yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after gmsh_yytext and gmsh_yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 57 "Gmsh.l"


#line 1530 "Gmsh.yy.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! gmsh_yyin )
			gmsh_yyin = stdin;

		if ( ! gmsh_yyout )
			gmsh_yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gmsh_yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
		}

		gmsh_yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of gmsh_yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1419 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1549 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 59 "Gmsh.l"
/* none */;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "Gmsh.l"
return tEND;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 61 "Gmsh.l"
skipcomments();
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 62 "Gmsh.l"
skipline();
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 63 "Gmsh.l"
{ parsestring('\"'); return tBIGSTR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 64 "Gmsh.l"
{ parsestring('\''); return tBIGSTR; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 65 "Gmsh.l"
{ gmsh_yylval.d = NEWREG(); return tDOUBLE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 66 "Gmsh.l"
{ gmsh_yylval.d = NEWPOINT(); return tDOUBLE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 67 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 68 "Gmsh.l"
{ gmsh_yylval.d = NEWLINE(); return tDOUBLE; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 69 "Gmsh.l"
{ gmsh_yylval.d = NEWLINELOOP(); return tDOUBLE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 70 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACE(); return tDOUBLE; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 71 "Gmsh.l"
{ gmsh_yylval.d = NEWSURFACELOOP(); return tDOUBLE; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 72 "Gmsh.l"
{ gmsh_yylval.d = NEWVOLUME(); return tDOUBLE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 73 "Gmsh.l"
{ gmsh_yylval.d = NEWFIELD(); return tDOUBLE; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 74 "Gmsh.l"
return tAFFECT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 75 "Gmsh.l"
return tAFFECTPLUS;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 76 "Gmsh.l"
return tAFFECTMINUS;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 77 "Gmsh.l"
return tAFFECTTIMES;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 78 "Gmsh.l"
return tAFFECTDIVIDE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 79 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 80 "Gmsh.l"
return tDOTS;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 81 "Gmsh.l"
return tSCOPE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 82 "Gmsh.l"
return tOR;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 83 "Gmsh.l"
return tAND;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 84 "Gmsh.l"
return tPLUSPLUS;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 85 "Gmsh.l"
return tMINUSMINUS;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 86 "Gmsh.l"
return tEQUAL;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 87 "Gmsh.l"
return tNOTEQUAL;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 88 "Gmsh.l"
return tLESSOREQUAL;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 89 "Gmsh.l"
return tGREATEROREQUAL;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 90 "Gmsh.l"
return tGREATERGREATER;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 91 "Gmsh.l"
return tLESSLESS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 93 "Gmsh.l"
return tAbort;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 94 "Gmsh.l"
return tAbs;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 95 "Gmsh.l"
return tAbsolutePath;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 96 "Gmsh.l"
return tAcos;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 97 "Gmsh.l"
return tAdaptMesh;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 98 "Gmsh.l"
return tAffine;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 99 "Gmsh.l"
return tAlias;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 100 "Gmsh.l"
return tAliasWithOptions;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 101 "Gmsh.l"
return tAcos;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 102 "Gmsh.l"
return tAppend;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 103 "Gmsh.l"
return tAsin;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 104 "Gmsh.l"
return tAtan;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 105 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 106 "Gmsh.l"
return tAsin;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 107 "Gmsh.l"
return tAtan;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 108 "Gmsh.l"
return tAtan2;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "Gmsh.l"
return tBSpline;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "Gmsh.l"
return tBetti;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "Gmsh.l"
return tBezier;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "Gmsh.l"
return tBox;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "Gmsh.l"
return tBox;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "Gmsh.l"
return tBooleanFragments;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "Gmsh.l"
return tBooleanIntersection;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "Gmsh.l"
return tBooleanDifference;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "Gmsh.l"
return tBooleanDifference;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "Gmsh.l"
return tBooleanFragments;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "Gmsh.l"
return tBooleanUnion;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "Gmsh.l"
return tBooleanIntersection;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "Gmsh.l"
return tBooleanSection;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "Gmsh.l"
return tBooleanUnion;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "Gmsh.l"
return tBoundingBox;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 126 "Gmsh.l"
return tCall;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 127 "Gmsh.l"
return tCatenary;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 128 "Gmsh.l"
return tSpline;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 129 "Gmsh.l"
return tCeil;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 130 "Gmsh.l"
return tCenterOfMass;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 131 "Gmsh.l"
return tChamfer;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 132 "Gmsh.l"
return tCharacteristic;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 133 "Gmsh.l"
return tCircle;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 134 "Gmsh.l"
return tClassifySurfaces;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 135 "Gmsh.l"
return tCodeName;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 136 "Gmsh.l"
return tCoherence;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 137 "Gmsh.l"
return tCohomology;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 138 "Gmsh.l"
return tColor;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 139 "Gmsh.l"
return tColorTable;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 140 "Gmsh.l"
return tCombine;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 141 "Gmsh.l"
return tCompound;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 142 "Gmsh.l"
return tCone;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 143 "Gmsh.l"
return tCoordinates;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 144 "Gmsh.l"
return tCopyOptions;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 145 "Gmsh.l"
return tCos;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 146 "Gmsh.l"
return tCosh;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 147 "Gmsh.l"
return tCpu;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 148 "Gmsh.l"
return tCreateGeometry;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 149 "Gmsh.l"
return tCreateTopology;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 150 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 151 "Gmsh.l"
return tCurrentDirectory;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 152 "Gmsh.l"
return tCurrentFileName;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 153 "Gmsh.l"
return tCurve;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 154 "Gmsh.l"
return tCylinder;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 156 "Gmsh.l"
return tDefineConstant;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 157 "Gmsh.l"
return tDefineNumber;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 158 "Gmsh.l"
return tDefineString;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 159 "Gmsh.l"
return tDegenerated;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 160 "Gmsh.l"
return tDelete;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 161 "Gmsh.l"
return tDilate;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 162 "Gmsh.l"
return tDimNameSpace;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 163 "Gmsh.l"
return tDirName;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 164 "Gmsh.l"
return tDisk;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 165 "Gmsh.l"
return tDraw;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 167 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 168 "Gmsh.l"
return tEllipse;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 169 "Gmsh.l"
return tEllipsoid;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 170 "Gmsh.l"
return tElliptic;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 171 "Gmsh.l"
return tElse;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 172 "Gmsh.l"
return tElseIf;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 173 "Gmsh.l"
return tEndFor;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 174 "Gmsh.l"
return tEndIf;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 175 "Gmsh.l"
return tError;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 176 "Gmsh.l"
return tEuclidian;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 177 "Gmsh.l"
return tExists;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 178 "Gmsh.l"
return tExit;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 179 "Gmsh.l"
return tExp;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 180 "Gmsh.l"
return tExtrude;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 182 "Gmsh.l"
return tFabs;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 183 "Gmsh.l"
return tField;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 184 "Gmsh.l"
return tFileExists;
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 185 "Gmsh.l"
return tFillet;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 186 "Gmsh.l"
return tFind;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 187 "Gmsh.l"
return tFixRelativePath;
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 188 "Gmsh.l"
return tFloor;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 189 "Gmsh.l"
return tFmod;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 190 "Gmsh.l"
return tFor;
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 191 "Gmsh.l"
return tMacro;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 193 "Gmsh.l"
return tGMSH_MAJOR_VERSION;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 194 "Gmsh.l"
return tGMSH_MINOR_VERSION;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 195 "Gmsh.l"
return tGMSH_PATCH_VERSION;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 196 "Gmsh.l"
return tGeoEntity;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 197 "Gmsh.l"
return tGetEnv;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 198 "Gmsh.l"
return tGetForced;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 199 "Gmsh.l"
return tGetForcedStr;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 200 "Gmsh.l"
return tGetNumber;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 201 "Gmsh.l"
return tGetString;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 202 "Gmsh.l"
return tGetStringValue;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 203 "Gmsh.l"
return tGetValue;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 204 "Gmsh.l"
return tGmshExecutableName;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 206 "Gmsh.l"
return tHide;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 207 "Gmsh.l"
return tHole;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 208 "Gmsh.l"
return tHomology;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 209 "Gmsh.l"
return tHypot;
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 211 "Gmsh.l"
return tInterpolationScheme;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 212 "Gmsh.l"
return tIf;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 213 "Gmsh.l"
return tIn;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 214 "Gmsh.l"
return tIntersect;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 216 "Gmsh.l"
return tNurbsKnots;
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 218 "Gmsh.l"
return tLayers;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 219 "Gmsh.l"
return tLength;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 220 "Gmsh.l"
return tLevelset;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 221 "Gmsh.l"
return tLinSpace;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 222 "Gmsh.l"
return tCurve;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 223 "Gmsh.l"
return tList;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 224 "Gmsh.l"
return tListFromFile;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 225 "Gmsh.l"
return tLog;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 226 "Gmsh.l"
return tLog10;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 227 "Gmsh.l"
return tLogSpace;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 228 "Gmsh.l"
return tLowerCase;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 229 "Gmsh.l"
return tLowerCaseIn;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 231 "Gmsh.l"
return tMPI_Rank;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 232 "Gmsh.l"
return tMPI_Size;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 233 "Gmsh.l"
return tMacro;
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 234 "Gmsh.l"
return tMass;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 235 "Gmsh.l"
return tMax;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 236 "Gmsh.l"
return tMemory;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 237 "Gmsh.l"
return tMeshAlgorithm;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 238 "Gmsh.l"
return tMeshSizeFromBoundary;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 239 "Gmsh.l"
return tMin;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 240 "Gmsh.l"
return tModulo;
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 242 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 243 "Gmsh.l"
return tNameStruct;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 244 "Gmsh.l"
return tNameToString;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 245 "Gmsh.l"
return tNewModel;
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 246 "Gmsh.l"
return tNurbs;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 248 "Gmsh.l"
return tOnelabAction;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 249 "Gmsh.l"
return tOnelabRun;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 250 "Gmsh.l"
return tNurbsOrder;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 252 "Gmsh.l"
return tParametric;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 253 "Gmsh.l"
return tParent;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 254 "Gmsh.l"
return tPeriodic;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 255 "Gmsh.l"
return tPhysical;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 256 "Gmsh.l"
return tPi;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 257 "Gmsh.l"
return tPlane;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 258 "Gmsh.l"
return tPlugin;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 259 "Gmsh.l"
return tPoint;
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 260 "Gmsh.l"
return tPolarSphere;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 261 "Gmsh.l"
return tPrintf;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 263 "Gmsh.l"
return tQuadric;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 264 "Gmsh.l"
return tQuadTriAddVerts;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 265 "Gmsh.l"
return tQuadTriNoNewVerts;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 267 "Gmsh.l"
return tRand;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 268 "Gmsh.l"
return tRecombLaterals;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 269 "Gmsh.l"
return tRecombine;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 270 "Gmsh.l"
return tRectangle;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 271 "Gmsh.l"
return tRecursive;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 272 "Gmsh.l"
return tRecombineMesh;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 273 "Gmsh.l"
return tRefineMesh;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 274 "Gmsh.l"
return tRelocateMesh;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 275 "Gmsh.l"
return tReorientMesh;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 276 "Gmsh.l"
return tRenumberMeshNodes;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 277 "Gmsh.l"
return tRenumberMeshElements;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 278 "Gmsh.l"
return tReturn;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 279 "Gmsh.l"
return tReverseMesh;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 280 "Gmsh.l"
return tReverseMesh;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 281 "Gmsh.l"
return tRotate;
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 282 "Gmsh.l"
return tRound;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 283 "Gmsh.l"
return tRuled;
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 285 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 286 "Gmsh.l"
return tScaleLast;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 287 "Gmsh.l"
return tSetChanged;
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 288 "Gmsh.l"
return tSetFactory;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 289 "Gmsh.l"
return tSetTag;
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 290 "Gmsh.l"
return tSetMaxTag;
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 291 "Gmsh.l"
return tSetNumber;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 292 "Gmsh.l"
return tSetPartition;
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 293 "Gmsh.l"
return tSetString;
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 294 "Gmsh.l"
return tSewing;
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 295 "Gmsh.l"
return tShapeFromFile;
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 296 "Gmsh.l"
return tShow;
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 297 "Gmsh.l"
return tSin;
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 298 "Gmsh.l"
return tSinh;
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 299 "Gmsh.l"
return tSlide;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 300 "Gmsh.l"
return tSmoother;
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 301 "Gmsh.l"
return tSphere;
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 302 "Gmsh.l"
return tSpline;
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 303 "Gmsh.l"
return tSplit;
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 304 "Gmsh.l"
return tSprintf;
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 305 "Gmsh.l"
return tSqrt;
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 306 "Gmsh.l"
return tStr;
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 307 "Gmsh.l"
return tStrCat;
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 308 "Gmsh.l"
return tStrChoice;
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 309 "Gmsh.l"
return tStrCmp;
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 310 "Gmsh.l"
return tStrFind;
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 311 "Gmsh.l"
return tStrLen;
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 312 "Gmsh.l"
return tStrPrefix;
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 313 "Gmsh.l"
return tStrRelative;
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 314 "Gmsh.l"
return tStrReplace;
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 315 "Gmsh.l"
return tStrSub;
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 316 "Gmsh.l"
return tStringToName;
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 317 "Gmsh.l"
return tDefineStruct;
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 318 "Gmsh.l"
return tSurface;
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 319 "Gmsh.l"
return tSymmetry;
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 320 "Gmsh.l"
return tSyncModel;
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 322 "Gmsh.l"
return tText2D;
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 323 "Gmsh.l"
return tText3D;
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 324 "Gmsh.l"
return tTime;
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 325 "Gmsh.l"
return tTan;
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 326 "Gmsh.l"
return tTanh;
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 327 "Gmsh.l"
return tTestLevel;
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 328 "Gmsh.l"
return tTextAttributes;
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 329 "Gmsh.l"
return tThickSolid;
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 330 "Gmsh.l"
return tThruSections;
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 331 "Gmsh.l"
return tToday;
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 332 "Gmsh.l"
return tTorus;
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 333 "Gmsh.l"
return tTotalMemory;
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 334 "Gmsh.l"
return tTransfQuadTri;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 335 "Gmsh.l"
return tTransfinite;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 336 "Gmsh.l"
return tTranslate;
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 338 "Gmsh.l"
return tUndefineConstant;
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 339 "Gmsh.l"
return tUnique;
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 340 "Gmsh.l"
return tUpperCase;
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 341 "Gmsh.l"
return tUsing;
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 343 "Gmsh.l"
return tVolume;
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 345 "Gmsh.l"
return tWarning;
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 346 "Gmsh.l"
return tWedge;
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 347 "Gmsh.l"
return tWire;
	YY_BREAK
case 268:
#line 350 "Gmsh.l"
case 269:
#line 351 "Gmsh.l"
case 270:
#line 352 "Gmsh.l"
case 271:
YY_RULE_SETUP
#line 352 "Gmsh.l"
{ gmsh_yylval.d = atof((char *)gmsh_yytext); return tDOUBLE; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 354 "Gmsh.l"
{ gmsh_yylval.c = strsave((char*)gmsh_yytext); return tSTRING; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 356 "Gmsh.l"
return gmsh_yytext[0];
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 358 "Gmsh.l"
ECHO;
	YY_BREAK
#line 2975 "Gmsh.yy.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed gmsh_yyin at a new source and called
			 * gmsh_yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = gmsh_yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( gmsh_yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * gmsh_yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of gmsh_yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gmsh_yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gmsh_yyrestart(gmsh_yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gmsh_yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1419 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1419 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1418);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up gmsh_yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gmsh_yyrestart(gmsh_yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gmsh_yywrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve gmsh_yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gmsh_yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        gmsh_yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            gmsh_yy_create_buffer(gmsh_yyin,YY_BUF_SIZE );
	}

	gmsh_yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	gmsh_yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void gmsh_yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gmsh_yypop_buffer_state();
	 *		gmsh_yypush_buffer_state(new_buffer);
     */
	gmsh_yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gmsh_yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (gmsh_yywrap()) processing, but the only time this flag
	 * is looked at is after gmsh_yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void gmsh_yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	gmsh_yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gmsh_yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gmsh_yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	gmsh_yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gmsh_yy_create_buffer()
 * 
 */
    void gmsh_yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gmsh_yyfree((void *) b->yy_ch_buf  );

	gmsh_yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gmsh_yyrestart() or at EOF.
 */
    static void gmsh_yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	gmsh_yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gmsh_yy_init_buffer was _probably_
     * called from gmsh_yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void gmsh_yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gmsh_yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void gmsh_yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	gmsh_yyensure_buffer_stack();

	/* This block is copied from gmsh_yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gmsh_yy_switch_to_buffer. */
	gmsh_yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void gmsh_yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	gmsh_yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		gmsh_yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gmsh_yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)gmsh_yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in gmsh_yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gmsh_yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gmsh_yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gmsh_yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gmsh_yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gmsh_yy_scan_bytes() instead.
 */
YY_BUFFER_STATE gmsh_yy_scan_string (yyconst char * yystr )
{
    
	return gmsh_yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to gmsh_yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gmsh_yy_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gmsh_yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gmsh_yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gmsh_yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gmsh_yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up gmsh_yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		gmsh_yytext[gmsh_yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = gmsh_yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		gmsh_yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int gmsh_yyget_lineno  (void)
{
        
    return gmsh_yylineno;
}

/** Get the input stream.
 * 
 */
FILE *gmsh_yyget_in  (void)
{
        return gmsh_yyin;
}

/** Get the output stream.
 * 
 */
FILE *gmsh_yyget_out  (void)
{
        return gmsh_yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t gmsh_yyget_leng  (void)
{
        return gmsh_yyleng;
}

/** Get the current token.
 * 
 */

char *gmsh_yyget_text  (void)
{
        return gmsh_yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void gmsh_yyset_lineno (int  line_number )
{
    
    gmsh_yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see gmsh_yy_switch_to_buffer
 */
void gmsh_yyset_in (FILE *  in_str )
{
        gmsh_yyin = in_str ;
}

void gmsh_yyset_out (FILE *  out_str )
{
        gmsh_yyout = out_str ;
}

int gmsh_yyget_debug  (void)
{
        return gmsh_yy_flex_debug;
}

void gmsh_yyset_debug (int  bdebug )
{
        gmsh_yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gmsh_yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    gmsh_yyin = stdin;
    gmsh_yyout = stdout;
#else
    gmsh_yyin = (FILE *) 0;
    gmsh_yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gmsh_yylex_init()
     */
    return 0;
}

/* gmsh_yylex_destroy is for both reentrant and non-reentrant scanners. */
int gmsh_yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gmsh_yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gmsh_yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	gmsh_yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gmsh_yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gmsh_yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *gmsh_yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gmsh_yyfree (void * ptr )
{
	free( (char *) ptr );	/* see gmsh_yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 358 "Gmsh.l"



#undef gmsh_yywrap

int gmsh_yywrap() { return 1; }

void skipcomments(void)
{
  int c;

  while (1) {
    while ((c = yyinput()) != '*') {
      // Test on YY_END_OF_BUFFER_CHAR (0), not on feof(gmsh_yyin) because whole line
      // in buffer
      if(c == '\0') {
	Msg::Error("End of file in commented region");
        return;
      }
    }
    if((c = yyinput()) == '/')
      return;
    unput(c);
  }
}

void parsestring(char endchar)
{
  int c;
  char tmp[1024];

  // Note that we keep special characters (end-of-line \n, tabs \t, etc.) "as
  // is" in the output string: see yyinput() above
  int i = 0;
  while ((c = yyinput()) != endchar) {
    // Test on YY_END_OF_BUFFER_CHAR (0), not on feof(gmsh_yyin) because whole line
    // in buffer
    if(c == '\0') {
      Msg::Error("End of file in string");
      break;
    }
    else if(i >= (int)sizeof(tmp) - 1) {
      Msg::Error("String too long");
      break;
    }
    else{
      tmp[i++] = (char)c;
    }
  }
  tmp[i] = '\0';
  gmsh_yylval.c = strsave(tmp);
}

char *strsave(char *ptr)
{
  return((char*)strcpy((char*)malloc(strlen(ptr) + 1), ptr));
}

void skipline()
{
  int c;
  while ((c = yyinput()) != '\n' && c != '\0') {}
  // TODO: would be clever to skip the current buffer because whole line already
  // in it
}

static bool is_alpha(const int c)
{
  return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_';
}

void skip(const char *skip, const char *until)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_previous = 0;

  l_skip = skip ? strlen(skip) : 0;
  l_until = strlen(until);

  l_max = std::max(l_skip, l_until);
  if(l_max >= (int)sizeof(chars)) {
    Msg::Error("Search pattern too long in skip");
    return;
  }

  while(1) {
    while(1) {
      chars[0] = yyinput();
      // TOFIX: do another test
      if(feof(gmsh_yyin)) {
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/') {
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(chars[0] == '"') {
        parsestring('"');
      }
      if(chars[0] == '\'') {
        parsestring('\'');
      }
      if(!c_previous || !is_alpha(c_previous)) {
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
      }
      c_previous = chars[0];
    }

    l = l_max;

    for(i  =1; i < l; i++) {
      chars[i] = yyinput();
      if(feof(gmsh_yyin)) {
	l = i;
	break;
      }
    }

    c_next = yyinput(); unput(c_next);
    c_next_skip = (l_skip < l) ? chars[l_skip] : c_next;
    c_next_until = (l_until < l) ? chars[l_until] : c_next;

    if(!strncmp(chars, until, l_until) && !is_alpha(c_next_until)) {
      if(!nb_skip) {
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars, skip, l_skip) && !is_alpha(c_next_skip)) {
      nb_skip++;
      // Attention: unput(.) should be applied a number of times equal to
      // l-l_skip (always >0 for skip="For" and until="EndFor", or skip="If" and
      // until="EndIf"); in particular, because "If" is followed by a minimum of
      // 3 chars (e.g., '(1)'), with a total lenght thus exactly equal to the
      // one of "EndIf", one avoid an error when looking then for
      // "EndIf". (Patrick)
    }
    else{
      for(i = 1; i < l - 1; i++) {
	unput(chars[l - i]);
      }
    }

  }
}

void skipTest(const char *skip, const char *until,
              const char *until2, int l_until2_sub, int *type_until2)
{
  int i, nb_skip = 0;
  int l_skip, l_until, l_until2, l_max, l;
  char chars[256];
  int c_next, c_next_skip, c_next_until, c_next_until2, c_previous = 0;
  int flag_EOL_EOF = 0;

  l_skip = skip ? strlen(skip) : 0;
  l_until = strlen(until);
  l_until2 = until2 ? strlen(until2) : 0;

  l_max = std::max(l_skip, l_until);
  l_max = std::max(l_max, l_until2);
  if(l_max >= (int)sizeof(chars)) {
    Msg::Error("Search pattern too long in skipTest");
    return;
  }

  while(1) {
    while(1) {
      chars[0] = yyinput();
      if(feof(gmsh_yyin)) {
	Msg::Error("Unexpected end of file");
	return;
      }
      if(chars[0] == '/') {
        c_next = yyinput();
        if     (c_next ==  '*') skipcomments();
        else if(c_next ==  '/') skipline();
        else unput(c_next);
      }
      if(!c_previous || !is_alpha(c_previous)) {
        if(chars[0] == until[0]) break;
        if(skip && chars[0] == skip[0]) break;
        if(!nb_skip && until2 && chars[0] == until2[0]) break;
        // Useless to search for until2 if nb_skip!=0
      }
      c_previous = chars[0];
    }

    l = l_max;
    flag_EOL_EOF = 0;

    for(i = 1; i < l; i++) {
      chars[i] = yyinput();
      if(chars[i] == '\n') {
        unput(chars[i]); chars[i] = 0; l = i; flag_EOL_EOF = 1;
        break;
      }
      if(feof(gmsh_yyin)) {
	l = i; flag_EOL_EOF = 1;
	break;
      }
    }

    if(!flag_EOL_EOF) {
      c_next = yyinput(); unput(c_next);
      c_next_skip = (l_skip < l) ? chars[l_skip] : c_next;
      c_next_until = (l_until < l) ? chars[l_until] : c_next;
      if(!nb_skip)
        c_next_until2 = (l_until2 < l) ? chars[l_until2] : c_next;
    }
    else{
      c_next = 0; c_next_skip = 0; c_next_until = 0; c_next_until2 = 0;
    }

    if(!nb_skip && !strncmp(chars, until2, l_until2) &&
       !is_alpha(c_next_until2)) {
      *type_until2 = 1; // Found word is full until2 (e.g., "ElseIf")
      for(int i = 1; i <= l; i++) { // Only correct if l == l_until2
        unput(chars[l - i]);
      } // New file position points "ElseIf", that will be then analysed by the parser
      return;
    }
    else if(!nb_skip && !strncmp(chars,until2,l_until2_sub) &&
            !is_alpha(chars[l_until2_sub])) {
      *type_until2 = 2; // Found word is subword from until2 (e.g., "Else")
      for(int i = 1; i <= l - l_until2_sub; i++) { // Only correct if l_until2_sub < l
        unput(chars[l - i]);
      }
      return;
    }
    else if(!strncmp(chars, until, l_until) && !is_alpha(c_next_until)) {
      for(int i = 1; i <= l - l_until; i++) {
        unput(chars[l - i]);
      }
      if(!nb_skip) {
	return;
      }
      else{
	nb_skip--;
      }
    }
    else if(skip && !strncmp(chars, skip, l_skip) && !is_alpha(c_next_skip)) {
      nb_skip++;
    }
    else{
      for(i = 1; i < l - 1; i++) {
	unput(chars[l - i]);
      }
    }

  }
}

void gmsh_yyflush() { YY_FLUSH_BUFFER; }

