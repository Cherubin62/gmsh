/* A Bison parser, made from Gmsh.y
   by GNU bison 1.35.  */

#define YYBISON 1  /* Identify Bison output.  */

# define	tDOUBLE	257
# define	tSTRING	258
# define	tBIGSTR	259
# define	tEND	260
# define	tAFFECT	261
# define	tDOTS	262
# define	tPi	263
# define	tMPI_Rank	264
# define	tMPI_Size	265
# define	tExp	266
# define	tLog	267
# define	tLog10	268
# define	tSqrt	269
# define	tSin	270
# define	tAsin	271
# define	tCos	272
# define	tAcos	273
# define	tTan	274
# define	tRand	275
# define	tAtan	276
# define	tAtan2	277
# define	tSinh	278
# define	tCosh	279
# define	tTanh	280
# define	tFabs	281
# define	tFloor	282
# define	tCeil	283
# define	tFmod	284
# define	tModulo	285
# define	tHypot	286
# define	tPrintf	287
# define	tSprintf	288
# define	tStrCat	289
# define	tStrPrefix	290
# define	tDraw	291
# define	tPoint	292
# define	tCircle	293
# define	tEllipse	294
# define	tLine	295
# define	tSurface	296
# define	tSpline	297
# define	tVolume	298
# define	tCharacteristic	299
# define	tLength	300
# define	tParametric	301
# define	tElliptic	302
# define	tPlane	303
# define	tRuled	304
# define	tTransfinite	305
# define	tComplex	306
# define	tPhysical	307
# define	tUsing	308
# define	tBump	309
# define	tProgression	310
# define	tPlugin	311
# define	tRotate	312
# define	tTranslate	313
# define	tSymmetry	314
# define	tDilate	315
# define	tExtrude	316
# define	tDuplicata	317
# define	tLoop	318
# define	tRecombine	319
# define	tDelete	320
# define	tCoherence	321
# define	tIntersect	322
# define	tAttractor	323
# define	tLayers	324
# define	tScalarPoint	325
# define	tVectorPoint	326
# define	tTensorPoint	327
# define	tScalarLine	328
# define	tVectorLine	329
# define	tTensorLine	330
# define	tScalarTriangle	331
# define	tVectorTriangle	332
# define	tTensorTriangle	333
# define	tScalarQuadrangle	334
# define	tVectorQuadrangle	335
# define	tTensorQuadrangle	336
# define	tScalarTetrahedron	337
# define	tVectorTetrahedron	338
# define	tTensorTetrahedron	339
# define	tScalarHexahedron	340
# define	tVectorHexahedron	341
# define	tTensorHexahedron	342
# define	tScalarPrism	343
# define	tVectorPrism	344
# define	tTensorPrism	345
# define	tScalarPyramid	346
# define	tVectorPyramid	347
# define	tTensorPyramid	348
# define	tText2D	349
# define	tText3D	350
# define	tBSpline	351
# define	tBezier	352
# define	tNurbs	353
# define	tOrder	354
# define	tWith	355
# define	tBounds	356
# define	tKnots	357
# define	tColor	358
# define	tColorTable	359
# define	tFor	360
# define	tIn	361
# define	tEndFor	362
# define	tIf	363
# define	tEndIf	364
# define	tExit	365
# define	tReturn	366
# define	tCall	367
# define	tFunction	368
# define	tMesh	369
# define	tB_SPLINE_SURFACE_WITH_KNOTS	370
# define	tB_SPLINE_CURVE_WITH_KNOTS	371
# define	tCARTESIAN_POINT	372
# define	tTRUE	373
# define	tFALSE	374
# define	tUNSPECIFIED	375
# define	tU	376
# define	tV	377
# define	tEDGE_CURVE	378
# define	tVERTEX_POINT	379
# define	tORIENTED_EDGE	380
# define	tPLANE	381
# define	tFACE_OUTER_BOUND	382
# define	tEDGE_LOOP	383
# define	tADVANCED_FACE	384
# define	tVECTOR	385
# define	tDIRECTION	386
# define	tAXIS2_PLACEMENT_3D	387
# define	tISO	388
# define	tENDISO	389
# define	tENDSEC	390
# define	tDATA	391
# define	tHEADER	392
# define	tFILE_DESCRIPTION	393
# define	tFILE_SCHEMA	394
# define	tFILE_NAME	395
# define	tMANIFOLD_SOLID_BREP	396
# define	tCLOSED_SHELL	397
# define	tADVANCED_BREP_SHAPE_REPRESENTATION	398
# define	tFACE_BOUND	399
# define	tCYLINDRICAL_SURFACE	400
# define	tCONICAL_SURFACE	401
# define	tCIRCLE	402
# define	tTRIMMED_CURVE	403
# define	tGEOMETRIC_SET	404
# define	tCOMPOSITE_CURVE_SEGMENT	405
# define	tCONTINUOUS	406
# define	tCOMPOSITE_CURVE	407
# define	tTOROIDAL_SURFACE	408
# define	tPRODUCT_DEFINITION	409
# define	tPRODUCT_DEFINITION_SHAPE	410
# define	tSHAPE_DEFINITION_REPRESENTATION	411
# define	tELLIPSE	412
# define	tTrimmed	413
# define	tSolid	414
# define	tEndSolid	415
# define	tVertex	416
# define	tFacet	417
# define	tNormal	418
# define	tOuter	419
# define	tLoopSTL	420
# define	tEndLoop	421
# define	tEndFacet	422
# define	tAFFECTPLUS	423
# define	tAFFECTMINUS	424
# define	tAFFECTTIMES	425
# define	tAFFECTDIVIDE	426
# define	tOR	427
# define	tAND	428
# define	tEQUAL	429
# define	tNOTEQUAL	430
# define	tAPPROXEQUAL	431
# define	tLESSOREQUAL	432
# define	tGREATEROREQUAL	433
# define	tCROSSPRODUCT	434
# define	tPLUSPLUS	435
# define	tMINUSMINUS	436
# define	UNARYPREC	437

#line 1 "Gmsh.y"
 

// $Id: Gmsh.tab.cpp,v 1.149 2003-02-12 20:27:13 geuzaine Exp $
//
// Copyright (C) 1997 - 2003 C. Geuzaine, J.-F. Remacle
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
// USA.
// 
// Please report all bugs and problems to "gmsh@geuz.org".

#include <stdarg.h>
#include "PluginManager.h"
#include "ParUtil.h"
#include "Gmsh.h"
#include "Numeric.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Draw.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Options.h"
#include "Colors.h"
#include "Parser.h"
#include "OpenFile.h"
#include "FunctionManager.h"
#include "ColorTable.h"
#include "Timer.h"
#include "CreateFile.h"
#include "STL.h"

List_T *Symbol_L=NULL;

extern Context_T  CTX;
extern Mesh      *THEM;

static FILE          *yyinTab[MAX_OPEN_FILES];
static int            yylinenoTab[MAX_OPEN_FILES];
static fpos_t         yyposImbricatedLoopsTab[MAX_OPEN_FILES];
static int            yylinenoImbricatedLoopsTab[MAX_OPEN_FILES];
static double         LoopControlVariablesTab[MAX_OPEN_FILES][3];
static char*          LoopControlVariablesNameTab[MAX_OPEN_FILES];
static char           yynameTab[MAX_OPEN_FILES][256];
static char           tmpstring[1024];
static Symbol         TheSymbol, *pSymbol;
static Surface       *STL_Surf;
static Shape          TheShape;
static int            i,j,k,flag,RecursionLevel=0,ImbricatedLoop = 0;
static int            Last_NumberOfPoints = 0;
static double         d, *pd;
static ExtrudeParams  extr;
static char           *str;
static StringXString  *pStrCat;
static StringXNumber  *pNumCat;
static StringXColor   *pColCat;
static double         (*pNumOpt)(int num, int action, double value);
static char*          (*pStrOpt)(int num, int action, char *value);
static unsigned int   (*pColOpt)(int num, int action, unsigned int value);
static Post_View      *View;

char *strsave(char *ptr);
void  yyerror (char *s);
void  yymsg (int type, char *fmt, ...);
void  skip_until (char *skip, char *until);
int PrintListOfDouble(char *format, List_T *list, char *buffer);

#line 84 "Gmsh.y"
#ifndef YYSTYPE
typedef union {
  char    *c;
  int      i;
  unsigned int u;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} yystype;
# define YYSTYPE yystype
# define YYSTYPE_IS_TRIVIAL 1
#endif
#ifndef YYDEBUG
# define YYDEBUG 0
#endif



#define	YYFINAL		2257
#define	YYFLAG		-32768
#define	YYNTBASE	202

/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
#define YYTRANSLATE(x) ((unsigned)(x) <= 437 ? yytranslate[x] : 332)

/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
static const short yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   189,     2,     2,     2,   187,     2,     2,
     194,   195,   185,   183,   199,   184,   198,   186,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     179,     2,   181,   173,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   196,     2,   197,   193,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   200,     2,   201,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
      76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
     126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
     136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
     146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     166,   167,   168,   169,   170,   171,   172,   174,   175,   176,
     177,   178,   180,   182,   188,   190,   191,   192
};

#if YYDEBUG
static const short yyprhs[] =
{
       0,     0,     2,     4,     6,     9,    11,    14,    16,    38,
      40,    41,    44,    46,    48,    50,    53,    56,    59,    62,
      65,    73,    79,    97,   107,   131,   163,   179,   191,   203,
     219,   229,   243,   253,   265,   279,   289,   299,   311,   321,
     333,   343,   355,   369,   383,   395,   409,   427,   437,   449,
     461,   475,   487,   497,   498,   501,   503,   505,   507,   509,
     511,   513,   515,   517,   519,   521,   523,   525,   527,   533,
     541,   548,   557,   558,   561,   564,   567,   570,   573,   576,
     579,   582,   585,   588,   591,   594,   597,   600,   603,   606,
     609,   612,   615,   618,   621,   624,   627,   630,   633,   636,
     638,   642,   643,   657,   659,   663,   664,   678,   680,   684,
     685,   699,   701,   705,   706,   726,   728,   732,   733,   753,
     755,   759,   760,   780,   782,   786,   787,   813,   815,   819,
     820,   846,   848,   852,   853,   879,   881,   885,   886,   918,
     920,   924,   925,   957,   959,   963,   964,   996,   998,  1002,
    1003,  1035,  1037,  1041,  1042,  1074,  1076,  1080,  1081,  1113,
    1115,  1119,  1120,  1176,  1178,  1182,  1183,  1239,  1241,  1245,
    1246,  1302,  1304,  1308,  1309,  1353,  1355,  1359,  1360,  1404,
    1406,  1410,  1411,  1455,  1457,  1461,  1462,  1500,  1502,  1506,
    1507,  1545,  1547,  1551,  1552,  1590,  1592,  1596,  1597,  1611,
    1613,  1617,  1618,  1634,  1636,  1638,  1640,  1642,  1644,  1646,
    1648,  1653,  1661,  1671,  1678,  1682,  1689,  1696,  1706,  1713,
    1723,  1729,  1738,  1747,  1759,  1766,  1776,  1786,  1796,  1804,
    1813,  1826,  1833,  1841,  1849,  1862,  1870,  1878,  1888,  1906,
    1915,  1924,  1932,  1940,  1952,  1961,  1974,  1983,  2006,  2027,
    2036,  2045,  2054,  2062,  2071,  2077,  2089,  2095,  2105,  2107,
    2109,  2111,  2112,  2115,  2122,  2129,  2136,  2141,  2148,  2153,
    2160,  2164,  2170,  2174,  2178,  2186,  2189,  2192,  2199,  2208,
    2217,  2228,  2230,  2233,  2235,  2239,  2244,  2246,  2255,  2268,
    2283,  2292,  2305,  2320,  2321,  2334,  2335,  2352,  2353,  2372,
    2381,  2394,  2409,  2410,  2423,  2424,  2441,  2442,  2461,  2463,
    2466,  2476,  2484,  2487,  2494,  2504,  2514,  2523,  2532,  2541,
    2548,  2553,  2556,  2559,  2561,  2563,  2565,  2567,  2569,  2571,
    2575,  2578,  2581,  2584,  2588,  2592,  2596,  2600,  2604,  2608,
    2612,  2616,  2620,  2624,  2628,  2632,  2636,  2640,  2646,  2651,
    2656,  2661,  2666,  2671,  2676,  2681,  2686,  2691,  2696,  2703,
    2708,  2713,  2718,  2723,  2728,  2733,  2740,  2747,  2754,  2759,
    2764,  2769,  2774,  2779,  2784,  2789,  2794,  2799,  2804,  2809,
    2816,  2821,  2826,  2831,  2836,  2841,  2846,  2853,  2860,  2867,
    2872,  2874,  2876,  2878,  2880,  2882,  2887,  2890,  2896,  2900,
    2907,  2912,  2920,  2922,  2925,  2928,  2932,  2936,  2948,  2958,
    2966,  2974,  2975,  2979,  2981,  2985,  2986,  2990,  2994,  2996,
    3000,  3002,  3004,  3008,  3013,  3017,  3023,  3027,  3032,  3039,
    3047,  3049,  3051,  3055,  3059,  3069,  3077,  3079,  3085,  3089,
    3096,  3098,  3102,  3104,  3111,  3116,  3121,  3128,  3135
};
static const short yyrhs[] =
{
     205,     0,   204,     0,   210,     0,     1,     6,     0,     3,
       0,   184,     3,     0,   160,     0,   163,   164,   203,   203,
     203,   165,   166,   162,   203,   203,   203,   162,   203,   203,
     203,   162,   203,   203,   203,   167,   168,     0,   161,     0,
       0,   205,   206,     0,   207,     0,   209,     0,   208,     0,
     134,     6,     0,   135,     6,     0,   137,     6,     0,   136,
       6,     0,   138,     6,     0,   139,   194,   321,   199,     5,
     195,     6,     0,   140,   194,   321,   195,     6,     0,   141,
     194,     5,   199,     5,   199,   321,   199,   321,   199,     5,
     199,     5,   199,     5,   195,     6,     0,     3,     7,   118,
     194,     5,   199,   319,   195,     6,     0,     3,     7,   117,
     194,     5,   199,   317,   199,   325,   199,   316,   199,   316,
     199,   316,   199,   325,   199,   325,   199,   316,   195,     6,
       0,     3,     7,   116,   194,     5,   199,   317,   199,   317,
     199,   323,   199,   316,   199,   316,   199,   316,   199,   316,
     199,   325,   199,   325,   199,   325,   199,   325,   199,   316,
     195,     6,     0,     3,     7,   124,   194,     5,   199,     3,
     199,     3,   199,     3,   199,   316,   195,     6,     0,     3,
       7,   128,   194,     5,   199,     3,   199,   316,   195,     6,
       0,     3,     7,   145,   194,     5,   199,     3,   199,   316,
     195,     6,     0,     3,     7,   126,   194,     5,   199,   185,
     199,   185,   199,   317,   199,   316,   195,     6,     0,     3,
       7,   129,   194,     5,   199,   325,   195,     6,     0,     3,
       7,   130,   194,     5,   199,   325,   199,     3,   199,   316,
     195,     6,     0,     3,     7,   125,   194,     5,   199,     3,
     195,     6,     0,     3,     7,   131,   194,     5,   199,     3,
     199,   317,   195,     6,     0,     3,     7,   133,   194,     5,
     199,     3,   199,     3,   199,     3,   195,     6,     0,     3,
       7,   132,   194,     5,   199,   319,   195,     6,     0,     3,
       7,   127,   194,     5,   199,     3,   195,     6,     0,     3,
       7,    41,   194,     5,   199,     3,   199,     3,   195,     6,
       0,     3,     7,   143,   194,     5,   199,   325,   195,     6,
       0,     3,     7,   144,   194,     5,   199,   325,   199,     3,
     195,     6,     0,     3,     7,   142,   194,     5,   199,     3,
     195,     6,     0,     3,     7,   146,   194,     5,   199,     3,
     199,   317,   195,     6,     0,     3,     7,   147,   194,     5,
     199,     3,   199,   317,   199,   317,   195,     6,     0,     3,
       7,   154,   194,     5,   199,     3,   199,   317,   199,   317,
     195,     6,     0,     3,     7,   148,   194,     5,   199,     3,
     199,   317,   195,     6,     0,     3,     7,   158,   194,     5,
     199,     3,   199,   317,   199,   317,   195,     6,     0,     3,
       7,   149,   194,     5,   199,     3,   199,   325,   199,   325,
     199,   316,   199,   316,   195,     6,     0,     3,     7,   150,
     194,     5,   199,   325,   195,     6,     0,     3,     7,   151,
     194,   152,   199,   316,   199,     3,   195,     6,     0,     3,
       7,   153,   194,     5,   199,   325,   199,   316,   195,     6,
       0,     3,     7,   155,   194,     5,   199,     5,   199,     3,
     199,     3,   195,     6,     0,     3,     7,   156,   194,     5,
     199,     5,   199,     3,   195,     6,     0,     3,     7,   157,
     194,     3,   199,     3,   195,     6,     0,     0,   210,   211,
       0,   213,     0,   212,     0,   295,     0,   296,     0,   297,
       0,   300,     0,   301,     0,   302,     0,   305,     0,   314,
       0,   315,     0,   304,     0,   303,     0,    33,   194,     5,
     195,     6,     0,    33,   194,     5,   199,   327,   195,     6,
       0,     4,     5,   200,   214,   201,     6,     0,     4,     5,
       4,   319,   200,   214,   201,     6,     0,     0,   214,   216,
       0,   214,   219,     0,   214,   222,     0,   214,   225,     0,
     214,   228,     0,   214,   231,     0,   214,   234,     0,   214,
     237,     0,   214,   240,     0,   214,   243,     0,   214,   246,
       0,   214,   249,     0,   214,   252,     0,   214,   255,     0,
     214,   258,     0,   214,   261,     0,   214,   264,     0,   214,
     267,     0,   214,   270,     0,   214,   273,     0,   214,   276,
       0,   214,   279,     0,   214,   282,     0,   214,   285,     0,
     214,   288,     0,   214,   291,     0,   317,     0,   215,   199,
     317,     0,     0,    71,   194,   317,   199,   317,   199,   317,
     195,   217,   200,   215,   201,     6,     0,   317,     0,   218,
     199,   317,     0,     0,    72,   194,   317,   199,   317,   199,
     317,   195,   220,   200,   218,   201,     6,     0,   317,     0,
     221,   199,   317,     0,     0,    73,   194,   317,   199,   317,
     199,   317,   195,   223,   200,   221,   201,     6,     0,   317,
       0,   224,   199,   317,     0,     0,    74,   194,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   195,
     226,   200,   224,   201,     6,     0,   317,     0,   227,   199,
     317,     0,     0,    75,   194,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   195,   229,   200,   227,
     201,     6,     0,   317,     0,   230,   199,   317,     0,     0,
      76,   194,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   195,   232,   200,   230,   201,     6,     0,
     317,     0,   233,   199,   317,     0,     0,    77,   194,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   195,   235,   200,   233,
     201,     6,     0,   317,     0,   236,   199,   317,     0,     0,
      78,   194,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   195,
     238,   200,   236,   201,     6,     0,   317,     0,   239,   199,
     317,     0,     0,    79,   194,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   195,   241,   200,   239,   201,     6,     0,   317,
       0,   242,   199,   317,     0,     0,    80,   194,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   195,   244,   200,   242,   201,     6,     0,   317,     0,
     245,   199,   317,     0,     0,    81,   194,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     195,   247,   200,   245,   201,     6,     0,   317,     0,   248,
     199,   317,     0,     0,    82,   194,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   195,
     250,   200,   248,   201,     6,     0,   317,     0,   251,   199,
     317,     0,     0,    83,   194,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   195,   253,
     200,   251,   201,     6,     0,   317,     0,   254,   199,   317,
       0,     0,    84,   194,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   195,   256,   200,
     254,   201,     6,     0,   317,     0,   257,   199,   317,     0,
       0,    85,   194,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   195,   259,   200,   257,
     201,     6,     0,   317,     0,   260,   199,   317,     0,     0,
      86,   194,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   195,
     262,   200,   260,   201,     6,     0,   317,     0,   263,   199,
     317,     0,     0,    87,   194,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   195,   265,   200,   263,   201,     6,     0,   317,
       0,   266,   199,   317,     0,     0,    88,   194,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   195,   268,   200,   266,   201,
       6,     0,   317,     0,   269,   199,   317,     0,     0,    89,
     194,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   195,   271,   200,   269,
     201,     6,     0,   317,     0,   272,   199,   317,     0,     0,
      90,   194,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   195,   274,   200,
     272,   201,     6,     0,   317,     0,   275,   199,   317,     0,
       0,    91,   194,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   195,   277,
     200,   275,   201,     6,     0,   317,     0,   278,   199,   317,
       0,     0,    92,   194,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   195,   280,   200,   278,   201,     6,     0,
     317,     0,   281,   199,   317,     0,     0,    93,   194,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   199,   317,   195,   283,
     200,   281,   201,     6,     0,   317,     0,   284,   199,   317,
       0,     0,    94,   194,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   199,   317,   199,   317,   199,   317,   199,
     317,   199,   317,   195,   286,   200,   284,   201,     6,     0,
     331,     0,   287,   199,   331,     0,     0,    95,   194,   317,
     199,   317,   199,   317,   195,   289,   200,   287,   201,     6,
       0,   331,     0,   290,   199,   331,     0,     0,    96,   194,
     317,   199,   317,   199,   317,   199,   317,   195,   292,   200,
     290,   201,     6,     0,     7,     0,   169,     0,   170,     0,
     171,     0,   172,     0,   190,     0,   191,     0,     4,   293,
     317,     6,     0,     4,   196,   317,   197,   293,   317,     6,
       0,     4,   196,   200,   327,   201,   197,   293,   325,     6,
       0,     4,   196,   197,     7,   325,     6,     0,     4,   294,
       6,     0,     4,   196,   317,   197,   294,     6,     0,     4,
     198,     4,     7,   331,     6,     0,     4,   196,   317,   197,
     198,     4,     7,   331,     6,     0,     4,   198,     4,   293,
     317,     6,     0,     4,   196,   317,   197,   198,     4,   293,
     317,     6,     0,     4,   198,     4,   294,     6,     0,     4,
     196,   317,   197,   198,     4,   294,     6,     0,     4,   198,
     104,   198,     4,     7,   328,     6,     0,     4,   196,   317,
     197,   198,   104,   198,     4,     7,   328,     6,     0,     4,
     198,   105,     7,   329,     6,     0,     4,   196,   317,   197,
     198,   105,     7,   329,     6,     0,    57,   194,     4,   195,
     198,     4,     7,   317,     6,     0,    57,   194,     4,   195,
     198,     4,     7,   331,     6,     0,    38,   194,   317,   195,
       7,   319,     6,     0,    53,    38,   194,   317,   195,     7,
     325,     6,     0,    69,    38,   325,     7,   200,   317,   199,
     317,   199,   317,   201,     6,     0,    45,    46,   325,     7,
     317,     6,     0,    41,   194,   317,   195,     7,   325,     6,
       0,    43,   194,   317,   195,     7,   325,     6,     0,    69,
      41,   325,     7,   200,   317,   199,   317,   199,   317,   201,
       6,     0,    39,   194,   317,   195,     7,   325,     6,     0,
      40,   194,   317,   195,     7,   325,     6,     0,    39,   194,
     317,   195,     7,   325,    49,   319,     6,     0,    47,   194,
     317,   195,     7,   200,   317,   199,   317,   199,     5,   199,
       5,   199,     5,   201,     6,     0,    53,    41,   194,   317,
     195,     7,   325,     6,     0,    41,    64,   194,   317,   195,
       7,   325,     6,     0,    97,   194,   317,   195,     7,   325,
       6,     0,    98,   194,   317,   195,     7,   325,     6,     0,
      99,   194,   317,   195,     7,   325,   103,   325,   100,   317,
       6,     0,    49,    42,   194,   317,   195,     7,   325,     6,
       0,   159,    42,   194,   317,   195,     7,   200,   317,   199,
     325,   201,     6,     0,    50,    42,   194,   317,   195,     7,
     325,     6,     0,    99,    42,   101,   102,   194,   317,   195,
       7,   323,   103,   200,   325,   199,   325,   201,   100,   200,
     317,   199,   317,   201,     6,     0,    99,    42,   194,   317,
     195,     7,   323,   103,   200,   325,   199,   325,   201,   100,
     200,   317,   199,   317,   201,     6,     0,    53,    42,   194,
     317,   195,     7,   325,     6,     0,    42,    64,   194,   317,
     195,     7,   325,     6,     0,    52,    44,   194,   317,   195,
       7,   325,     6,     0,    44,   194,   317,   195,     7,   325,
       6,     0,    53,    44,   194,   317,   195,     7,   325,     6,
       0,    59,   319,   200,   298,   201,     0,    58,   200,   319,
     199,   319,   199,   317,   201,   200,   298,   201,     0,    60,
     319,   200,   298,   201,     0,    61,   200,   319,   199,   317,
     201,   200,   298,   201,     0,   300,     0,   299,     0,   297,
       0,     0,   299,   296,     0,   299,    38,   200,   327,   201,
       6,     0,   299,    41,   200,   327,   201,     6,     0,   299,
      42,   200,   327,   201,     6,     0,    63,   200,   299,   201,
       0,    63,     4,   196,   317,   197,     6,     0,    66,   200,
     299,   201,     0,    66,     4,   196,   317,   197,     6,     0,
      66,   115,     6,     0,   104,   328,   200,   299,   201,     0,
       4,   331,     6,     0,     4,   317,     6,     0,    57,   194,
       4,   195,   198,     4,     6,     0,   111,     6,     0,    37,
       6,     0,   106,   194,   317,     8,   317,   195,     0,   106,
     194,   317,     8,   317,     8,   317,   195,     0,   106,     4,
     107,   200,   317,     8,   317,   201,     0,   106,     4,   107,
     200,   317,     8,   317,     8,   317,   201,     0,   108,     0,
     114,     4,     0,   112,     0,   113,     4,     6,     0,   109,
     194,   317,   195,     0,   110,     0,    62,    38,   200,   317,
     199,   319,   201,     6,     0,    62,    38,   200,   317,   199,
     319,   199,   319,   199,   317,   201,     6,     0,    62,    38,
     200,   317,   199,   319,   199,   319,   199,   319,   199,   317,
     201,     6,     0,    62,    41,   200,   317,   199,   319,   201,
       6,     0,    62,    41,   200,   317,   199,   319,   199,   319,
     199,   317,   201,     6,     0,    62,    41,   200,   317,   199,
     319,   199,   319,   199,   319,   199,   317,   201,     6,     0,
       0,    62,    41,   200,   317,   199,   319,   201,   306,   200,
     312,   201,     6,     0,     0,    62,    41,   200,   317,   199,
     319,   199,   319,   199,   317,   201,   307,   200,   312,   201,
       6,     0,     0,    62,    41,   200,   317,   199,   319,   199,
     319,   199,   319,   199,   317,   201,   308,   200,   312,   201,
       6,     0,    62,    42,   200,   317,   199,   319,   201,     6,
       0,    62,    42,   200,   317,   199,   319,   199,   319,   199,
     317,   201,     6,     0,    62,    42,   200,   317,   199,   319,
     199,   319,   199,   319,   199,   317,   201,     6,     0,     0,
      62,    42,   200,   317,   199,   319,   201,   309,   200,   312,
     201,     6,     0,     0,    62,    42,   200,   317,   199,   319,
     199,   319,   199,   317,   201,   310,   200,   312,   201,     6,
       0,     0,    62,    42,   200,   317,   199,   319,   199,   319,
     199,   319,   199,   317,   201,   311,   200,   312,   201,     6,
       0,   313,     0,   312,   313,     0,    70,   200,   325,   199,
     325,   199,   325,   201,     6,     0,    70,   200,   325,   199,
     325,   201,     6,     0,    65,     6,     0,    51,    41,   325,
       7,   317,     6,     0,    51,    41,   325,     7,   317,    54,
      56,   317,     6,     0,    51,    41,   325,     7,   317,    54,
      55,   317,     6,     0,    51,    42,   200,   317,   201,     7,
     325,     6,     0,    48,    42,   200,   317,   201,     7,   325,
       6,     0,    51,    44,   200,   317,   201,     7,   325,     6,
       0,    65,    42,   325,     7,   317,     6,     0,    65,    42,
     325,     6,     0,    67,     6,     0,    68,     6,     0,   119,
       0,   120,     0,   121,     0,   122,     0,   123,     0,   318,
       0,   194,   317,   195,     0,   184,   317,     0,   183,   317,
       0,   189,   317,     0,   317,   184,   317,     0,   317,   183,
     317,     0,   317,   185,   317,     0,   317,   186,   317,     0,
     317,   187,   317,     0,   317,   193,   317,     0,   317,   179,
     317,     0,   317,   181,   317,     0,   317,   180,   317,     0,
     317,   182,   317,     0,   317,   176,   317,     0,   317,   177,
     317,     0,   317,   175,   317,     0,   317,   174,   317,     0,
     317,   173,   317,     8,   317,     0,    12,   194,   317,   195,
       0,    13,   194,   317,   195,     0,    14,   194,   317,   195,
       0,    15,   194,   317,   195,     0,    16,   194,   317,   195,
       0,    17,   194,   317,   195,     0,    18,   194,   317,   195,
       0,    19,   194,   317,   195,     0,    20,   194,   317,   195,
       0,    22,   194,   317,   195,     0,    23,   194,   317,   199,
     317,   195,     0,    24,   194,   317,   195,     0,    25,   194,
     317,   195,     0,    26,   194,   317,   195,     0,    27,   194,
     317,   195,     0,    28,   194,   317,   195,     0,    29,   194,
     317,   195,     0,    30,   194,   317,   199,   317,   195,     0,
      31,   194,   317,   199,   317,   195,     0,    32,   194,   317,
     199,   317,   195,     0,    21,   194,   317,   195,     0,    12,
     196,   317,   197,     0,    13,   196,   317,   197,     0,    14,
     196,   317,   197,     0,    15,   196,   317,   197,     0,    16,
     196,   317,   197,     0,    17,   196,   317,   197,     0,    18,
     196,   317,   197,     0,    19,   196,   317,   197,     0,    20,
     196,   317,   197,     0,    22,   196,   317,   197,     0,    23,
     196,   317,   199,   317,   197,     0,    24,   196,   317,   197,
       0,    25,   196,   317,   197,     0,    26,   196,   317,   197,
       0,    27,   196,   317,   197,     0,    28,   196,   317,   197,
       0,    29,   196,   317,   197,     0,    30,   196,   317,   199,
     317,   197,     0,    31,   196,   317,   199,   317,   197,     0,
      32,   196,   317,   199,   317,   197,     0,    21,   196,   317,
     197,     0,     3,     0,     9,     0,    10,     0,    11,     0,
       4,     0,     4,   196,   317,   197,     0,     4,   294,     0,
       4,   196,   317,   197,   294,     0,     4,   198,     4,     0,
       4,   196,   317,   197,   198,     4,     0,     4,   198,     4,
     294,     0,     4,   196,   317,   197,   198,     4,   294,     0,
     320,     0,   184,   319,     0,   183,   319,     0,   319,   184,
     319,     0,   319,   183,   319,     0,   200,   317,   199,   317,
     199,   317,   199,   317,   199,   317,   201,     0,   200,   317,
     199,   317,   199,   317,   199,   317,   201,     0,   200,   317,
     199,   317,   199,   317,   201,     0,   194,   317,   199,   317,
     199,   317,   195,     0,     0,   194,   322,   195,     0,     5,
       0,   322,   199,     5,     0,     0,   200,   324,   201,     0,
     194,   324,   195,     0,   325,     0,   324,   199,   325,     0,
     317,     0,   326,     0,   200,   327,   201,     0,   184,   200,
     327,   201,     0,   317,     8,   317,     0,   317,     8,   317,
       8,   317,     0,     4,   196,   197,     0,   184,     4,   196,
     197,     0,     4,   196,   200,   327,   201,   197,     0,   184,
       4,   196,   200,   327,   201,   197,     0,   317,     0,   326,
       0,   327,   199,   317,     0,   327,   199,   326,     0,   200,
     317,   199,   317,   199,   317,   199,   317,   201,     0,   200,
     317,   199,   317,   199,   317,   201,     0,     4,     0,     4,
     198,   104,   198,     4,     0,   200,   330,   201,     0,     4,
     196,   317,   197,   198,   105,     0,   328,     0,   330,   199,
     328,     0,     5,     0,    35,   194,   331,   199,   331,   195,
       0,    36,   194,   331,   195,     0,    34,   194,   331,   195,
       0,    34,   194,   331,   199,   327,   195,     0,    34,   194,
       4,   198,     4,   195,     0,    34,   194,     4,   196,   317,
     197,   198,     4,   195,     0
};

#endif

#if YYDEBUG
/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
static const short yyrline[] =
{
       0,   169,   171,   172,   173,   178,   180,   183,   191,   205,
     215,   217,   220,   222,   223,   226,   232,   237,   238,   239,
     242,   246,   249,   255,   260,   266,   274,   279,   283,   289,
     294,   298,   303,   307,   310,   315,   319,   323,   327,   332,
     336,   339,   343,   347,   351,   355,   359,   363,   366,   370,
     373,   377,   380,   387,   391,   397,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,   409,   410,   413,   418,
     433,   438,   444,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,   474,   477,
     480,   484,   484,   496,   499,   503,   503,   515,   518,   522,
     522,   534,   537,   541,   541,   555,   558,   562,   562,   576,
     579,   583,   583,   597,   600,   604,   604,   622,   625,   629,
     629,   647,   650,   654,   654,   672,   675,   679,   679,   698,
     701,   705,   705,   724,   727,   731,   731,   750,   753,   757,
     757,   776,   779,   783,   783,   802,   805,   809,   809,   828,
     831,   835,   835,   864,   867,   871,   871,   900,   903,   907,
     907,   936,   939,   943,   943,   967,   970,   974,   974,   998,
    1001,  1005,  1005,  1029,  1032,  1036,  1036,  1059,  1062,  1066,
    1066,  1089,  1092,  1096,  1096,  1119,  1125,  1132,  1132,  1146,
    1152,  1159,  1159,  1176,  1178,  1179,  1180,  1181,  1184,  1186,
    1189,  1220,  1254,  1301,  1316,  1325,  1340,  1352,  1366,  1389,
    1413,  1425,  1439,  1451,  1465,  1485,  1507,  1519,  1535,  1546,
    1552,  1571,  1585,  1591,  1597,  1616,  1622,  1628,  1644,  1651,
    1657,  1663,  1674,  1685,  1710,  1716,  1735,  1756,  1764,  1770,
    1776,  1785,  1791,  1797,  1807,  1813,  1818,  1823,  1830,  1832,
    1833,  1836,  1841,  1846,  1861,  1876,  1895,  1906,  1915,  1923,
    1927,  1935,  1947,  2022,  2042,  2047,  2051,  2071,  2083,  2093,
    2114,  2135,  2156,  2162,  2167,  2172,  2176,  2184,  2195,  2202,
    2212,  2217,  2222,  2227,  2227,  2237,  2237,  2247,  2247,  2260,
    2265,  2270,  2275,  2275,  2286,  2286,  2298,  2298,  2312,  2316,
    2321,  2348,  2372,  2380,  2399,  2417,  2435,  2457,  2478,  2499,
    2513,  2532,  2537,  2546,  2548,  2549,  2550,  2551,  2554,  2556,
    2557,  2558,  2559,  2560,  2561,  2562,  2563,  2570,  2571,  2572,
    2573,  2574,  2575,  2576,  2577,  2578,  2579,  2580,  2581,  2582,
    2583,  2584,  2585,  2586,  2587,  2588,  2589,  2590,  2591,  2592,
    2593,  2594,  2595,  2596,  2597,  2598,  2599,  2600,  2601,  2603,
    2604,  2605,  2606,  2607,  2608,  2609,  2610,  2611,  2612,  2613,
    2614,  2615,  2616,  2617,  2618,  2619,  2620,  2621,  2622,  2623,
    2628,  2633,  2634,  2635,  2639,  2650,  2667,  2678,  2697,  2713,
    2729,  2745,  2762,  2767,  2771,  2775,  2779,  2785,  2790,  2794,
    2798,  2804,  2808,  2813,  2817,  2822,  2826,  2830,  2836,  2842,
    2849,  2855,  2859,  2863,  2873,  2880,  2891,  2905,  2921,  2941,
    2965,  2971,  2975,  2979,  2990,  2995,  3006,  3011,  3029,  3034,
    3047,  3053,  3059,  3064,  3072,  3085,  3089,  3107,  3121
};
#endif


#if (YYDEBUG) || defined YYERROR_VERBOSE

/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
static const char *const yytname[] =
{
  "$", "error", "$undefined.", "tDOUBLE", "tSTRING", "tBIGSTR", "tEND", 
  "tAFFECT", "tDOTS", "tPi", "tMPI_Rank", "tMPI_Size", "tExp", "tLog", 
  "tLog10", "tSqrt", "tSin", "tAsin", "tCos", "tAcos", "tTan", "tRand", 
  "tAtan", "tAtan2", "tSinh", "tCosh", "tTanh", "tFabs", "tFloor", 
  "tCeil", "tFmod", "tModulo", "tHypot", "tPrintf", "tSprintf", "tStrCat", 
  "tStrPrefix", "tDraw", "tPoint", "tCircle", "tEllipse", "tLine", 
  "tSurface", "tSpline", "tVolume", "tCharacteristic", "tLength", 
  "tParametric", "tElliptic", "tPlane", "tRuled", "tTransfinite", 
  "tComplex", "tPhysical", "tUsing", "tBump", "tProgression", "tPlugin", 
  "tRotate", "tTranslate", "tSymmetry", "tDilate", "tExtrude", 
  "tDuplicata", "tLoop", "tRecombine", "tDelete", "tCoherence", 
  "tIntersect", "tAttractor", "tLayers", "tScalarPoint", "tVectorPoint", 
  "tTensorPoint", "tScalarLine", "tVectorLine", "tTensorLine", 
  "tScalarTriangle", "tVectorTriangle", "tTensorTriangle", 
  "tScalarQuadrangle", "tVectorQuadrangle", "tTensorQuadrangle", 
  "tScalarTetrahedron", "tVectorTetrahedron", "tTensorTetrahedron", 
  "tScalarHexahedron", "tVectorHexahedron", "tTensorHexahedron", 
  "tScalarPrism", "tVectorPrism", "tTensorPrism", "tScalarPyramid", 
  "tVectorPyramid", "tTensorPyramid", "tText2D", "tText3D", "tBSpline", 
  "tBezier", "tNurbs", "tOrder", "tWith", "tBounds", "tKnots", "tColor", 
  "tColorTable", "tFor", "tIn", "tEndFor", "tIf", "tEndIf", "tExit", 
  "tReturn", "tCall", "tFunction", "tMesh", 
  "tB_SPLINE_SURFACE_WITH_KNOTS", "tB_SPLINE_CURVE_WITH_KNOTS", 
  "tCARTESIAN_POINT", "tTRUE", "tFALSE", "tUNSPECIFIED", "tU", "tV", 
  "tEDGE_CURVE", "tVERTEX_POINT", "tORIENTED_EDGE", "tPLANE", 
  "tFACE_OUTER_BOUND", "tEDGE_LOOP", "tADVANCED_FACE", "tVECTOR", 
  "tDIRECTION", "tAXIS2_PLACEMENT_3D", "tISO", "tENDISO", "tENDSEC", 
  "tDATA", "tHEADER", "tFILE_DESCRIPTION", "tFILE_SCHEMA", "tFILE_NAME", 
  "tMANIFOLD_SOLID_BREP", "tCLOSED_SHELL", 
  "tADVANCED_BREP_SHAPE_REPRESENTATION", "tFACE_BOUND", 
  "tCYLINDRICAL_SURFACE", "tCONICAL_SURFACE", "tCIRCLE", "tTRIMMED_CURVE", 
  "tGEOMETRIC_SET", "tCOMPOSITE_CURVE_SEGMENT", "tCONTINUOUS", 
  "tCOMPOSITE_CURVE", "tTOROIDAL_SURFACE", "tPRODUCT_DEFINITION", 
  "tPRODUCT_DEFINITION_SHAPE", "tSHAPE_DEFINITION_REPRESENTATION", 
  "tELLIPSE", "tTrimmed", "tSolid", "tEndSolid", "tVertex", "tFacet", 
  "tNormal", "tOuter", "tLoopSTL", "tEndLoop", "tEndFacet", "tAFFECTPLUS", 
  "tAFFECTMINUS", "tAFFECTTIMES", "tAFFECTDIVIDE", "'?'", "tOR", "tAND", 
  "tEQUAL", "tNOTEQUAL", "tAPPROXEQUAL", "'<'", "tLESSOREQUAL", "'>'", 
  "tGREATEROREQUAL", "'+'", "'-'", "'*'", "'/'", "'%'", "tCROSSPRODUCT", 
  "'!'", "tPLUSPLUS", "tMINUSMINUS", "UNARYPREC", "'^'", "'('", "')'", 
  "'['", "']'", "'.'", "','", "'{'", "'}'", "All", "SignedDouble", 
  "STLFormatItem", "StepFormatItems", "StepFormatItem", "StepSpecial", 
  "StepHeaderItem", "StepDataItem", "GeomFormatList", "GeomFormat", 
  "Printf", "View", "Views", "ScalarPointValues", "ScalarPoint", "@1", 
  "VectorPointValues", "VectorPoint", "@2", "TensorPointValues", 
  "TensorPoint", "@3", "ScalarLineValues", "ScalarLine", "@4", 
  "VectorLineValues", "VectorLine", "@5", "TensorLineValues", 
  "TensorLine", "@6", "ScalarTriangleValues", "ScalarTriangle", "@7", 
  "VectorTriangleValues", "VectorTriangle", "@8", "TensorTriangleValues", 
  "TensorTriangle", "@9", "ScalarQuadrangleValues", "ScalarQuadrangle", 
  "@10", "VectorQuadrangleValues", "VectorQuadrangle", "@11", 
  "TensorQuadrangleValues", "TensorQuadrangle", "@12", 
  "ScalarTetrahedronValues", "ScalarTetrahedron", "@13", 
  "VectorTetrahedronValues", "VectorTetrahedron", "@14", 
  "TensorTetrahedronValues", "TensorTetrahedron", "@15", 
  "ScalarHexahedronValues", "ScalarHexahedron", "@16", 
  "VectorHexahedronValues", "VectorHexahedron", "@17", 
  "TensorHexahedronValues", "TensorHexahedron", "@18", 
  "ScalarPrismValues", "ScalarPrism", "@19", "VectorPrismValues", 
  "VectorPrism", "@20", "TensorPrismValues", "TensorPrism", "@21", 
  "ScalarPyramidValues", "ScalarPyramid", "@22", "VectorPyramidValues", 
  "VectorPyramid", "@23", "TensorPyramidValues", "TensorPyramid", "@24", 
  "Text2DValues", "Text2D", "@25", "Text3DValues", "Text3D", "@26", 
  "NumericAffectation", "NumericIncrement", "Affectation", "Shape", 
  "Transform", "MultipleShape", "ListOfShapes", "Duplicata", "Delete", 
  "Colorify", "Command", "Loop", "Extrude", "@27", "@28", "@29", "@30", 
  "@31", "@32", "ExtrudeParameters", "ExtrudeParameter", "Transfini", 
  "Coherence", "BoolExpr", "FExpr", "FExpr_Single", "VExpr", 
  "VExpr_Single", "ListOfStrings", "RecursiveListOfStrings", 
  "ListOfListOfDouble", "RecursiveListOfListOfDouble", "ListOfDouble", 
  "FExpr_Multi", "RecursiveListOfDouble", "ColorExpr", "ListOfColor", 
  "RecursiveListOfColor", "StringExpr", 0
};
#endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
static const short yyr1[] =
{
       0,   202,   202,   202,   202,   203,   203,   204,   204,   204,
     205,   205,   206,   206,   206,   207,   207,   207,   207,   207,
     208,   208,   208,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   209,   209,   209,   209,   209,   209,   209,
     209,   209,   209,   210,   210,   211,   211,   211,   211,   211,
     211,   211,   211,   211,   211,   211,   211,   211,   212,   212,
     213,   213,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   214,
     214,   214,   214,   214,   214,   214,   214,   214,   214,   215,
     215,   217,   216,   218,   218,   220,   219,   221,   221,   223,
     222,   224,   224,   226,   225,   227,   227,   229,   228,   230,
     230,   232,   231,   233,   233,   235,   234,   236,   236,   238,
     237,   239,   239,   241,   240,   242,   242,   244,   243,   245,
     245,   247,   246,   248,   248,   250,   249,   251,   251,   253,
     252,   254,   254,   256,   255,   257,   257,   259,   258,   260,
     260,   262,   261,   263,   263,   265,   264,   266,   266,   268,
     267,   269,   269,   271,   270,   272,   272,   274,   273,   275,
     275,   277,   276,   278,   278,   280,   279,   281,   281,   283,
     282,   284,   284,   286,   285,   287,   287,   289,   288,   290,
     290,   292,   291,   293,   293,   293,   293,   293,   294,   294,
     295,   295,   295,   295,   295,   295,   295,   295,   295,   295,
     295,   295,   295,   295,   295,   295,   295,   295,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   296,   296,   296,   296,   296,   296,
     296,   296,   296,   296,   297,   297,   297,   297,   298,   298,
     298,   299,   299,   299,   299,   299,   300,   300,   301,   301,
     301,   302,   303,   303,   303,   303,   303,   304,   304,   304,
     304,   304,   304,   304,   304,   304,   304,   305,   305,   305,
     305,   305,   305,   306,   305,   307,   305,   308,   305,   305,
     305,   305,   309,   305,   310,   305,   311,   305,   312,   312,
     313,   313,   313,   314,   314,   314,   314,   314,   314,   314,
     314,   315,   315,   316,   316,   316,   316,   316,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     317,   317,   317,   317,   317,   317,   317,   317,   317,   317,
     318,   318,   318,   318,   318,   318,   318,   318,   318,   318,
     318,   318,   319,   319,   319,   319,   319,   320,   320,   320,
     320,   321,   321,   322,   322,   323,   323,   323,   324,   324,
     325,   325,   325,   325,   326,   326,   326,   326,   326,   326,
     327,   327,   327,   327,   328,   328,   328,   328,   329,   329,
     330,   330,   331,   331,   331,   331,   331,   331,   331
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
static const short yyr2[] =
{
       0,     1,     1,     1,     2,     1,     2,     1,    21,     1,
       0,     2,     1,     1,     1,     2,     2,     2,     2,     2,
       7,     5,    17,     9,    23,    31,    15,    11,    11,    15,
       9,    13,     9,    11,    13,     9,     9,    11,     9,    11,
       9,    11,    13,    13,    11,    13,    17,     9,    11,    11,
      13,    11,     9,     0,     2,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     5,     7,
       6,     8,     0,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     1,
       3,     0,    13,     1,     3,     0,    13,     1,     3,     0,
      13,     1,     3,     0,    19,     1,     3,     0,    19,     1,
       3,     0,    19,     1,     3,     0,    25,     1,     3,     0,
      25,     1,     3,     0,    25,     1,     3,     0,    31,     1,
       3,     0,    31,     1,     3,     0,    31,     1,     3,     0,
      31,     1,     3,     0,    31,     1,     3,     0,    31,     1,
       3,     0,    55,     1,     3,     0,    55,     1,     3,     0,
      55,     1,     3,     0,    43,     1,     3,     0,    43,     1,
       3,     0,    43,     1,     3,     0,    37,     1,     3,     0,
      37,     1,     3,     0,    37,     1,     3,     0,    13,     1,
       3,     0,    15,     1,     1,     1,     1,     1,     1,     1,
       4,     7,     9,     6,     3,     6,     6,     9,     6,     9,
       5,     8,     8,    11,     6,     9,     9,     9,     7,     8,
      12,     6,     7,     7,    12,     7,     7,     9,    17,     8,
       8,     7,     7,    11,     8,    12,     8,    22,    20,     8,
       8,     8,     7,     8,     5,    11,     5,     9,     1,     1,
       1,     0,     2,     6,     6,     6,     4,     6,     4,     6,
       3,     5,     3,     3,     7,     2,     2,     6,     8,     8,
      10,     1,     2,     1,     3,     4,     1,     8,    12,    14,
       8,    12,    14,     0,    12,     0,    16,     0,    18,     8,
      12,    14,     0,    12,     0,    16,     0,    18,     1,     2,
       9,     7,     2,     6,     9,     9,     8,     8,     8,     6,
       4,     2,     2,     1,     1,     1,     1,     1,     1,     3,
       2,     2,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     5,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     6,     4,
       4,     4,     4,     4,     4,     6,     6,     6,     4,     4,
       4,     4,     4,     4,     4,     4,     4,     4,     4,     6,
       4,     4,     4,     4,     4,     4,     6,     6,     6,     4,
       1,     1,     1,     1,     1,     4,     2,     5,     3,     6,
       4,     7,     1,     2,     2,     3,     3,    11,     9,     7,
       7,     0,     3,     1,     3,     0,     3,     3,     1,     3,
       1,     1,     3,     4,     3,     5,     3,     4,     6,     7,
       1,     1,     3,     3,     9,     7,     1,     5,     3,     6,
       1,     3,     1,     6,     4,     4,     6,     6,     9
};

/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
   doesn't specify something else to do.  Zero means the default is an
   error. */
static const short yydefact[] =
{
       0,     0,     7,     9,     0,     2,     1,     3,     4,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    11,
      12,    14,    13,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   281,     0,
     286,     0,   283,     0,     0,     0,    54,    56,    55,    57,
      58,    59,    60,    61,    62,    67,    66,    63,    64,    65,
       5,     0,     0,     0,    15,    16,    18,    17,    19,   411,
     411,     0,   390,   394,   442,   203,   391,   392,   393,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   204,   205,   206,   207,     0,     0,     0,
     208,   209,     0,     0,     0,     0,     0,     0,   328,     0,
       0,   276,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     402,     0,     0,     0,     0,     0,     0,   261,     0,     0,
       0,   261,   321,   322,     0,     0,     0,     0,     0,     0,
     436,     0,     0,     0,     0,     0,   275,     0,   282,     0,
       6,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   396,     0,
      72,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   331,   330,   332,     0,
       0,     0,     0,     0,     0,     0,     0,   214,   273,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   272,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   394,     0,     0,   420,     0,   421,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   404,   403,     0,     0,     0,     0,
     261,   261,     0,     0,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   261,     0,     0,     0,   284,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   413,     0,
       0,     0,     0,     0,   398,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     442,     0,     0,     0,   329,     0,     0,   430,   431,     0,
       0,   203,     0,     0,     0,     0,   210,     0,   346,   345,
     343,   344,   339,   341,   340,   342,   334,   333,   335,   336,
     337,   338,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   394,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   406,   405,   260,     0,   259,   258,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   266,
     262,   320,     0,     0,   268,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   285,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     412,     0,     0,    21,     0,   395,   400,    72,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    97,
      98,   348,   369,   349,   370,   350,   371,   351,   372,   352,
     373,   353,   374,   354,   375,   355,   376,   356,   377,   368,
     389,   357,   378,     0,     0,   359,   380,   360,   381,   361,
     382,   362,   383,   363,   384,   364,   385,     0,     0,     0,
       0,     0,     0,     0,     0,   445,     0,     0,   444,     0,
       0,     0,     0,     0,     0,     0,     0,   220,     0,     0,
       0,     0,     0,    68,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   426,     0,     0,     0,   422,   424,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   254,   256,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   271,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   414,     0,   411,     0,   397,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    70,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   213,   432,   433,
       0,     0,     0,     0,     0,   215,   216,   218,     0,     0,
     440,     0,   224,   347,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   427,     0,   423,     0,   231,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     267,     0,     0,     0,   319,   269,     0,     0,     0,     0,
       0,   415,     0,   437,     0,     0,     0,   277,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   323,   324,   325,   326,   327,     0,     0,
       0,     0,     0,     0,     0,    20,     0,   399,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   358,   379,   365,   386,   366,
     387,   367,   388,     0,   447,   446,   443,     0,   203,     0,
       0,     0,     0,   211,     0,     0,     0,   438,    69,   228,
     235,     0,   236,     0,   232,     0,   233,   252,     0,     0,
     425,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   274,     0,     0,     0,     0,   261,
       0,     0,     0,   293,     0,   302,     0,     0,     0,     0,
       0,   241,   242,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   411,   401,    71,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   221,     0,     0,   222,
       0,   441,     0,   240,   250,   428,     0,     0,   317,   244,
     246,     0,     0,   316,   318,   251,   229,   239,   249,   253,
       0,     0,     0,   410,     0,   409,     0,     0,   287,     0,
     290,     0,     0,   299,     0,   263,   264,   265,     0,     0,
     415,     0,   418,     0,     0,     0,     0,   435,     0,   279,
     278,     0,     0,     0,     0,     0,    23,     0,    32,     0,
      36,     0,    30,     0,     0,    35,     0,    40,    38,     0,
       0,     0,     0,     0,     0,    47,     0,     0,     0,     0,
       0,    52,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   212,   217,   219,     0,   225,     0,   237,   429,     0,
     315,   314,   226,   227,   261,     0,   257,     0,     0,     0,
       0,     0,     0,     0,     0,   417,     0,   416,     0,     0,
       0,     0,     0,     0,     0,   415,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   448,     0,   439,     0,     0,     0,   408,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   308,
       0,     0,     0,     0,     0,     0,   419,     0,     0,   434,
     280,     0,     0,    37,     0,     0,     0,     0,    27,     0,
      33,     0,    39,    28,    41,     0,    44,     0,    48,    49,
       0,     0,    51,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   223,     0,   255,     0,     0,     0,     0,   295,     0,
     312,     0,     0,   309,   304,     0,     0,     0,     0,     0,
       0,   243,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   101,   105,   109,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     197,     0,     0,   407,   288,     0,   291,     0,     0,     0,
     294,   300,     0,     0,   303,   230,   234,     0,     0,   245,
       0,     0,     0,     0,     0,    31,    34,    42,     0,    43,
      50,    45,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   297,     0,     0,   306,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     201,     0,   289,     0,   292,     0,     0,     0,   301,     0,
       0,     0,     0,     0,     0,    26,    29,     0,     0,     0,
      99,     0,   103,     0,   107,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   195,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   296,     0,     0,   311,   305,     0,
       0,     0,     0,     0,     0,    46,    22,   100,   102,   104,
     106,   108,   110,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   196,   198,     0,   199,   238,     0,
       0,     0,     0,     0,     0,     0,     0,   113,   117,   121,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     298,   310,   307,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   200,
     202,     0,     0,     8,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   248,     0,
       0,     0,   111,     0,   115,     0,   119,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   247,     0,    24,   112,   114,   116,   118,   120,
     122,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     125,   129,   133,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   123,     0,
     127,     0,   131,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   124,   126,   128,   130,   132,   134,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   137,   141,   145,   149,   153,   157,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    25,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     135,     0,   139,     0,   143,     0,   147,     0,   151,     0,
     155,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   136,   138,   140,   142,   144,   146,   148,   150,   152,
     154,   156,   158,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   185,   189,
     193,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   183,     0,   187,     0,
     191,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   184,
     186,   188,   190,   192,   194,     0,     0,     0,   173,   177,
     181,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   171,     0,   175,
       0,   179,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   172,   174,   176,   178,   180,   182,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   161,   165,
     169,     0,     0,     0,     0,     0,     0,     0,   159,     0,
     163,     0,   167,     0,     0,     0,     0,     0,     0,   160,
     162,   164,   166,   168,   170,     0,     0,     0
};

static const short yydefgoto[] =
{
    2255,    82,     5,     6,    19,    20,    21,    22,     7,    66,
      67,    68,   416,  1579,   625,  1493,  1581,   626,  1494,  1583,
     627,  1495,  1791,   628,  1738,  1793,   629,  1739,  1795,   630,
    1740,  1927,   631,  1889,  1929,   632,  1890,  1931,   633,  1891,
    2039,   634,  2009,  2041,   635,  2010,  2043,   636,  2011,  2045,
     637,  2012,  2047,   638,  2013,  2049,   639,  2014,  2237,   640,
    2231,  2239,   641,  2232,  2241,   642,  2233,  2186,   643,  2174,
    2188,   644,  2175,  2190,   645,  2176,  2135,   646,  2117,  2137,
     647,  2118,  2139,   648,  2119,  1606,   649,  1517,  1696,   650,
    1608,   135,   238,    69,   540,   526,   527,   528,   529,    73,
      74,    75,    76,    77,  1161,  1467,  1565,  1164,  1472,  1569,
    1338,  1339,    78,    79,   948,   327,   138,   344,   170,   233,
     409,  1056,  1171,  1172,   329,   469,   192,   711,   861,   139
};

static const short yypact[] =
{
    2658,    63,-32768,-32768,  -129,-32768,   324,  2803,-32768,    17,
     109,   116,   124,   132,   211,   265,   -53,    71,   117,-32768,
  -32768,-32768,-32768,  2274,   144,   343,   158,   188,   201,   -32,
     346,   222,   227,   393,   251,   400,   406,   427,   329,   407,
     365,   283,   287,   -44,   -44,   297,   113,     4,   456,     3,
     503,   522,   259,   337,   378,   -19,     6,    15,-32768,   410,
  -32768,   601,-32768,   506,   514,   481,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,   610,    17,  2910,-32768,-32768,-32768,-32768,-32768,   444,
     444,   643,-32768,   295,     7,-32768,-32768,-32768,-32768,   202,
     250,   258,   261,   272,   282,   286,   300,   319,   363,   364,
     382,   409,   453,   458,   459,   462,   463,   466,   467,   480,
     477,   488,   490,-32768,-32768,-32768,-32768,  2375,  2375,  2375,
  -32768,-32768,  2375,   570,    27,  2375,   669,   435,-32768,   672,
     682,-32768,  2375,  2375,  2375,   494,  2375,   534,  2375,  2375,
    1177,  2375,   537,   540,   554,  1177,   565,   569,   563,   582,
     586,   589,   617,   695,   -44,   -44,   -44,  2375,  2375,   -76,
  -32768,   -26,   -44,   642,   662,   663,   621,-32768,  1177,   638,
     858,-32768,-32768,-32768,  1177,  1177,  2375,  2375,   -58,  2375,
     667,  2375,   666,   760,  2375,  2375,-32768,   862,-32768,   675,
  -32768,    17,   679,   680,   681,   683,   684,   685,   686,   687,
     688,   689,   690,   692,   693,   694,   696,   700,   701,   702,
     703,   704,   705,   721,   722,   723,   724,   725,   728,   729,
     730,   731,   871,   732,   726,   735,  2375,   885,-32768,   -44,
  -32768,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,    42,    37,    37,   733,   733,   733, 10517,
     920,  2405,  2556,   135,   738,   921,   450,-32768,-32768,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,-32768,  -134, 10540, 10563, 10586,  2375,
   10609,  2375, 10632, 10655,   316,  1463,  2405,   664,   922,-32768,
   10678,  2375,  2375,  2375,   923,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,   767,   156,-32768,-32768,  3336,  3357,   -44,   -44,
     581,   581,   173,  2375,  2375,  2375,  2375,   948,   141,  2375,
  -32768,  1979,   956,   957, 10701, 10724,   864,  2375, 10747,   863,
    3378,-32768,   768,  2052, 10770,-32768,  2375,   804,   965,   966,
     967,   968,   969,   970,   972,   973,   974,   975,   976,   978,
     979,   980,   989,   991,   994,  1000,  1001,  1002,  1003,  1004,
    1005,   866,  1009,  1011,  1014,  1015,  1018,  1017,-32768,   -30,
    1019,  1023,  1020,  9867,   138,   151,  2847, 10793,  9892, 10816,
    9917, 10839,  9942, 10862,  9967, 10885,  9992, 10908, 10017, 10931,
   10042, 10954, 10067, 10977, 10092, 11000, 10117, 11023, 10142,  3399,
    3420, 11046, 10167, 11069, 10192, 11092, 10217, 11115, 10242, 11138,
   10267, 11161, 10292,  3441,  3462,  3483,  3504,  3525,  3546,   483,
  -32768,   -17,   824,   835,-32768,  1177,  2495,   664,-32768,   -22,
     152,    37,  2375,  1025,  1028,     8,-32768,  2078,   -95,   243,
     384,   384,   318,   318,   318,   318,   175,   175,   733,   733,
     733,   733,  1027,  2405,  1029,  1030,  1032, 11184,  1033, 11207,
    1035,  1041,   929,   331,  2405,     1,  2375,  2375,  1042,  1268,
   11230, 11253,  2375,  2702,  2939, 11276, 11299, 11322, 11345, 11368,
     836,   -44,  2375,  2375,-32768,-32768,-32768,   834,  2952,-32768,
     843,  2375,  3567,  3588,  3609, 10317,  -144,   -48,   -51,-32768,
  -32768,-32768,  2375, 10342,-32768,   850,   852,  1046,  1047,   861,
   11391,  1049,   859,  2375,  2533,  2375,  2375,-32768, 11414,   895,
     865,   867,   868,   869,   872,   873,   900,   901,   902,   903,
     904,   905,   906,   907,   909,   910,   911,   912,   916,   917,
     918,   925,   926,   928,   931,   938,   955,   983,   984,   985,
  -32768,  1057,   875,-32768,   986,   -97,-32768,-32768,   927,   934,
     953,  1021,  1031,  1038,  1039,  1044,  1048,  1050,  1051,  1053,
    1054,  1055,  1056,  1058,  1059,  1060,  1062,  1063,  1064,  1065,
    1066,  1067,  1068,  1070,  1113,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  2375,  2375,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  1116,-32768,  2405,    37,-32768,  1220,
    2405,  1069,    29,  2375,  1221,  1230,   639,-32768,  1115,  1045,
       6,  1237,  2375,-32768,    75,   -44,  1177,  1177,  1244,  1177,
    1258,  1177,  1177,-32768,  2405,  1147,   484,-32768,  2355,   727,
    1072,  1260,  1262,  1263,    12,  1292,  1293,  1296,  1298,  1302,
    1303,  1304,  1308,   209,  3630,  3651,-32768,-32768,  2962,   -44,
     -44,   -44,  1322,  2405,  2405,  2405,   959,  1323,  2375,  2375,
    1177,  1177,  2375,  1325,  1177,  1330,  3672,-32768,  2430,   361,
    1331,  1175,  1337,  2375,  2375,   -44,  1339,  1340,   878,  1342,
    1343,  1177,  1177,  1345,   -44,  1346,  1347,  1177,  1177,  1348,
    1349,  1350,  1351,  1352,  1177,   430,  1177,  1353,  1354,  1357,
    1355,  1360,-32768,  1358,   444,  1361,-32768,  2892,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,-32768, 11437, 10367, 11460, 10392, 11483,
   10417, 11506, 10442, 10467,  1162,   100,  1172,-32768,   664,-32768,
     122,   176,  1170,  1362,  1037,-32768,-32768,-32768,     6,  2375,
  -32768,   492,-32768, 12334,  1364,    32,    30,  1366,  1177,  1367,
    1177,  1368,  1369,   495,-32768,  2405,-32768,  2375,-32768,  2375,
    1177,  1177,  1177,-32768,   309,  1177,  1177,  1177,  1177,  1177,
    1177,  1177,   368,  2375,  2375,  2375,  1176,  -131,   -88,   -84,
  -32768,   496,   499,   504,-32768,-32768,  3693,  3714,  1372,  1373,
   11529,  -143,  1277,-32768,  2375,  2375,  2375,-32768,  1181,    17,
    1183,  3735,  3756,  -120,  1184,  1190,  1188,  1193,  1191,  1196,
    1195,  1197,   -81,  1198,  1203,  1205,  1202,  1204,  1206,  1207,
    1208,  1209,  1214,-32768,-32768,-32768,-32768,-32768,  1211,  1212,
    1213,  1215,  1216,  1218,  1238,-32768,  1240,   138,  1396,  3777,
    3798,  3819,  3840,  3861,  3882,  3903,  3924,  3945,  3966,  3987,
    4008,  4029,  4050,  4071,  4092,  4113,  4134,  4155,  4176,  4197,
    4218,  4239,  4260,  4281,  4302,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,  1242,-32768,-32768,-32768,  1177,    37,  2375,
    1398,  1452,     8,-32768,  1451, 10492,     6,-32768,-32768,-32768,
  -32768,   -44,-32768,  1453,-32768,  1454,-32768,-32768,  1261,   505,
   12334,  4323,  1456,  1457,  1458,  2375,  2375,  1459,  1462,  1464,
    1490,  1491,  1492,  1493,-32768,  2308,  2985, 11552,  2464,   581,
     -44,  1494,   -44,  1495,   -44,  1496,  1497,  1498,  1499,  2375,
    2375,-32768,-32768,  1500,  1177,  1177,  1403,  1177,  2629,   204,
   11575,  2375,    17,  1505,  2375,  1177,  1503,  1507,  1534,  1326,
    1535,   430,  1565,  1536,  2375,  1575,  1579,  1577,  1581,  1582,
     430,  2375,  2375,  2375,  1177,  1583,  1585,   430,  2375,  1587,
    1588,  1586,  2375,   444,-32768,-32768,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  1589,  1590,  1592,  1393,-32768,  1594,  1593,-32768,
    1397,-32768,    77,-32768,-32768,-32768,  1406,  2375,-32768,-32768,
  -32768,  1591,  1647,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
    1730,  1599,  1427,-32768,  2375,-32768,  1428,   216,-32768,   218,
  -32768,  1430,   248,-32768,  1431,-32768,-32768,-32768,  4344,  4365,
    -143,   142,-32768,   508,  1432,  1537,  2375,-32768,  2375,-32768,
  -32768,  4386,    17,  1438,  4407,  1435,-32768,  1436,-32768,  1439,
  -32768,  1444,-32768,  1441, 11598,-32768,  1443,-32768,-32768,  1448,
    1449, 11621,  4428, 11644,  1446,-32768,  1455,  1460,  4449,  1450,
    1461,-32768,  4470,  1466,  4491,  4512,  4533,  4554,  4575,  4596,
    4617,  4638,  4659,  4680,  4701,  4722,  4743,  4764,  4785,  4806,
    4827,  4848,  4869,  4890,  4911,  4932,  4953,  4974,  4995,  5016,
    1465,-32768,-32768,-32768,     6,-32768,  1543,-32768,-32768,  5037,
  -32768,-32768,-32768,-32768,   581,  2896,-32768,  1533,  1533,   -10,
    1533,   -10,  2375,  2375,  1548,-32768,  1177,-32768,  1177,  2375,
    3014,  3037,  1177,  1504,  1648,  -143,   430,  1655,  2375,  1653,
     430,  1656,  1658,  1661,  1662,  1663,  2375,  1666,  1177,  1667,
    1668,  2375,  1672,  1670,  2375,  1673,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,-32768,  1671,-32768,  1676,  1481,  2375,-32768,  1533,
    1533,  2375,  3060,   254,  3083,   289,  1677,  1484,   -41,-32768,
    3106,   291,   -40,  3135,  3158,  1485,-32768,  1487,  1779,-32768,
  -32768,  1506,    17,-32768,  1509,  1510,  1511,  5058,-32768,  1516,
  -32768,  1517,-32768,-32768,-32768, 11667,-32768,  1514,-32768,-32768,
   11690,  1519,-32768, 11713,  1520, 11736, 11759, 11782,  5079,  5100,
    5121,  5142,  5163,  5184,  5205,  5226,  5247,  5268,  5289,  5310,
    5331,  5352,  5373,  5394,  5415,  5436,  5457,  5478,  5499, 11805,
    5520,-32768,  1521,-32768,  3187,  1140,  1699,  2375,  1700,  2375,
  -32768,  1177,  1709,-32768,  1712,  2375,  1715,  1717,  1718,  1177,
    1177,-32768,  1719,    17,   430,   430,   430,   430,  1720,  1722,
    1723,   430,  1724,  1725,  1726,  1729,-32768,-32768,-32768,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
  -32768,  2375,  1732,-32768,-32768,  3221,-32768,  1539,  3244,  1541,
  -32768,-32768,  1542,  3267,-32768,-32768,-32768,  1570,  1540,-32768,
      17,  1580,  1584,  1595,  1596,-32768,-32768,-32768,  1597,-32768,
  -32768,-32768,  1601,  1598,  1619,  1625,  5541,  5562,  5583,  5604,
    5625,  5646,  5667,  5688,  5709,  5730,  5751,  5772,  5793,  5814,
    5835,  5856,  5877,  5898,  5919,  5940,  5961,  1635, 11828,  1637,
    1774,   -10,  1775,  1177,   -10,  1776,  1177,  1686,  1573,   430,
     430,  1781,  1782,   430,  1784,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,    37,
  -32768,  1787,-32768,   -31,-32768,  1638,   509,   -25,-32768,  1639,
    1636,  1641,    17,  1643,  1644,-32768,-32768,  1649,  1650,   512,
   12334,   513, 12334,   517, 12334,  5982,  6003,  6024,  6045,  6066,
    6087,  6108,  6129,  6150,  6171,  6192,  6213,  6234,  6255,  6276,
    6297,  6318,  6339,  6360,  6381,  6402,   518,-32768,  1646,  1664,
    1788,   -10,  1177,  1841,  1842,   -10,  1693,  2375,    17,   430,
    1177,  1843,  1860,  2375,  1861,  2375,  1862,  2375,  1863,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
      37,  1864,    37,  1865,-32768,   -21,  1674,-32768,-32768,   -11,
    1678,  6423,    17,  1675,  1680,-32768,-32768, 12334,-32768, 12334,
  -32768, 12334,-32768, 11851, 11874, 11897,  6444,  6465,  6486,  6507,
    6528,  6549,  6570,  6591,  6612,  6633,  6654,  6675,  6696,  6717,
    6738,  6759,  6780,  6801,-32768,-32768,   524,-32768,-32768,  1866,
    1867,  1870,  2375,  2375,  1710,   430,  1177,-32768,-32768,-32768,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,    37,  1874,
  -32768,-32768,-32768,  6822,  3290,  1713,  1683,  1684,  1708,  1721,
    1727,  6843,  6864,  6885,  6906,  6927,  6948,  6969,  6990,  7011,
    7032,  7053,  7074,  7095,  7116,  7137,  7158,  7179,  7200,-32768,
  -32768,  2375,  1878,-32768,  1177,   430,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  3313,-32768,  1748,
    1734,   525, 12334,   528, 12334,   539, 12334,  7221,  7242,  7263,
    7284,  7305,  7326,  7347,  7368,  7389,  7410,  7431,  7452,  7473,
    7494,  7515,  7536,  7557,  7578,  1912,  1177,  1913,  2375,  1914,
    2375,  1916,  2375,  1918,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,-32768,  1749,-32768, 12334,-32768, 12334,-32768, 12334,
  -32768, 11920, 11943, 11966,  7599,  7620,  7641,  7662,  7683,  7704,
    7725,  7746,  7767,  7788,  7809,  7830,  7851,  7872,  7893,  1177,
  -32768,-32768,-32768,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  1750,  1731,
    1757,  1767,  7914,  7935,  7956,  7977,  7998,  8019,  8040,  8061,
    8082,  8103,  8124,  8145,  8166,  8187,  8208,  1177,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  1751,   543, 12334,   544,
   12334,   548, 12334,  8229,  8250,  8271,  8292,  8313,  8334,  8355,
    8376,  8397,  8418,  8439,  8460,  8481,  8502,  8523,   430,  2375,
    1919,  2375,  1962,  2375,  1963,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    1778, 12334,-32768, 12334,-32768, 12334,-32768, 11989, 12012, 12035,
   12058, 12081, 12104,  8544,  8565,  8586,  8607,  8628,  8649,  8670,
    8691,  8712,  1964,-32768,-32768,-32768,-32768,-32768,-32768,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,-32768,  1771,
    1785,  1786,  1789,  1790,  1791,  8733,  8754,  8775,  8796,  8817,
    8838,  8859,  8880,  8901,  2375,  2375,  2375,  2375,  2375,  2375,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,   557,
   12334,   561, 12334,   562, 12334,   567, 12334,   572, 12334,   573,
   12334,  8922,  8943,  8964,  8985,  9006,  9027,  9048,  9069,  9090,
    2375,  1968,  2375,  1969,  2375,  1981,  2375,  1982,  2375,  1986,
    2375,  1987,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,
    2375, 12334,-32768, 12334,-32768, 12334,-32768, 12334,-32768, 12334,
  -32768, 12334,-32768,  9111,  9132,  9153,  9174,  9195,  9216, 12127,
   12150, 12173,  2375,  2375,  2375,  2375,  2375,  2375,-32768,-32768,
  -32768,  9237,  9258,  9279,  9300,  9321,  9342,  1794,  1795,  1796,
    2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  9363,
    9384,  9405,  9426,  9447,  9468,   576, 12334,   580, 12334,   583,
   12334,  2375,  2375,  2375,  2375,  2375,  2375,  2375,  1991,  2375,
    1992,  2375,  1993,  9489,  9510,  9531, 12196, 12219, 12242, 12334,
  -32768, 12334,-32768, 12334,-32768,  2375,  2375,  2375,-32768,-32768,
  -32768,  9552,  9573,  9594,  1800,  1816,  1825,  2375,  2375,  2375,
    2375,  2375,  2375,  9615,  9636,  9657,   628, 12334,   629, 12334,
     634, 12334,  2375,  2375,  2375,  2375,  2021,  2375,  2024,  2375,
    2027,  9678,  9699,  9720, 12334,-32768, 12334,-32768, 12334,-32768,
    2375,  2375,  2375,  9741,  9762,  9783,  2375,  2375,  2375,  9804,
    9825,  9846,  2375,  2375,  2375, 12265, 12288, 12311,-32768,-32768,
  -32768,  1834,  1835,  1836,  2375,  2375,  2375,   654, 12334,   659,
   12334,   660, 12334,  2375,  2032,  2375,  2034,  2375,  2036, 12334,
  -32768, 12334,-32768, 12334,-32768,  2044,  2046,-32768
};

static const short yypgoto[] =
{
  -32768,   -34,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,  1467,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
  -32768,  -289,   -20,-32768,  2051,  2054,  -349,  -160,  2055,-32768,
  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   -1252, -1301,-32768,-32768, -1013,   -23,-32768,   -29,-32768,   -89,
  -32768, -1148,  1008,  1486,  -229,  -320,  -705,  1071,-32768,  -257
};


#define	YYLAST		12527


static const short yytable[] =
{
     137,   234,   530,   136,   472,   860,   505,   179,   176,  1342,
     190,   239,   709,   147,   169,   171,   145,   357,   883,   193,
      80,   361,  1264,   188,  1336,  1336,   461,   462,   463,  1337,
    1337,   293,   145,   851,  1336,     9,  1010,  1413,  1009,  1337,
    1336,  1413,   460,   366,  1336,  1337,   459,   460,   201,  1337,
     142,  1054,   348,   349,  1336,  1336,   753,  1055,  1191,  1337,
    1337,   492,   468,   348,   349,   493,   884,  1200,  1040,     8,
    1041,   120,   121,   122,  1207,  1066,   120,   121,   122,  1011,
     301,   302,   303,  1247,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   130,   131,   348,   349,   468,   313,   348,
     349,   805,   348,   349,   286,   287,   288,   348,   349,   289,
     292,  1042,   296,  1043,  1075,  1044,    83,  1045,   180,   316,
     317,   318,    84,   320,   350,   322,   323,  1354,   330,    95,
      85,   294,   295,   852,   853,   343,   367,   345,    86,   165,
     166,    89,   471,   352,   346,   347,   146,   541,   542,   755,
     167,   173,   754,  1004,   174,   175,   168,   348,   349,    95,
    1412,  1416,   146,   364,   365,   590,   368,   377,   370,   591,
    1610,   373,   374,   714,   351,   189,  1614,   700,   695,   701,
    1699,   703,   696,   998,   726,   299,   300,   301,   302,   303,
    1701,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     700,    81,   727,   181,   177,   313,   191,   240,   710,   194,
     415,   554,  1178,   413,   705,   348,   349,    87,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     348,   349,  1413,  1355,   468,    90,  1413,  1359,   467,  1563,
     864,    88,  1567,   473,   700,   468,   477,   478,   479,   480,
     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,
     491,   123,   124,   125,   126,   995,   497,   184,   499,   700,
     185,  1131,   287,   467,   123,   124,   125,   126,   509,   510,
     511,    91,   513,   514,   515,   516,   517,   518,   519,   524,
     525,   123,   124,   125,   126,   130,   131,    10,   130,   131,
     532,   533,   534,   535,   348,   349,   543,  1265,   140,   348,
     349,  1266,   130,   131,   550,   123,   124,   125,   126,   141,
     702,   597,   142,   558,  1413,   521,   348,   349,  1413,  1655,
     310,   311,   312,  1659,  1025,  1026,   130,   131,   313,   916,
     155,   156,   531,   157,  1034,  1035,   845,   299,   300,   301,
     302,   303,   143,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   348,   349,   596,   144,   241,   313,   242,   348,
     349,   348,   349,   159,   873,  1179,   160,   161,   893,   162,
     147,  1481,  1482,  1483,  1484,  1257,   148,  1258,  1488,   302,
     303,   149,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   348,   349,   901,   902,   903,   313,   348,   349,   150,
     846,   298,   152,   287,   243,   151,   244,  1260,   153,   706,
     704,   158,   245,  1407,   246,   247,   476,   248,    11,    12,
      13,    14,    15,    16,    17,    18,   249,   468,   250,   154,
     467,   849,   348,   349,   348,   349,   251,   163,   252,   413,
     253,   467,   254,   728,   729,   130,   131,   164,  1409,   734,
    1415,   236,   743,   237,   255,   468,   256,   172,   178,   744,
     745,   308,   309,   310,   311,   312,   130,   131,   748,   182,
     197,   313,   502,   257,   237,   258,  1573,  1574,   198,   756,
    1577,   130,   131,   199,   468,   468,   468,   725,   183,   237,
     766,   186,   768,   769,   299,   300,   301,   302,   303,  1323,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   943,
     944,   945,   946,   947,   313,  1019,   917,   259,   261,   260,
     262,   997,   999,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   187,    92,    93,   806,   263,   313,   264,    96,
      97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   119,   265,   195,   266,  1663,   196,   299,   300,
     301,   302,   303,   200,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   299,   300,   301,   302,   303,   313,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   232,    42,
      43,    44,    45,   313,    47,   857,   468,   267,   235,   268,
     835,   836,   269,   271,   270,   272,   273,   275,   274,   276,
     277,   279,   278,   280,   837,   838,   839,   840,   841,   842,
     843,   283,   506,   467,   281,   297,   282,   848,   314,   693,
     854,   694,   284,   700,   285,   876,   865,   315,   319,   863,
    1156,  1006,  1736,  1007,   700,   700,  1018,  1046,   700,   342,
    1047,   467,   413,   700,   700,  1048,  1136,  1266,  1612,  1267,
    1613,  1623,  1625,  1624,  1626,   956,  1627,  1650,  1628,  1651,
     897,   898,   899,  1728,  1818,  1729,  1819,  1820,   321,  1821,
     467,   467,   467,   878,   332,   906,   907,   331,  1822,   910,
    1823,  1124,  1949,  1951,  1950,  1952,   923,  1953,   333,  1954,
     921,   922,  1790,   127,   128,   932,  2060,   337,  2061,   129,
    2062,  2064,  2063,  2065,   132,   335,  2066,   290,  2067,   336,
     291,  2068,  2070,  2069,  2071,  2147,   338,  2148,  1151,  2149,
     339,  2150,  2151,   340,  2152,   959,   960,   961,   962,   963,
     964,   965,   966,   967,   968,   969,   970,   971,   972,   973,
     974,   975,   976,   977,   978,   979,   980,   981,   982,   983,
     984,   341,   299,   300,   301,   302,   303,   356,   304,   305,
     306,   307,   308,   309,   310,   311,   312,  2195,  2197,  2196,
    2198,  1000,   313,  2199,   359,  2200,  1005,   299,   300,   301,
     302,   303,   353,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   467,  2243,  1020,  2244,  1021,   313,  2245,  2247,
    2246,  2248,   354,   355,   360,   369,   371,   372,   375,   376,
    1036,  1037,  1038,   378,   379,   380,   408,   381,   382,   383,
     384,   385,   386,   387,   388,  1062,   389,   390,   391,   414,
     392,  1058,  1059,  1060,   393,   394,   395,   396,   397,   398,
     299,   300,   301,   302,   303,  1326,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   399,   400,   401,   402,   403,
     313,   411,   404,   405,   406,   407,   313,   465,   475,   507,
     512,   410,    92,    93,   412,  1970,   474,  1094,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
     118,   119,   520,   545,   546,   904,   549,   552,   555,   559,
     560,   561,   562,   563,   564,   565,  1125,   566,   567,   568,
     569,   570,  1132,   571,   572,   573,   536,    27,    28,   537,
     538,    31,    32,    33,   574,    34,   575,    36,    37,   576,
      39,    40,  1141,  1142,  1213,   577,   578,   579,   580,   581,
     582,  1157,  1150,  1159,   584,  1162,   585,    52,   583,   586,
     587,   588,   589,   697,   592,   594,  1168,  1169,  1182,   593,
     698,   707,   708,   713,   742,   746,   715,   716,  1181,   717,
     719,  1184,   721,  1003,   747,    53,    54,    55,   722,   730,
     758,  1194,   759,   760,   761,   762,   764,   765,  1201,  1202,
    1203,   771,   802,   926,   772,  1208,   773,   774,   775,  1212,
     803,   776,   777,  1214,  1215,  1216,  1217,  1218,  1219,  1220,
    1221,  1222,  1223,  1224,  1225,  1226,  1227,  1228,  1229,  1230,
    1231,  1232,  1233,  1234,  1235,  1236,  1237,  1238,  1239,   778,
     779,   780,   781,   782,   783,   784,   785,    65,   786,   787,
     788,   789,   127,   128,  1249,   790,   791,   792,   129,   834,
     844,   808,   858,   132,   793,   794,   723,   795,   809,   724,
     796,  1255,   299,   300,   301,   302,   303,   797,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   810,  1273,   539,
      92,    93,   313,  1270,   798,  1271,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
      92,   324,   799,   800,   801,   804,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
     299,   300,   301,   302,   303,   811,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   812,   847,   855,  1333,  1335,
     313,  1341,   813,   814,  1332,  1334,   856,  1340,   815,  1343,
    1344,   859,   816,   862,   817,   818,  1348,   819,   820,   821,
     822,   868,   823,   824,   825,  1357,   826,   827,   828,   829,
     830,   831,   832,  1365,   833,   870,   850,   880,  1370,   881,
     882,  1373,   879,  1375,  1376,  1377,  1378,  1379,  1380,  1381,
    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1390,  1391,
    1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,   885,
     886,   345,  1607,   887,  1404,   888,   286,   287,  1405,   889,
     890,   891,   892,   299,   300,   301,   302,   303,  1423,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   900,   905,
     127,   128,   911,   313,   913,   464,   129,   919,   918,   522,
     920,   132,   924,   925,   874,   927,   928,   875,   931,   933,
     934,   937,   938,   939,   940,   941,   950,   994,   953,   951,
     127,   325,   952,   954,   955,   957,   129,   996,  1001,  1002,
    1008,   132,  1012,  1014,  1016,  1017,  1039,   326,  1051,  1052,
    1057,  1061,  1063,  1067,  1465,  1068,  1468,  1069,  1070,  1480,
    1071,  1072,  1473,  1694,  1073,  1697,  1074,  1076,  1077,  1243,
    1078,  1079,  1095,  1080,  1126,  1081,  1082,  1083,  1084,  1085,
    1086,  1087,  1088,  1091,  1089,  1090,  1496,  1497,  1498,  1499,
    1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,
    1510,  1511,  1512,  1513,  1514,  1515,  1516,  1092,  1518,  1093,
    1122,   299,   300,   301,   302,   303,  1528,   304,   305,   306,
     307,   308,   309,   310,   311,   312,  1127,  1129,  1135,  1133,
    1134,   313,  1138,  1139,  1140,  1143,    92,   503,  1144,   731,
    1145,  1759,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,  1146,  1147,  1148,  1149,
    1158,  1160,  1163,  1165,  1166,  1167,  1174,  1170,  1183,  1186,
    1187,  1189,  1580,  1582,  1584,  1585,  1586,  1587,  1588,  1589,
    1590,  1591,  1592,  1593,  1594,  1595,  1596,  1597,  1598,  1599,
    1600,  1601,  1602,  1603,  1604,  1605,    92,    93,  1618,  1193,
    1188,  1190,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   299,   300,   301,   302,
     303,  1192,   304,   305,   306,   307,   308,   309,   310,   311,
     312,  1195,  1196,  1197,  1662,  1199,   313,  1198,  1206,  1205,
    1209,  1210,  1211,  1240,  1661,  1246,  1241,  1250,  1242,  1245,
    1667,  1244,  1669,  1248,  1671,  1253,  1673,  1674,  1675,  1676,
    1677,  1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1686,
    1687,  1688,  1689,  1690,  1691,  1692,  1693,  1254,  1704,  1256,
    1259,  1261,  1268,  1274,  1276,  1277,   328,  1269,  1278,  1279,
    1280,   334,  1282,  1283,  1284,  1288,   127,   128,  1324,  1292,
    1289,  1345,   129,  1251,  1353,  1290,  1293,   132,  1356,  1358,
    1322,  1361,  1360,   504,   358,  1295,  1352,  1362,  1363,  1364,
     362,   363,  1366,  1368,  1369,  1371,  1372,  1401,  1374,  1733,
    1734,  1402,  1403,  1410,  1411,  1419,  1420,  1741,  1742,  1743,
    1744,  1745,  1746,  1747,  1748,  1749,  1750,  1751,  1752,  1753,
    1754,  1755,  1756,  1757,  1758,  1464,  1466,  1422,  1424,  1425,
    1426,  1428,  1429,  1431,  1433,  1470,  1329,  1330,  1471,  1435,
    1462,  1474,   129,  1475,  1476,  1479,  1485,  1331,  1486,  1487,
    1489,  1490,  1491,   168,  1492,  1572,  1252,  1519,  1787,  1521,
    1523,  1527,  1524,  1792,  1794,  1796,  1797,  1798,  1799,  1800,
    1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,  1810,
    1811,  1812,  1813,  1814,   299,   300,   301,   302,   303,  1526,
     304,   305,   306,   307,   308,   309,   310,   311,   312,  1529,
    1562,  1564,  1568,  1530,   313,  1421,  1571,  1575,  1576,  1578,
    1531,  1532,  1609,  1660,  1654,  1845,  1533,  1847,  1535,  1849,
    1534,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,
    1860,  1861,  1862,  1863,  1864,  1865,  1866,  1867,  1868,  1536,
     299,   300,   301,   302,   303,  1537,   304,   305,   306,   307,
     308,   309,   310,   311,   312,  1559,  1561,  1616,  1611,  1615,
     313,  1617,  1619,  1620,  1621,  1622,  1652,  1657,  1658,  1665,
    1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,
    1902,  1903,  1904,  1905,  1906,  1653,  1666,  1668,  1670,  1672,
    1695,  1698,  1730,  1731,  1705,  1700,  1732,  1735,  1702,  1706,
    1760,  1763,  1764,  1765,  1788,  1928,  1930,  1932,  1933,  1934,
    1935,  1936,  1937,  1938,  1939,  1940,  1941,  1942,  1943,  1944,
    1945,  1946,  1947,   299,   300,   301,   302,   303,  1766,   304,
     305,   306,   307,   308,   309,   310,   311,   312,  1842,  1844,
    1846,  1767,  1848,   313,  1850,  1972,  1971,  1768,  1973,  1817,
    1975,  1908,  1977,  1978,  1979,  1980,  1981,  1982,  1983,  1984,
    1985,  1986,  1987,  1988,  1989,  1990,  1991,  1816,  1869,  1907,
    1948,   699,   299,   300,   301,   302,   303,  1909,   304,   305,
     306,   307,   308,   309,   310,   311,   312,  1910,  1974,  1976,
    2008,  2024,   313,  1992,  2082,  2084,  2015,  2016,  2017,  2018,
    2019,  2020,  2021,  2022,  2023,  2025,  2026,  2086,  2088,  2027,
    2028,  2029,  2090,  2092,  2126,  2127,  2128,  2160,  2162,  2164,
    2180,  2040,  2042,  2044,  2046,  2048,  2050,  2051,  2052,  2053,
    2054,  2055,  2056,  2057,  2058,  2059,  2181,   536,    27,    28,
     537,   538,    31,    32,    33,  2182,    34,  2205,    36,    37,
    2207,    39,    40,  2209,  2234,  2235,  2236,  2081,  2250,  2083,
    2252,  2085,  2254,  2087,  2256,  2089,  2257,  2091,    52,  2093,
    2094,  2095,  2096,  2097,  2098,  2099,  2100,  2101,    70,     0,
     556,    71,    72,  1173,   807,     0,     0,     0,     0,     0,
       0,     0,     0,  1128,     0,     0,    53,    54,    55,  2111,
    2112,  2113,  2114,  2115,  2116,     0,   712,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2129,  2130,  2131,
    2132,  2133,  2134,  2136,  2138,  2140,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2153,  2154,
    2155,  2156,  2157,  2158,  2159,     0,  2161,     0,  2163,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    65,     0,
       0,     0,  2171,  2172,  2173,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2183,  2184,  2185,  2187,  2189,  2191,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2201,
    2202,  2203,  2204,     0,  2206,     0,  2208,     0,     0,     0,
     544,     0,     0,     0,     0,     0,     0,  2213,  2214,  2215,
       0,     0,     0,  2219,  2220,  2221,     0,     0,     0,  2225,
    2226,  2227,   866,   867,     0,   869,     0,   871,   872,     0,
       0,  2238,  2240,  2242,     0,     0,     0,     0,     0,     0,
    2249,     0,  2251,     0,  2253,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   908,   909,     0,     0,
     912,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,   929,   930,     0,
       0,   313,     0,   935,   936,     0,     0,    92,    93,    94,
     942,    95,   949,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,   117,   118,   119,     0,   120,   121,
     122,    92,    93,   460,     0,     0,     0,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,     0,   120,   121,   122,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1013,     0,  1015,     0,     0,     0,
       0,     0,     0,   877,     0,     0,  1022,  1023,  1024,     0,
       0,  1027,  1028,  1029,  1030,  1031,  1032,  1033,    92,    93,
       0,     0,     0,     0,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,    92,   324,
       0,     0,     0,     0,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   915,     0,
       0,     0,     0,   123,   124,   125,   126,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   127,   128,     0,
       0,     0,     0,   129,   130,   131,     0,     0,   132,     0,
     133,     0,   134,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1123,     0,     0,     0,     0,     0,     0,
       0,   127,   128,     0,     0,     0,     0,   129,    92,   503,
       0,     0,   132,     0,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,   117,   118,   119,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,  1175,     0,     0,     0,     0,   313,     0,
       0,  1185,     0,     0,     0,     0,     0,     0,   127,   128,
       0,     0,     0,     0,   129,     0,     0,     0,     0,   132,
    1204,   536,    27,    28,   537,   538,    31,    32,    33,     0,
      34,     0,    36,    37,     0,    39,    40,     0,   127,   466,
       0,     0,     0,     0,   129,     0,     0,     0,     0,   132,
       0,     0,    52,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,     0,     0,     0,     0,     0,
      53,    54,    55,     0,     0,     0,     0,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   -10,     1,
       0,   -10,   -53,  1154,     0,  1155,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   127,   128,
       0,     0,     0,     0,   129,     0,     0,     0,     0,   132,
       0,   -53,    65,     0,     0,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,   -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,     0,     0,     0,   -53,   -53,   -53,   -53,   -53,
     -53,   -53,     0,   -53,   -53,   -53,   -53,   -53,     0,   299,
     300,   301,   302,   303,   767,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,     0,  1346,   470,  1347,   -53,   -53,   -53,  1351,     0,
       0,     0,   -53,     0,   -53,     0,   -53,   -53,   -53,   -53,
     -53,   -53,   -53,     0,  1367,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   -10,   -10,   -10,   -10,   -10,   -10,   -10,   -10,
       0,     0,   299,   300,   301,   302,   303,    23,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   -53,     2,     3,
       0,     4,   313,     0,     0,     0,     0,     0,  1176,     0,
    1177,     0,     0,     0,     0,     0,    24,     0,     0,     0,
      25,    26,    27,    28,    29,    30,    31,    32,    33,     0,
      34,    35,    36,    37,    38,    39,    40,     0,     0,     0,
      41,    42,    43,    44,    45,    46,    47,     0,    48,    49,
      50,    51,    52,     0,     0,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1469,     0,     0,
      53,    54,    55,   735,     0,  1477,  1478,    56,     0,    57,
       0,    58,    59,    60,    61,    62,    63,    64,   598,   599,
     600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
     610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
     620,   621,   622,   623,     0,     0,     0,     0,     0,     0,
       0,   202,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    65,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,     0,
     536,    27,    28,   537,   538,    31,    32,    33,     0,    34,
       0,    36,    37,     0,    39,    40,     0,     0,     0,  1566,
       0,     0,  1570,     0,     0,     0,     0,     0,     0,     0,
       0,    52,     0,     0,     0,     0,   203,   204,   205,     0,
       0,     0,     0,     0,   206,   207,   208,   209,   210,   211,
     212,   213,   214,   215,     0,     0,     0,     0,   624,    53,
      54,    55,   216,   217,   218,   219,   220,   221,   222,   223,
     224,   225,     0,   226,   227,   228,   229,   230,   231,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,     0,     0,   958,     0,  1327,     0,  1328,  1656,     0,
       0,     0,     0,     0,     0,     0,  1664,     0,     0,     0,
       0,    65,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,     0,   299,   300,   301,   302,   303,
     736,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,   299,   300,
     301,   302,   303,   896,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
       0,     0,     0,     0,     0,     0,  1152,   299,   300,   301,
     302,   303,  1737,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,     0,
     299,   300,   301,   302,   303,  1349,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,   299,   300,   301,   302,   303,  1350,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
    1789,     0,     0,   313,     0,     0,   299,   300,   301,   302,
     303,  1406,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,     0,   299,
     300,   301,   302,   303,  1408,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,     0,  1843,     0,     0,     0,     0,  1414,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
       0,   299,   300,   301,   302,   303,  1417,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,     0,     0,  1888,     0,     0,     0,  1418,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,     0,     0,     0,     0,  1463,     0,
       0,     0,     0,  1926,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,     0,   299,   300,   301,
     302,   303,  1520,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,     0,
     299,   300,   301,   302,   303,  1522,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,   299,   300,   301,   302,   303,  1525,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,     0,   299,   300,   301,   302,
     303,  1762,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,     0,   299,
     300,   301,   302,   303,  1815,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,   522,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,   523,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,   553,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,   673,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,   674,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
     687,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,   688,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,   689,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,   690,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,   691,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,   692,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,   749,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,   750,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,   751,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,   894,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
     895,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,   914,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1049,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1050,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1064,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1065,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1096,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1097,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1098,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1099,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1100,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1101,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1102,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1103,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1104,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1105,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1106,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1107,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1108,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1109,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1110,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1111,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1112,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1113,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1114,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1115,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1116,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1117,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1118,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1119,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1120,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1121,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1137,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1262,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1263,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1272,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1275,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1286,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1291,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1294,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1296,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1297,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1298,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1299,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1300,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1301,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1302,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1304,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1305,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1306,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1307,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1308,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1309,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1310,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1311,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1312,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1313,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1314,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1315,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1316,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1317,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1318,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1319,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1320,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1321,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1325,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1427,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1439,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1440,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1441,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1442,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1443,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1444,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1445,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1446,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1447,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1448,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1449,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1450,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1451,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1452,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1453,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1454,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1455,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1456,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1457,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1458,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1459,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1461,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1538,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1539,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1540,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1541,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1542,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1543,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1544,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1545,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1546,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1547,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1548,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1549,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1550,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1551,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1552,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1553,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1554,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1555,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1556,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1557,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1558,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1629,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1630,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1631,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1632,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1633,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1634,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1635,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1636,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1637,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1638,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1639,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1640,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1641,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1642,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1643,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1644,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1645,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1646,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1647,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1648,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1649,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1703,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1710,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1711,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1712,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1713,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1714,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1715,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1716,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1717,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1718,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1719,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1720,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1721,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1722,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1723,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1724,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1725,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1726,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1727,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1761,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1769,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1770,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1771,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1772,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1773,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1774,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1775,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1776,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1777,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1778,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1779,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1780,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1781,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1782,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1783,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1784,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1785,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1786,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1824,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1825,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1826,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1827,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1828,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1829,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1830,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1831,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1832,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1833,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1834,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1835,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1836,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1837,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1838,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1839,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1840,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1841,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1873,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1874,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1875,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1876,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1877,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1878,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1879,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1880,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1881,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1882,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1883,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1884,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1885,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1886,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1887,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1911,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1912,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1913,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1914,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1915,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1916,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1917,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1918,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1919,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1920,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1921,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1922,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1923,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1924,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1925,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1955,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1956,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1957,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1958,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1959,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1960,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  1961,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  1962,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  1963,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  1964,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  1965,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  1966,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    1967,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  1968,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  1969,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  1999,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2000,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2001,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2002,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2003,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2004,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2005,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2006,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2007,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2030,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2031,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2032,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2033,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2034,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2035,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2036,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2037,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2038,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2072,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2073,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2074,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2075,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2076,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2077,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2078,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2079,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2080,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2102,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2103,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2104,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2105,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2106,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2107,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2120,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2121,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2122,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2123,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2124,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2125,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2141,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2142,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2143,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2144,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2145,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2146,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2165,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2166,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2167,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2177,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2178,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2179,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2192,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2193,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,   299,   300,   301,   302,   303,  2194,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,   299,   300,   301,   302,   303,  2210,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,   299,   300,   301,   302,   303,  2211,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,   299,   300,   301,   302,   303,  2212,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,   299,   300,   301,   302,   303,
    2216,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,   299,   300,   301,   302,
     303,  2217,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,   299,   300,   301,
     302,   303,  2218,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,   299,   300,
     301,   302,   303,  2222,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,   299,
     300,   301,   302,   303,  2223,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
     299,   300,   301,   302,   303,  2224,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   595,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   652,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   654,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   656,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   658,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   660,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   662,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   664,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   666,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   668,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   670,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   672,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   676,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   678,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   680,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   682,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   684,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   686,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   752,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   757,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   986,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   988,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   990,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,   992,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,     0,     0,   993,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,     0,     0,  1130,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   464,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   494,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   495,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   496,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   498,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   500,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     501,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   508,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   547,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   548,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   551,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   557,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   651,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   653,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   655,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   657,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     659,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   661,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   663,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   665,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   667,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   669,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   671,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   675,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   677,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   679,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     681,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   683,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   685,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   718,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   720,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   732,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   733,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   737,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,   738,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,   739,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
     740,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,   741,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,   763,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,   770,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,   985,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,   987,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,   989,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,   991,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  1053,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1153,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    1180,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  1281,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  1285,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  1287,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  1430,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  1432,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  1434,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  1436,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  1437,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1438,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    1460,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  1560,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  1707,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  1708,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  1709,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  1870,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  1871,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  1872,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  1993,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  1994,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    1995,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  1996,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  1997,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313,     0,  1998,
     299,   300,   301,   302,   303,     0,   304,   305,   306,   307,
     308,   309,   310,   311,   312,     0,     0,     0,     0,     0,
     313,     0,  2108,   299,   300,   301,   302,   303,     0,   304,
     305,   306,   307,   308,   309,   310,   311,   312,     0,     0,
       0,     0,     0,   313,     0,  2109,   299,   300,   301,   302,
     303,     0,   304,   305,   306,   307,   308,   309,   310,   311,
     312,     0,     0,     0,     0,     0,   313,     0,  2110,   299,
     300,   301,   302,   303,     0,   304,   305,   306,   307,   308,
     309,   310,   311,   312,     0,     0,     0,     0,     0,   313,
       0,  2168,   299,   300,   301,   302,   303,     0,   304,   305,
     306,   307,   308,   309,   310,   311,   312,     0,     0,     0,
       0,     0,   313,     0,  2169,   299,   300,   301,   302,   303,
       0,   304,   305,   306,   307,   308,   309,   310,   311,   312,
       0,     0,     0,     0,     0,   313,     0,  2170,   299,   300,
     301,   302,   303,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,     0,     0,     0,     0,     0,   313,     0,
    2228,   299,   300,   301,   302,   303,     0,   304,   305,   306,
     307,   308,   309,   310,   311,   312,     0,     0,     0,     0,
       0,   313,     0,  2229,   299,   300,   301,   302,   303,     0,
     304,   305,   306,   307,   308,   309,   310,   311,   312,     0,
       0,     0,     0,     0,   313,     0,  2230,   299,   300,   301,
     302,   303,     0,   304,   305,   306,   307,   308,   309,   310,
     311,   312,     0,     0,     0,     0,     0,   313
};

static const short yycheck[] =
{
      23,    90,   351,    23,   293,   710,   326,     4,     4,  1261,
       4,     4,     4,    64,    43,    44,    64,   177,     6,     4,
       3,   181,  1170,    42,    65,    65,   283,   284,   285,    70,
      70,     4,    64,     4,    65,   164,     6,  1338,     6,    70,
      65,  1342,     5,   101,    65,    70,     4,     5,    82,    70,
     194,   194,   183,   184,    65,    65,   200,   200,  1071,    70,
      70,   195,   291,   183,   184,   199,    54,  1080,   199,     6,
     201,    34,    35,    36,  1087,   195,    34,    35,    36,    49,
     175,   176,   177,     6,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   190,   191,   183,   184,   326,   193,   183,
     184,   198,   183,   184,   127,   128,   129,   183,   184,   132,
     133,   199,   135,   201,   195,   199,     7,   201,   115,   142,
     143,   144,     6,   146,   200,   148,   149,  1275,   151,     7,
       6,   104,   105,   104,   105,   164,   194,   166,     6,   183,
     184,   194,     7,   172,   167,   168,   194,     6,     7,   200,
     194,    38,   200,   858,    41,    42,   200,   183,   184,     7,
     201,   201,   194,   186,   187,   195,   189,   201,   191,   199,
     201,   194,   195,   493,   200,   194,   201,   199,   195,   201,
     201,   470,   199,     7,   504,   173,   174,   175,   176,   177,
     201,   179,   180,   181,   182,   183,   184,   185,   186,   187,
     199,   184,   201,   200,   200,   193,   200,   200,   200,   194,
     239,   371,     8,   236,   471,   183,   184,     6,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
     183,   184,  1563,  1276,   493,   194,  1567,  1280,   291,  1521,
     195,     6,  1524,   293,   199,   504,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   169,   170,   171,   172,   195,   319,    38,   321,   199,
      41,  1006,   325,   326,   169,   170,   171,   172,   331,   332,
     333,   194,   335,   336,   337,   338,   339,   340,   341,   348,
     349,   169,   170,   171,   172,   190,   191,     3,   190,   191,
     353,   354,   355,   356,   183,   184,   359,   195,   194,   183,
     184,   199,   190,   191,   367,   169,   170,   171,   172,     6,
     198,   200,   194,   376,  1655,   199,   183,   184,  1659,  1611,
     185,   186,   187,  1615,    55,    56,   190,   191,   193,     8,
      41,    42,   199,    44,     6,     7,   696,   173,   174,   175,
     176,   177,   194,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   183,   184,   414,   194,   194,   193,   196,   183,
     184,   183,   184,    38,   724,   201,    41,    42,   199,    44,
      64,  1424,  1425,  1426,  1427,   199,   194,   199,  1431,   176,
     177,   194,   179,   180,   181,   182,   183,   184,   185,   186,
     187,   183,   184,   753,   754,   755,   193,   183,   184,    46,
     697,     6,    42,   466,   194,   194,   196,   199,    42,   472,
     470,    44,   194,   199,   196,   194,     6,   196,   134,   135,
     136,   137,   138,   139,   140,   141,   194,   696,   196,    42,
     493,   700,   183,   184,   183,   184,   194,   194,   196,   502,
     194,   504,   196,   506,   507,   190,   191,   200,   199,   512,
     199,   196,   521,   198,   194,   724,   196,   200,    42,   522,
     523,   183,   184,   185,   186,   187,   190,   191,   531,     6,
       4,   193,   196,   194,   198,   196,  1529,  1530,     4,   542,
    1533,   190,   191,    42,   753,   754,   755,   196,     6,   198,
     553,   194,   555,   556,   173,   174,   175,   176,   177,  1244,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   119,
     120,   121,   122,   123,   193,   875,   195,   194,   194,   196,
     196,   850,   851,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   194,     3,     4,   595,   194,   193,   196,     9,
      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
      30,    31,    32,   194,   194,   196,  1619,     6,   173,   174,
     175,   176,   177,     3,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   173,   174,   175,   176,   177,   193,   179,
     180,   181,   182,   183,   184,   185,   186,   187,   194,    58,
      59,    60,    61,   193,    63,     6,   875,   194,     5,   196,
     673,   674,   194,   194,   196,   196,   194,   194,   196,   196,
     194,   194,   196,   196,   687,   688,   689,   690,   691,   692,
     693,   194,     8,   696,   194,     6,   196,   700,     6,   196,
     703,   198,   194,   199,   194,   201,   715,     5,   194,   712,
    1039,   199,  1705,   201,   199,   199,   201,   201,   199,     4,
     201,   724,   725,   199,   199,   201,   201,   199,   199,   201,
     201,   199,   199,   201,   201,   804,   199,   199,   201,   201,
     749,   750,   751,   199,   199,   201,   201,   199,   194,   201,
     753,   754,   755,     6,   194,   758,   759,   200,   199,   762,
     201,   998,   199,   199,   201,   201,   775,   199,   194,   201,
     773,   774,  1765,   183,   184,   784,   199,   194,   201,   189,
     199,   199,   201,   201,   194,   200,   199,   197,   201,   200,
     200,   199,   199,   201,   201,   199,   194,   201,  1035,   199,
     194,   201,   199,   194,   201,   808,   809,   810,   811,   812,
     813,   814,   815,   816,   817,   818,   819,   820,   821,   822,
     823,   824,   825,   826,   827,   828,   829,   830,   831,   832,
     833,   194,   173,   174,   175,   176,   177,   196,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   199,   199,   201,
     201,   851,   193,   199,   196,   201,   859,   173,   174,   175,
     176,   177,   200,   179,   180,   181,   182,   183,   184,   185,
     186,   187,   875,   199,   877,   201,   879,   193,   199,   199,
     201,   201,   200,   200,     6,   198,   200,   107,     6,   194,
     893,   894,   895,   194,   194,   194,     5,   194,   194,   194,
     194,   194,   194,   194,   194,   919,   194,   194,   194,     4,
     194,   914,   915,   916,   194,   194,   194,   194,   194,   194,
     173,   174,   175,   176,   177,  1254,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   194,   194,   194,   194,   194,
     193,   195,   194,   194,   194,   194,   193,     7,     7,     7,
       7,   199,     3,     4,   199,  1948,   198,   957,     9,    10,
      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
      21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
      31,    32,   195,     7,     7,     6,   102,   104,   200,   165,
       5,     5,     5,     5,     5,     5,   999,     5,     5,     5,
       5,     5,  1011,     5,     5,     5,    38,    39,    40,    41,
      42,    43,    44,    45,     5,    47,     5,    49,    50,     5,
      52,    53,  1025,  1026,  1093,     5,     5,     5,     5,     5,
       5,  1040,  1035,  1042,     5,  1044,     5,    69,   152,     5,
       5,     3,     5,   199,     5,     5,  1049,  1050,  1062,     6,
     195,     6,     4,     6,   198,   201,     7,     7,  1061,     7,
       7,  1064,     7,     6,   201,    97,    98,    99,     7,     7,
     200,  1074,   200,     7,     7,   194,     7,   198,  1081,  1082,
    1083,   166,     5,   185,   199,  1088,   199,   199,   199,  1092,
     195,   199,   199,  1096,  1097,  1098,  1099,  1100,  1101,  1102,
    1103,  1104,  1105,  1106,  1107,  1108,  1109,  1110,  1111,  1112,
    1113,  1114,  1115,  1116,  1117,  1118,  1119,  1120,  1121,   199,
     199,   199,   199,   199,   199,   199,   199,   159,   199,   199,
     199,   199,   183,   184,  1137,   199,   199,   199,   189,     6,
       4,   194,     7,   194,   199,   199,   197,   199,   194,   200,
     199,  1154,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   194,  1182,   201,
       3,     4,   193,  1176,   199,  1178,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
       3,     4,   199,   199,   199,   199,     9,    10,    11,    12,
      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
     173,   174,   175,   176,   177,   194,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   194,     6,     6,  1257,  1258,
     193,  1260,   194,   194,  1257,  1258,     6,  1260,   194,  1262,
    1263,   196,   194,     6,   194,   194,  1269,   194,   194,   194,
     194,     7,   194,   194,   194,  1278,   194,   194,   194,   194,
     194,   194,   194,  1286,   194,     7,   197,     7,  1291,     7,
       7,  1294,   200,  1296,  1297,  1298,  1299,  1300,  1301,  1302,
    1303,  1304,  1305,  1306,  1307,  1308,  1309,  1310,  1311,  1312,
    1313,  1314,  1315,  1316,  1317,  1318,  1319,  1320,  1321,     7,
       7,  1330,  1559,     7,  1327,     7,  1329,  1330,  1331,     7,
       7,     7,     4,   173,   174,   175,   176,   177,  1352,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     6,     6,
     183,   184,     7,   193,     4,   195,   189,   162,     7,   199,
       3,   194,     3,     3,   197,     3,     3,   200,     3,     3,
       3,     3,     3,     3,     3,     3,     3,   195,     3,     5,
     183,   184,     5,     3,     6,     4,   189,   195,   198,     7,
       6,   194,     6,     6,     6,     6,   200,   200,     6,     6,
     103,   200,   199,   199,  1407,   195,  1409,   199,   195,  1423,
     199,   195,  1415,  1650,   199,  1652,   199,   199,   195,     6,
     195,   199,     6,   199,     6,   199,   199,   199,   199,   195,
     199,   199,   199,   195,   199,   199,  1439,  1440,  1441,  1442,
    1443,  1444,  1445,  1446,  1447,  1448,  1449,  1450,  1451,  1452,
    1453,  1454,  1455,  1456,  1457,  1458,  1459,   199,  1461,   199,
     198,   173,   174,   175,   176,   177,  1480,   179,   180,   181,
     182,   183,   184,   185,   186,   187,     4,     6,   197,     6,
       6,   193,     6,     6,     6,     6,     3,     4,     6,   201,
       6,  1728,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,     6,     6,     6,     6,
       6,     6,     6,     6,     6,     6,   103,     7,     3,     6,
       3,   185,  1535,  1536,  1537,  1538,  1539,  1540,  1541,  1542,
    1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,
    1553,  1554,  1555,  1556,  1557,  1558,     3,     4,  1572,     3,
       6,     6,     9,    10,    11,    12,    13,    14,    15,    16,
      17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
      27,    28,    29,    30,    31,    32,   173,   174,   175,   176,
     177,     6,   179,   180,   181,   182,   183,   184,   185,   186,
     187,     6,     3,     6,  1618,     3,   193,     6,     3,     6,
       3,     3,     6,     4,  1617,   198,     6,     6,     6,     6,
    1623,     7,  1625,   197,  1627,     6,  1629,  1630,  1631,  1632,
    1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,
    1643,  1644,  1645,  1646,  1647,  1648,  1649,   200,  1662,   201,
     200,   200,   200,   195,   199,   199,   150,   100,   199,   195,
     199,   155,   199,   195,   195,   199,   183,   184,   105,   199,
     195,   103,   189,     6,     6,   195,   195,   194,     3,     6,
     195,     3,     6,   200,   178,   199,   162,     6,     6,     6,
     184,   185,     6,     6,     6,     3,     6,     6,     5,  1702,
    1703,     5,   201,     6,   200,   200,   199,  1710,  1711,  1712,
    1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
    1723,  1724,  1725,  1726,  1727,     6,     6,   201,   199,   199,
     199,   195,   195,   199,   195,     6,   183,   184,     6,   199,
     199,     6,   189,     6,     6,     6,     6,   194,     6,     6,
       6,     6,     6,   200,     5,   162,     6,     5,  1761,   200,
     199,   201,   200,  1766,  1767,  1768,  1769,  1770,  1771,  1772,
    1773,  1774,  1775,  1776,  1777,  1778,  1779,  1780,  1781,  1782,
    1783,  1784,  1785,  1786,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,   199,
       6,     6,     6,   199,   193,     6,   100,     6,     6,     5,
     195,   195,     5,   100,     6,  1818,   199,  1820,   200,  1822,
     199,  1824,  1825,  1826,  1827,  1828,  1829,  1830,  1831,  1832,
    1833,  1834,  1835,  1836,  1837,  1838,  1839,  1840,  1841,   200,
     173,   174,   175,   176,   177,   200,   179,   180,   181,   182,
     183,   184,   185,   186,   187,   200,   199,   201,   200,   200,
     193,   200,   199,   199,   195,   195,   200,     6,     6,     6,
    1873,  1874,  1875,  1876,  1877,  1878,  1879,  1880,  1881,  1882,
    1883,  1884,  1885,  1886,  1887,   201,     6,     6,     6,     6,
       6,     6,     6,     6,   199,   201,     6,   167,   200,   199,
       6,   168,   199,   199,     6,  1908,  1909,  1910,  1911,  1912,
    1913,  1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,
    1923,  1924,  1925,   173,   174,   175,   176,   177,   200,   179,
     180,   181,   182,   183,   184,   185,   186,   187,     6,     6,
       6,   200,     6,   193,     6,     6,  1949,   200,  1951,   195,
    1953,   200,  1955,  1956,  1957,  1958,  1959,  1960,  1961,  1962,
    1963,  1964,  1965,  1966,  1967,  1968,  1969,   199,   199,   199,
     199,   465,   173,   174,   175,   176,   177,   200,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   200,     6,     6,
       6,   200,   193,   195,     6,     6,  1999,  2000,  2001,  2002,
    2003,  2004,  2005,  2006,  2007,   200,   200,     6,     6,   200,
     200,   200,     6,     6,   200,   200,   200,     6,     6,     6,
     200,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,  2032,
    2033,  2034,  2035,  2036,  2037,  2038,   200,    38,    39,    40,
      41,    42,    43,    44,    45,   200,    47,     6,    49,    50,
       6,    52,    53,     6,   200,   200,   200,  2060,     6,  2062,
       6,  2064,     6,  2066,     0,  2068,     0,  2070,    69,  2072,
    2073,  2074,  2075,  2076,  2077,  2078,  2079,  2080,     7,    -1,
       8,     7,     7,  1055,   597,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1002,    -1,    -1,    97,    98,    99,  2102,
    2103,  2104,  2105,  2106,  2107,    -1,     8,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2120,  2121,  2122,
    2123,  2124,  2125,  2126,  2127,  2128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2141,  2142,
    2143,  2144,  2145,  2146,  2147,    -1,  2149,    -1,  2151,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   159,    -1,
      -1,    -1,  2165,  2166,  2167,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2177,  2178,  2179,  2180,  2181,  2182,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2192,
    2193,  2194,  2195,    -1,  2197,    -1,  2199,    -1,    -1,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    -1,  2210,  2211,  2212,
      -1,    -1,    -1,  2216,  2217,  2218,    -1,    -1,    -1,  2222,
    2223,  2224,   716,   717,    -1,   719,    -1,   721,   722,    -1,
      -1,  2234,  2235,  2236,    -1,    -1,    -1,    -1,    -1,    -1,
    2243,    -1,  2245,    -1,  2247,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   760,   761,    -1,    -1,
     764,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,   781,   782,    -1,
      -1,   193,    -1,   787,   788,    -1,    -1,     3,     4,     5,
     794,     7,   796,     9,    10,    11,    12,    13,    14,    15,
      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
      26,    27,    28,    29,    30,    31,    32,    -1,    34,    35,
      36,     3,     4,     5,    -1,    -1,    -1,     9,    10,    11,
      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
      32,    -1,    34,    35,    36,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   868,    -1,   870,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,   880,   881,   882,    -1,
      -1,   885,   886,   887,   888,   889,   890,   891,     3,     4,
      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,     3,     4,
      -1,    -1,    -1,    -1,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,     8,    -1,
      -1,    -1,    -1,   169,   170,   171,   172,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,    -1,
      -1,    -1,    -1,   189,   190,   191,    -1,    -1,   194,    -1,
     196,    -1,   198,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   997,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   183,   184,    -1,    -1,    -1,    -1,   189,     3,     4,
      -1,    -1,   194,    -1,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,  1057,    -1,    -1,    -1,    -1,   193,    -1,
      -1,  1065,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
    1084,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
      47,    -1,    49,    50,    -1,    52,    53,    -1,   183,   184,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    -1,    69,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,
      97,    98,    99,    -1,    -1,    -1,    -1,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,     0,     1,
      -1,     3,     4,   199,    -1,   201,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   183,   184,
      -1,    -1,    -1,    -1,   189,    -1,    -1,    -1,    -1,   194,
      -1,    33,   159,    -1,    -1,    37,    38,    39,    40,    41,
      42,    43,    44,    45,    -1,    47,    48,    49,    50,    51,
      52,    53,    -1,    -1,    -1,    57,    58,    59,    60,    61,
      62,    63,    -1,    65,    66,    67,    68,    69,    -1,   173,
     174,   175,   176,   177,   201,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,  1266,   197,  1268,    97,    98,    99,  1272,    -1,
      -1,    -1,   104,    -1,   106,    -1,   108,   109,   110,   111,
     112,   113,   114,    -1,  1288,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   134,   135,   136,   137,   138,   139,   140,   141,
      -1,    -1,   173,   174,   175,   176,   177,     4,   179,   180,
     181,   182,   183,   184,   185,   186,   187,   159,   160,   161,
      -1,   163,   193,    -1,    -1,    -1,    -1,    -1,   199,    -1,
     201,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
      37,    38,    39,    40,    41,    42,    43,    44,    45,    -1,
      47,    48,    49,    50,    51,    52,    53,    -1,    -1,    -1,
      57,    58,    59,    60,    61,    62,    63,    -1,    65,    66,
      67,    68,    69,    -1,    -1,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,  1411,    -1,    -1,
      97,    98,    99,   201,    -1,  1419,  1420,   104,    -1,   106,
      -1,   108,   109,   110,   111,   112,   113,   114,    71,    72,
      73,    74,    75,    76,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
      93,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   159,    71,    72,    73,    74,    75,    76,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    86,    87,
      88,    89,    90,    91,    92,    93,    94,    95,    96,    -1,
      38,    39,    40,    41,    42,    43,    44,    45,    -1,    47,
      -1,    49,    50,    -1,    52,    53,    -1,    -1,    -1,  1523,
      -1,    -1,  1526,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    69,    -1,    -1,    -1,    -1,   116,   117,   118,    -1,
      -1,    -1,    -1,    -1,   124,   125,   126,   127,   128,   129,
     130,   131,   132,   133,    -1,    -1,    -1,    -1,   201,    97,
      98,    99,   142,   143,   144,   145,   146,   147,   148,   149,
     150,   151,    -1,   153,   154,   155,   156,   157,   158,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,    -1,   201,    -1,   199,    -1,   201,  1612,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1620,    -1,    -1,    -1,
      -1,   159,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,    -1,   173,   174,   175,   176,   177,
     201,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   173,   174,
     175,   176,   177,   201,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   201,   173,   174,   175,
     176,   177,  1706,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
     173,   174,   175,   176,   177,   201,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,   173,   174,   175,   176,   177,   201,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
    1764,    -1,    -1,   193,    -1,    -1,   173,   174,   175,   176,
     177,   201,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   173,
     174,   175,   176,   177,   201,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,    -1,  1816,    -1,    -1,    -1,    -1,   201,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
      -1,   173,   174,   175,   176,   177,   201,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,    -1,    -1,  1869,    -1,    -1,    -1,   201,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   201,    -1,
      -1,    -1,    -1,  1907,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,    -1,   173,   174,   175,
     176,   177,   201,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,
     173,   174,   175,   176,   177,   201,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,   173,   174,   175,   176,   177,   201,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,    -1,   173,   174,   175,   176,
     177,   201,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,   173,
     174,   175,   176,   177,   201,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,   173,   174,   175,   176,   177,   199,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,   173,   174,   175,   176,   177,   199,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,   173,   174,   175,   176,   177,   199,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,   173,   174,   175,   176,   177,   199,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,   177,
     199,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,   176,
     177,   199,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,   175,
     176,   177,   199,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,   174,
     175,   176,   177,   199,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,   173,
     174,   175,   176,   177,   199,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
     173,   174,   175,   176,   177,   199,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,    -1,    -1,   197,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,   197,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,
     173,   174,   175,   176,   177,    -1,   179,   180,   181,   182,
     183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,
     193,    -1,   195,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,   187,    -1,    -1,
      -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,   176,
     177,    -1,   179,   180,   181,   182,   183,   184,   185,   186,
     187,    -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,
      -1,   195,   173,   174,   175,   176,   177,    -1,   179,   180,
     181,   182,   183,   184,   185,   186,   187,    -1,    -1,    -1,
      -1,    -1,   193,    -1,   195,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,   187,
      -1,    -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,
     175,   176,   177,    -1,   179,   180,   181,   182,   183,   184,
     185,   186,   187,    -1,    -1,    -1,    -1,    -1,   193,    -1,
     195,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,   187,    -1,    -1,    -1,    -1,
      -1,   193,    -1,   195,   173,   174,   175,   176,   177,    -1,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
      -1,    -1,    -1,    -1,   193,    -1,   195,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,   187,    -1,    -1,    -1,    -1,    -1,   193
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison/bison.simple"

/* Skeleton output parser for bison,

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
   Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser when
   the %semantic_parser declaration is not specified in the grammar.
   It was written by Richard Stallman by simplifying the hairy parser
   used when %semantic_parser is specified.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# if YYSTACK_USE_ALLOCA
#  define YYSTACK_ALLOC alloca
# else
#  ifndef YYSTACK_USE_ALLOCA
#   if defined (alloca) || defined (_ALLOCA_H)
#    define YYSTACK_ALLOC alloca
#   else
#    ifdef __GNUC__
#     define YYSTACK_ALLOC __builtin_alloca
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning. */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
# else
#  if defined (__STDC__) || defined (__cplusplus)
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   define YYSIZE_T size_t
#  endif
#  define YYSTACK_ALLOC malloc
#  define YYSTACK_FREE free
# endif
#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */


#if (! defined (yyoverflow) \
     && (! defined (__cplusplus) \
	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  short yyss;
  YYSTYPE yyvs;
# if YYLSP_NEEDED
  YYLTYPE yyls;
# endif
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# if YYLSP_NEEDED
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
      + 2 * YYSTACK_GAP_MAX)
# else
#  define YYSTACK_BYTES(N) \
     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
      + YYSTACK_GAP_MAX)
# endif

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  register YYSIZE_T yyi;		\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (0)
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (0)

#endif


#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
# define YYSIZE_T __SIZE_TYPE__
#endif
#if ! defined (YYSIZE_T) && defined (size_t)
# define YYSIZE_T size_t
#endif
#if ! defined (YYSIZE_T)
# if defined (__STDC__) || defined (__cplusplus)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# endif
#endif
#if ! defined (YYSIZE_T)
# define YYSIZE_T unsigned int
#endif

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { 								\
      yyerror ("syntax error: cannot back up");			\
      YYERROR;							\
    }								\
while (0)

#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Compute the default location (before the actions
   are run).

   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
   first token.  By default, to implement support for ranges, extend
   its range to the last symbol.  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
   Current.last_line   = Rhs[N].last_line;	\
   Current.last_column = Rhs[N].last_column;
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#if YYPURE
# if YYLSP_NEEDED
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval, &yylloc)
#  endif
# else /* !YYLSP_NEEDED */
#  ifdef YYLEX_PARAM
#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
#  else
#   define YYLEX		yylex (&yylval)
#  endif
# endif /* !YYLSP_NEEDED */
#else /* !YYPURE */
# define YYLEX			yylex ()
#endif /* !YYPURE */


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (0)
/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
#endif /* !YYDEBUG */

/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#if YYMAXDEPTH == 0
# undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif

#ifdef YYERROR_VERBOSE

# ifndef yystrlen
#  if defined (__GLIBC__) && defined (_STRING_H)
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
#   if defined (__STDC__) || defined (__cplusplus)
yystrlen (const char *yystr)
#   else
yystrlen (yystr)
     const char *yystr;
#   endif
{
  register const char *yys = yystr;

  while (*yys++ != '\0')
    continue;

  return yys - yystr - 1;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
#   if defined (__STDC__) || defined (__cplusplus)
yystpcpy (char *yydest, const char *yysrc)
#   else
yystpcpy (yydest, yysrc)
     char *yydest;
     const char *yysrc;
#   endif
{
  register char *yyd = yydest;
  register const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif
#endif

#line 315 "/usr/share/bison/bison.simple"


/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
# if defined (__STDC__) || defined (__cplusplus)
#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL
# else
#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
# endif
#else /* !YYPARSE_PARAM */
# define YYPARSE_PARAM_ARG
# define YYPARSE_PARAM_DECL
#endif /* !YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
# ifdef YYPARSE_PARAM
int yyparse (void *);
# else
int yyparse (void);
# endif
#endif

/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
   variables are global, or local to YYPARSE.  */

#define YY_DECL_NON_LSP_VARIABLES			\
/* The lookahead symbol.  */				\
int yychar;						\
							\
/* The semantic value of the lookahead symbol. */	\
YYSTYPE yylval;						\
							\
/* Number of parse errors so far.  */			\
int yynerrs;

#if YYLSP_NEEDED
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES			\
						\
/* Location data for the lookahead symbol.  */	\
YYLTYPE yylloc;
#else
# define YY_DECL_VARIABLES			\
YY_DECL_NON_LSP_VARIABLES
#endif


/* If nonreentrant, generate the variables here. */

#if !YYPURE
YY_DECL_VARIABLES
#endif  /* !YYPURE */

int
yyparse (YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  /* If reentrant, generate the variables here. */
#if YYPURE
  YY_DECL_VARIABLES
#endif  /* !YYPURE */

  register int yystate;
  register int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Lookahead token as an internal (translated) token number.  */
  int yychar1 = 0;

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack. */
  short	yyssa[YYINITDEPTH];
  short *yyss = yyssa;
  register short *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  register YYSTYPE *yyvsp;

#if YYLSP_NEEDED
  /* The location stack.  */
  YYLTYPE yylsa[YYINITDEPTH];
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;
#endif

#if YYLSP_NEEDED
# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
# define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  YYSIZE_T yystacksize = YYINITDEPTH;


  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
#if YYLSP_NEEDED
  YYLTYPE yyloc;
#endif

  /* When reducing, the number of symbols on the RHS of the reduced
     rule. */
  int yylen;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;
#if YYLSP_NEEDED
  yylsp = yyls;
#endif
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed. so pushing a state here evens the stacks.
     */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack. Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	short *yyss1 = yyss;

	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  */
# if YYLSP_NEEDED
	YYLTYPE *yyls1 = yyls;
	/* This used to be a conditional around just the two extra args,
	   but that might be undefined if yyoverflow is a macro.  */
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yyls1, yysize * sizeof (*yylsp),
		    &yystacksize);
	yyls = yyls1;
# else
	yyoverflow ("parser stack overflow",
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),
		    &yystacksize);
# endif
	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyoverflowlab;
# else
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	goto yyoverflowlab;
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;

      {
	short *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyoverflowlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
# if YYLSP_NEEDED
	YYSTACK_RELOCATE (yyls);
# endif
# undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
#if YYLSP_NEEDED
      yylsp = yyls + yysize - 1;
#endif

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yychar1 = YYTRANSLATE (yychar);

#if YYDEBUG
     /* We have to keep this `#if YYDEBUG', since we use variables
	which are defined only if `YYDEBUG' is set.  */
      if (yydebug)
	{
	  YYFPRINTF (stderr, "Next token is %d (%s",
		     yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise
	     meaning of a token, for further debugging info.  */
# ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
# endif
	  YYFPRINTF (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */
  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
	      yychar, yytname[yychar1]));

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  yystate = yyn;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to the semantic value of
     the lookahead token.  This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

#if YYLSP_NEEDED
  /* Similarly for the default location.  Let the user run additional
     commands if for instance locations are ranges.  */
  yyloc = yylsp[1-yylen];
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
#endif

#if YYDEBUG
  /* We have to keep this `#if YYDEBUG', since we use variables which
     are defined only if `YYDEBUG' is set.  */
  if (yydebug)
    {
      int yyi;

      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
		 yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif

  switch (yyn) {

case 4:
#line 173 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 5:
#line 179 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 6:
#line 180 "Gmsh.y"
{ yyval.d = -yyvsp[0].d; ;
    break;}
case 7:
#line 185 "Gmsh.y"
{
      yymsg(INFO, "STL file format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 8:
#line 199 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 9:
#line 206 "Gmsh.y"
{
      yymsg(INFO, "STL file format read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 12:
#line 221 "Gmsh.y"
{ return 1; ;
    break;}
case 13:
#line 222 "Gmsh.y"
{ return 1; ;
    break;}
case 14:
#line 223 "Gmsh.y"
{ return 1; ;
    break;}
case 15:
#line 228 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 16:
#line 233 "Gmsh.y"
{
      yymsg(INFO, "Step Iso-10303-21 file format read");
      Resolve_BREP ();
    ;
    break;}
case 20:
#line 244 "Gmsh.y"
{
    ;
    break;}
case 21:
#line 247 "Gmsh.y"
{
    ;
    break;}
case 22:
#line 251 "Gmsh.y"
{
   ;
    break;}
case 23:
#line 257 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 24:
#line 263 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 25:
#line 270 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 26:
#line 276 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 27:
#line 280 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 28:
#line 284 "Gmsh.y"
{
      // check the norm! Face_Bound : hole outside surface!
      yymsg(INFO, "Found a face bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 29:
#line 291 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 295 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 31:
#line 300 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 32:
#line 304 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 33:
#line 308 "Gmsh.y"
{
    ;
    break;}
case 34:
#line 312 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 35:
#line 316 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 36:
#line 320 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 37:
#line 324 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 38:
#line 328 "Gmsh.y"
{
      yymsg(INFO, "Found a closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 39:
#line 334 "Gmsh.y"
{
    ;
    break;}
case 40:
#line 337 "Gmsh.y"
{
    ;
    break;}
case 41:
#line 340 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 42:
#line 344 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 43:
#line 348 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 44:
#line 352 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 45:
#line 356 "Gmsh.y"
{
      Add_Ellipse((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 46:
#line 361 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 364 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 368 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 371 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 375 "Gmsh.y"
{
    ;
    break;}
case 51:
#line 378 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 381 "Gmsh.y"
{
    ;
    break;}
case 53:
#line 389 "Gmsh.y"
{
  ;
    break;}
case 54:
#line 392 "Gmsh.y"
{
      yymsg(INFO, "Gmsh file format read");
    ;
    break;}
case 55:
#line 398 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 399 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 400 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 401 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 402 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 403 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 404 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 405 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 406 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 407 "Gmsh.y"
{ return 1; ;
    break;}
case 65:
#line 408 "Gmsh.y"
{ return 1; ;
    break;}
case 66:
#line 409 "Gmsh.y"
{ return 1; ;
    break;}
case 67:
#line 410 "Gmsh.y"
{ return 1; ;
    break;}
case 68:
#line 415 "Gmsh.y"
{
      Msg(DIRECT, yyvsp[-2].c);
    ;
    break;}
case 69:
#line 419 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-4].c,yyvsp[-2].l,tmpstring);
      if(i<0) 
	yymsg(GERROR, "Too few arguments in Printf");
      else if(i>0)
	yymsg(GERROR, "Too many arguments (%d) in Printf", i);
      else
	Msg(DIRECT, tmpstring);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 70:
#line 435 "Gmsh.y"
{ 
      if(!strcmp(yyvsp[-5].c, "View")) EndView(View, 1, yyname, yyvsp[-4].c); 
    ;
    break;}
case 71:
#line 439 "Gmsh.y"
{
      if(!strcmp(yyvsp[-7].c, "View")) EndView(View, 1, yyname, yyvsp[-6].c);
    ;
    break;}
case 72:
#line 446 "Gmsh.y"
{
      View = BeginView(1); 
    ;
    break;}
case 99:
#line 479 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 100:
#line 481 "Gmsh.y"
{ List_Add(View->SP, &yyvsp[0].d) ; ;
    break;}
case 101:
#line 486 "Gmsh.y"
{ 
      List_Add(View->SP, &yyvsp[-5].d); List_Add(View->SP, &yyvsp[-3].d);
      List_Add(View->SP, &yyvsp[-1].d);
    ;
    break;}
case 102:
#line 491 "Gmsh.y"
{
      View->NbSP++ ;
    ;
    break;}
case 103:
#line 498 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 104:
#line 500 "Gmsh.y"
{ List_Add(View->VP, &yyvsp[0].d) ; ;
    break;}
case 105:
#line 505 "Gmsh.y"
{ 
      List_Add(View->VP, &yyvsp[-5].d); List_Add(View->VP, &yyvsp[-3].d);
      List_Add(View->VP, &yyvsp[-1].d); 
    ;
    break;}
case 106:
#line 510 "Gmsh.y"
{
      View->NbVP++ ;
    ;
    break;}
case 107:
#line 517 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 108:
#line 519 "Gmsh.y"
{ List_Add(View->TP, &yyvsp[0].d) ; ;
    break;}
case 109:
#line 524 "Gmsh.y"
{ 
      List_Add(View->TP, &yyvsp[-5].d); List_Add(View->TP, &yyvsp[-3].d);
      List_Add(View->TP, &yyvsp[-1].d);
    ;
    break;}
case 110:
#line 529 "Gmsh.y"
{
      View->NbTP++ ;
    ;
    break;}
case 111:
#line 536 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 112:
#line 538 "Gmsh.y"
{ List_Add(View->SL, &yyvsp[0].d) ; ;
    break;}
case 113:
#line 544 "Gmsh.y"
{ 
      List_Add(View->SL, &yyvsp[-11].d); List_Add(View->SL, &yyvsp[-5].d);
      List_Add(View->SL, &yyvsp[-9].d); List_Add(View->SL, &yyvsp[-3].d);
      List_Add(View->SL, &yyvsp[-7].d); List_Add(View->SL, &yyvsp[-1].d);
    ;
    break;}
case 114:
#line 550 "Gmsh.y"
{
      View->NbSL++ ;
    ;
    break;}
case 115:
#line 557 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 116:
#line 559 "Gmsh.y"
{ List_Add(View->VL, &yyvsp[0].d) ; ;
    break;}
case 117:
#line 565 "Gmsh.y"
{ 
      List_Add(View->VL, &yyvsp[-11].d); List_Add(View->VL, &yyvsp[-5].d);
      List_Add(View->VL, &yyvsp[-9].d); List_Add(View->VL, &yyvsp[-3].d);
      List_Add(View->VL, &yyvsp[-7].d); List_Add(View->VL, &yyvsp[-1].d);
    ;
    break;}
case 118:
#line 571 "Gmsh.y"
{
      View->NbVL++ ;
    ;
    break;}
case 119:
#line 578 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 120:
#line 580 "Gmsh.y"
{ List_Add(View->TL, &yyvsp[0].d) ; ;
    break;}
case 121:
#line 586 "Gmsh.y"
{ 
      List_Add(View->TL, &yyvsp[-11].d); List_Add(View->TL, &yyvsp[-5].d);
      List_Add(View->TL, &yyvsp[-9].d); List_Add(View->TL, &yyvsp[-3].d);
      List_Add(View->TL, &yyvsp[-7].d); List_Add(View->TL, &yyvsp[-1].d);
    ;
    break;}
case 122:
#line 592 "Gmsh.y"
{
      View->NbTL++ ;
    ;
    break;}
case 123:
#line 599 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 124:
#line 601 "Gmsh.y"
{ List_Add(View->ST, &yyvsp[0].d) ; ;
    break;}
case 125:
#line 608 "Gmsh.y"
{ 
      List_Add(View->ST, &yyvsp[-17].d); List_Add(View->ST, &yyvsp[-11].d);
      List_Add(View->ST, &yyvsp[-5].d);
      List_Add(View->ST, &yyvsp[-15].d); List_Add(View->ST, &yyvsp[-9].d);
      List_Add(View->ST, &yyvsp[-3].d);
      List_Add(View->ST, &yyvsp[-13].d); List_Add(View->ST, &yyvsp[-7].d);
      List_Add(View->ST, &yyvsp[-1].d);
    ;
    break;}
case 126:
#line 617 "Gmsh.y"
{
      View->NbST++ ;
    ;
    break;}
case 127:
#line 624 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 128:
#line 626 "Gmsh.y"
{ List_Add(View->VT, &yyvsp[0].d) ; ;
    break;}
case 129:
#line 633 "Gmsh.y"
{ 
      List_Add(View->VT, &yyvsp[-17].d); List_Add(View->VT, &yyvsp[-11].d);
      List_Add(View->VT, &yyvsp[-5].d);
      List_Add(View->VT, &yyvsp[-15].d); List_Add(View->VT, &yyvsp[-9].d);
      List_Add(View->VT, &yyvsp[-3].d);
      List_Add(View->VT, &yyvsp[-13].d); List_Add(View->VT, &yyvsp[-7].d);
      List_Add(View->VT, &yyvsp[-1].d);
    ;
    break;}
case 130:
#line 642 "Gmsh.y"
{
      View->NbVT++ ;
    ;
    break;}
case 131:
#line 649 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 132:
#line 651 "Gmsh.y"
{ List_Add(View->TT, &yyvsp[0].d) ; ;
    break;}
case 133:
#line 658 "Gmsh.y"
{ 
      List_Add(View->TT, &yyvsp[-17].d); List_Add(View->TT, &yyvsp[-11].d);
      List_Add(View->TT, &yyvsp[-5].d);
      List_Add(View->TT, &yyvsp[-15].d); List_Add(View->TT, &yyvsp[-9].d);
      List_Add(View->TT, &yyvsp[-3].d);
      List_Add(View->TT, &yyvsp[-13].d); List_Add(View->TT, &yyvsp[-7].d);
      List_Add(View->TT, &yyvsp[-1].d);
    ;
    break;}
case 134:
#line 667 "Gmsh.y"
{
      View->NbTT++ ;
    ;
    break;}
case 135:
#line 674 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 136:
#line 676 "Gmsh.y"
{ List_Add(View->SQ, &yyvsp[0].d) ; ;
    break;}
case 137:
#line 684 "Gmsh.y"
{ 
      List_Add(View->SQ, &yyvsp[-23].d);  List_Add(View->SQ, &yyvsp[-17].d);
      List_Add(View->SQ, &yyvsp[-11].d); List_Add(View->SQ, &yyvsp[-5].d);
      List_Add(View->SQ, &yyvsp[-21].d);  List_Add(View->SQ, &yyvsp[-15].d);
      List_Add(View->SQ, &yyvsp[-9].d); List_Add(View->SQ, &yyvsp[-3].d);
      List_Add(View->SQ, &yyvsp[-19].d);  List_Add(View->SQ, &yyvsp[-13].d);
      List_Add(View->SQ, &yyvsp[-7].d); List_Add(View->SQ, &yyvsp[-1].d);
    ;
    break;}
case 138:
#line 693 "Gmsh.y"
{
      View->NbSQ++ ;
    ;
    break;}
case 139:
#line 700 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 140:
#line 702 "Gmsh.y"
{ List_Add(View->VQ, &yyvsp[0].d) ; ;
    break;}
case 141:
#line 710 "Gmsh.y"
{ 
      List_Add(View->VQ, &yyvsp[-23].d);  List_Add(View->VQ, &yyvsp[-17].d);
      List_Add(View->VQ, &yyvsp[-11].d); List_Add(View->VQ, &yyvsp[-5].d);
      List_Add(View->VQ, &yyvsp[-21].d);  List_Add(View->VQ, &yyvsp[-15].d);
      List_Add(View->VQ, &yyvsp[-9].d); List_Add(View->VQ, &yyvsp[-3].d);
      List_Add(View->VQ, &yyvsp[-19].d);  List_Add(View->VQ, &yyvsp[-13].d);
      List_Add(View->VQ, &yyvsp[-7].d); List_Add(View->VQ, &yyvsp[-1].d);
    ;
    break;}
case 142:
#line 719 "Gmsh.y"
{
      View->NbVQ++ ;
    ;
    break;}
case 143:
#line 726 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 144:
#line 728 "Gmsh.y"
{ List_Add(View->TQ, &yyvsp[0].d) ; ;
    break;}
case 145:
#line 736 "Gmsh.y"
{ 
      List_Add(View->TQ, &yyvsp[-23].d);  List_Add(View->TQ, &yyvsp[-17].d);
      List_Add(View->TQ, &yyvsp[-11].d); List_Add(View->TQ, &yyvsp[-5].d);
      List_Add(View->TQ, &yyvsp[-21].d);  List_Add(View->TQ, &yyvsp[-15].d);
      List_Add(View->TQ, &yyvsp[-9].d); List_Add(View->TQ, &yyvsp[-3].d);
      List_Add(View->TQ, &yyvsp[-19].d);  List_Add(View->TQ, &yyvsp[-13].d);
      List_Add(View->TQ, &yyvsp[-7].d); List_Add(View->TQ, &yyvsp[-1].d);
    ;
    break;}
case 146:
#line 745 "Gmsh.y"
{
      View->NbTQ++ ;
    ;
    break;}
case 147:
#line 752 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 148:
#line 754 "Gmsh.y"
{ List_Add(View->SS, &yyvsp[0].d) ; ;
    break;}
case 149:
#line 762 "Gmsh.y"
{ 
      List_Add(View->SS, &yyvsp[-23].d);  List_Add(View->SS, &yyvsp[-17].d);
      List_Add(View->SS, &yyvsp[-11].d); List_Add(View->SS, &yyvsp[-5].d);
      List_Add(View->SS, &yyvsp[-21].d);  List_Add(View->SS, &yyvsp[-15].d);
      List_Add(View->SS, &yyvsp[-9].d); List_Add(View->SS, &yyvsp[-3].d);
      List_Add(View->SS, &yyvsp[-19].d);  List_Add(View->SS, &yyvsp[-13].d);
      List_Add(View->SS, &yyvsp[-7].d); List_Add(View->SS, &yyvsp[-1].d);
    ;
    break;}
case 150:
#line 771 "Gmsh.y"
{
      View->NbSS++ ;
    ;
    break;}
case 151:
#line 778 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 152:
#line 780 "Gmsh.y"
{ List_Add(View->VS, &yyvsp[0].d) ; ;
    break;}
case 153:
#line 788 "Gmsh.y"
{ 
      List_Add(View->VS, &yyvsp[-23].d);  List_Add(View->VS, &yyvsp[-17].d);
      List_Add(View->VS, &yyvsp[-11].d); List_Add(View->VS, &yyvsp[-5].d);
      List_Add(View->VS, &yyvsp[-21].d);  List_Add(View->VS, &yyvsp[-15].d);
      List_Add(View->VS, &yyvsp[-9].d); List_Add(View->VS, &yyvsp[-3].d);
      List_Add(View->VS, &yyvsp[-19].d);  List_Add(View->VS, &yyvsp[-13].d);
      List_Add(View->VS, &yyvsp[-7].d); List_Add(View->VS, &yyvsp[-1].d);
    ;
    break;}
case 154:
#line 797 "Gmsh.y"
{
      View->NbVS++ ;
    ;
    break;}
case 155:
#line 804 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 156:
#line 806 "Gmsh.y"
{ List_Add(View->TS, &yyvsp[0].d) ; ;
    break;}
case 157:
#line 814 "Gmsh.y"
{ 
      List_Add(View->TS, &yyvsp[-23].d);  List_Add(View->TS, &yyvsp[-17].d);
      List_Add(View->TS, &yyvsp[-11].d); List_Add(View->TS, &yyvsp[-5].d);
      List_Add(View->TS, &yyvsp[-21].d);  List_Add(View->TS, &yyvsp[-15].d);
      List_Add(View->TS, &yyvsp[-9].d); List_Add(View->TS, &yyvsp[-3].d);
      List_Add(View->TS, &yyvsp[-19].d);  List_Add(View->TS, &yyvsp[-13].d);
      List_Add(View->TS, &yyvsp[-7].d); List_Add(View->TS, &yyvsp[-1].d);
    ;
    break;}
case 158:
#line 823 "Gmsh.y"
{
      View->NbTS++ ;
    ;
    break;}
case 159:
#line 830 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 160:
#line 832 "Gmsh.y"
{ List_Add(View->SH, &yyvsp[0].d) ; ;
    break;}
case 161:
#line 844 "Gmsh.y"
{ 
      List_Add(View->SH, &yyvsp[-47].d);  List_Add(View->SH, &yyvsp[-41].d);
      List_Add(View->SH, &yyvsp[-35].d); List_Add(View->SH, &yyvsp[-29].d);
      List_Add(View->SH, &yyvsp[-23].d); List_Add(View->SH, &yyvsp[-17].d);
      List_Add(View->SH, &yyvsp[-11].d); List_Add(View->SH, &yyvsp[-5].d);
      List_Add(View->SH, &yyvsp[-45].d);  List_Add(View->SH, &yyvsp[-39].d);
      List_Add(View->SH, &yyvsp[-33].d); List_Add(View->SH, &yyvsp[-27].d);
      List_Add(View->SH, &yyvsp[-21].d); List_Add(View->SH, &yyvsp[-15].d);
      List_Add(View->SH, &yyvsp[-9].d); List_Add(View->SH, &yyvsp[-3].d);
      List_Add(View->SH, &yyvsp[-43].d);  List_Add(View->SH, &yyvsp[-37].d);
      List_Add(View->SH, &yyvsp[-31].d); List_Add(View->SH, &yyvsp[-25].d);
      List_Add(View->SH, &yyvsp[-19].d); List_Add(View->SH, &yyvsp[-13].d);
      List_Add(View->SH, &yyvsp[-7].d); List_Add(View->SH, &yyvsp[-1].d);
    ;
    break;}
case 162:
#line 859 "Gmsh.y"
{
      View->NbSH++ ;
    ;
    break;}
case 163:
#line 866 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 164:
#line 868 "Gmsh.y"
{ List_Add(View->VH, &yyvsp[0].d) ; ;
    break;}
case 165:
#line 880 "Gmsh.y"
{ 
      List_Add(View->VH, &yyvsp[-47].d);  List_Add(View->VH, &yyvsp[-41].d);
      List_Add(View->VH, &yyvsp[-35].d); List_Add(View->VH, &yyvsp[-29].d);
      List_Add(View->VH, &yyvsp[-23].d); List_Add(View->VH, &yyvsp[-17].d);
      List_Add(View->VH, &yyvsp[-11].d); List_Add(View->VH, &yyvsp[-5].d);
      List_Add(View->VH, &yyvsp[-45].d);  List_Add(View->VH, &yyvsp[-39].d);
      List_Add(View->VH, &yyvsp[-33].d); List_Add(View->VH, &yyvsp[-27].d);
      List_Add(View->VH, &yyvsp[-21].d); List_Add(View->VH, &yyvsp[-15].d);
      List_Add(View->VH, &yyvsp[-9].d); List_Add(View->VH, &yyvsp[-3].d);
      List_Add(View->VH, &yyvsp[-43].d);  List_Add(View->VH, &yyvsp[-37].d);
      List_Add(View->VH, &yyvsp[-31].d); List_Add(View->VH, &yyvsp[-25].d);
      List_Add(View->VH, &yyvsp[-19].d); List_Add(View->VH, &yyvsp[-13].d);
      List_Add(View->VH, &yyvsp[-7].d); List_Add(View->VH, &yyvsp[-1].d);
    ;
    break;}
case 166:
#line 895 "Gmsh.y"
{
      View->NbVH++ ;
    ;
    break;}
case 167:
#line 902 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 168:
#line 904 "Gmsh.y"
{ List_Add(View->TH, &yyvsp[0].d) ; ;
    break;}
case 169:
#line 916 "Gmsh.y"
{ 
      List_Add(View->TH, &yyvsp[-47].d);  List_Add(View->TH, &yyvsp[-41].d);
      List_Add(View->TH, &yyvsp[-35].d); List_Add(View->TH, &yyvsp[-29].d);
      List_Add(View->TH, &yyvsp[-23].d); List_Add(View->TH, &yyvsp[-17].d);
      List_Add(View->TH, &yyvsp[-11].d); List_Add(View->TH, &yyvsp[-5].d);
      List_Add(View->TH, &yyvsp[-45].d);  List_Add(View->TH, &yyvsp[-39].d);
      List_Add(View->TH, &yyvsp[-33].d); List_Add(View->TH, &yyvsp[-27].d);
      List_Add(View->TH, &yyvsp[-21].d); List_Add(View->TH, &yyvsp[-15].d);
      List_Add(View->TH, &yyvsp[-9].d); List_Add(View->TH, &yyvsp[-3].d);
      List_Add(View->TH, &yyvsp[-43].d);  List_Add(View->TH, &yyvsp[-37].d);
      List_Add(View->TH, &yyvsp[-31].d); List_Add(View->TH, &yyvsp[-25].d);
      List_Add(View->TH, &yyvsp[-19].d); List_Add(View->TH, &yyvsp[-13].d);
      List_Add(View->TH, &yyvsp[-7].d); List_Add(View->TH, &yyvsp[-1].d);
    ;
    break;}
case 170:
#line 931 "Gmsh.y"
{
      View->NbTH++ ;
    ;
    break;}
case 171:
#line 938 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 172:
#line 940 "Gmsh.y"
{ List_Add(View->SI, &yyvsp[0].d) ; ;
    break;}
case 173:
#line 950 "Gmsh.y"
{ 
      List_Add(View->SI, &yyvsp[-35].d);  List_Add(View->SI, &yyvsp[-29].d);
      List_Add(View->SI, &yyvsp[-23].d); List_Add(View->SI, &yyvsp[-17].d);
      List_Add(View->SI, &yyvsp[-11].d); List_Add(View->SI, &yyvsp[-5].d);
      List_Add(View->SI, &yyvsp[-33].d);  List_Add(View->SI, &yyvsp[-27].d);
      List_Add(View->SI, &yyvsp[-21].d); List_Add(View->SI, &yyvsp[-15].d);
      List_Add(View->SI, &yyvsp[-9].d); List_Add(View->SI, &yyvsp[-3].d);
      List_Add(View->SI, &yyvsp[-31].d);  List_Add(View->SI, &yyvsp[-25].d);
      List_Add(View->SI, &yyvsp[-19].d); List_Add(View->SI, &yyvsp[-13].d);
      List_Add(View->SI, &yyvsp[-7].d); List_Add(View->SI, &yyvsp[-1].d);
    ;
    break;}
case 174:
#line 962 "Gmsh.y"
{
      View->NbSI++ ;
    ;
    break;}
case 175:
#line 969 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 176:
#line 971 "Gmsh.y"
{ List_Add(View->VI, &yyvsp[0].d) ; ;
    break;}
case 177:
#line 981 "Gmsh.y"
{ 
      List_Add(View->VI, &yyvsp[-35].d);  List_Add(View->VI, &yyvsp[-29].d);
      List_Add(View->VI, &yyvsp[-23].d); List_Add(View->VI, &yyvsp[-17].d);
      List_Add(View->VI, &yyvsp[-11].d); List_Add(View->VI, &yyvsp[-5].d);
      List_Add(View->VI, &yyvsp[-33].d);  List_Add(View->VI, &yyvsp[-27].d);
      List_Add(View->VI, &yyvsp[-21].d); List_Add(View->VI, &yyvsp[-15].d);
      List_Add(View->VI, &yyvsp[-9].d); List_Add(View->VI, &yyvsp[-3].d);
      List_Add(View->VI, &yyvsp[-31].d);  List_Add(View->VI, &yyvsp[-25].d);
      List_Add(View->VI, &yyvsp[-19].d); List_Add(View->VI, &yyvsp[-13].d);
      List_Add(View->VI, &yyvsp[-7].d); List_Add(View->VI, &yyvsp[-1].d);
    ;
    break;}
case 178:
#line 993 "Gmsh.y"
{
      View->NbVI++ ;
    ;
    break;}
case 179:
#line 1000 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 180:
#line 1002 "Gmsh.y"
{ List_Add(View->TI, &yyvsp[0].d) ; ;
    break;}
case 181:
#line 1012 "Gmsh.y"
{ 
      List_Add(View->TI, &yyvsp[-35].d);  List_Add(View->TI, &yyvsp[-29].d);
      List_Add(View->TI, &yyvsp[-23].d); List_Add(View->TI, &yyvsp[-17].d);
      List_Add(View->TI, &yyvsp[-11].d); List_Add(View->TI, &yyvsp[-5].d);
      List_Add(View->TI, &yyvsp[-33].d);  List_Add(View->TI, &yyvsp[-27].d);
      List_Add(View->TI, &yyvsp[-21].d); List_Add(View->TI, &yyvsp[-15].d);
      List_Add(View->TI, &yyvsp[-9].d); List_Add(View->TI, &yyvsp[-3].d);
      List_Add(View->TI, &yyvsp[-31].d);  List_Add(View->TI, &yyvsp[-25].d);
      List_Add(View->TI, &yyvsp[-19].d); List_Add(View->TI, &yyvsp[-13].d);
      List_Add(View->TI, &yyvsp[-7].d); List_Add(View->TI, &yyvsp[-1].d);
    ;
    break;}
case 182:
#line 1024 "Gmsh.y"
{
      View->NbTI++ ;
    ;
    break;}
case 183:
#line 1031 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 184:
#line 1033 "Gmsh.y"
{ List_Add(View->SY, &yyvsp[0].d) ; ;
    break;}
case 185:
#line 1042 "Gmsh.y"
{ 
      List_Add(View->SY, &yyvsp[-29].d);  List_Add(View->SY, &yyvsp[-23].d);
      List_Add(View->SY, &yyvsp[-17].d); List_Add(View->SY, &yyvsp[-11].d);
      List_Add(View->SY, &yyvsp[-5].d);
      List_Add(View->SY, &yyvsp[-27].d);  List_Add(View->SY, &yyvsp[-21].d);
      List_Add(View->SY, &yyvsp[-15].d); List_Add(View->SY, &yyvsp[-9].d);
      List_Add(View->SY, &yyvsp[-3].d);
      List_Add(View->SY, &yyvsp[-25].d);  List_Add(View->SY, &yyvsp[-19].d);
      List_Add(View->SY, &yyvsp[-13].d); List_Add(View->SY, &yyvsp[-7].d);
      List_Add(View->SY, &yyvsp[-1].d);
    ;
    break;}
case 186:
#line 1054 "Gmsh.y"
{
      View->NbSY++ ;
    ;
    break;}
case 187:
#line 1061 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 188:
#line 1063 "Gmsh.y"
{ List_Add(View->VY, &yyvsp[0].d) ; ;
    break;}
case 189:
#line 1072 "Gmsh.y"
{ 
      List_Add(View->VY, &yyvsp[-29].d);  List_Add(View->VY, &yyvsp[-23].d);
      List_Add(View->VY, &yyvsp[-17].d); List_Add(View->VY, &yyvsp[-11].d);
      List_Add(View->VY, &yyvsp[-5].d);
      List_Add(View->VY, &yyvsp[-27].d);  List_Add(View->VY, &yyvsp[-21].d);
      List_Add(View->VY, &yyvsp[-15].d); List_Add(View->VY, &yyvsp[-9].d);
      List_Add(View->VY, &yyvsp[-3].d);
      List_Add(View->VY, &yyvsp[-25].d);  List_Add(View->VY, &yyvsp[-19].d);
      List_Add(View->VY, &yyvsp[-13].d); List_Add(View->VY, &yyvsp[-7].d);
      List_Add(View->VY, &yyvsp[-1].d);
    ;
    break;}
case 190:
#line 1084 "Gmsh.y"
{
      View->NbVY++ ;
    ;
    break;}
case 191:
#line 1091 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 192:
#line 1093 "Gmsh.y"
{ List_Add(View->TY, &yyvsp[0].d) ; ;
    break;}
case 193:
#line 1102 "Gmsh.y"
{ 
      List_Add(View->TY, &yyvsp[-29].d);  List_Add(View->TY, &yyvsp[-23].d);
      List_Add(View->TY, &yyvsp[-17].d); List_Add(View->TY, &yyvsp[-11].d);
      List_Add(View->TY, &yyvsp[-5].d);
      List_Add(View->TY, &yyvsp[-27].d);  List_Add(View->TY, &yyvsp[-21].d);
      List_Add(View->TY, &yyvsp[-15].d); List_Add(View->TY, &yyvsp[-9].d);
      List_Add(View->TY, &yyvsp[-3].d);
      List_Add(View->TY, &yyvsp[-25].d);  List_Add(View->TY, &yyvsp[-19].d);
      List_Add(View->TY, &yyvsp[-13].d); List_Add(View->TY, &yyvsp[-7].d);
      List_Add(View->TY, &yyvsp[-1].d);
    ;
    break;}
case 194:
#line 1114 "Gmsh.y"
{
      View->NbTY++ ;
    ;
    break;}
case 195:
#line 1121 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 196:
#line 1126 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T2C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 197:
#line 1134 "Gmsh.y"
{ 
      List_Add(View->T2D, &yyvsp[-5].d); List_Add(View->T2D, &yyvsp[-3].d);
      List_Add(View->T2D, &yyvsp[-1].d); 
      d = List_Nbr(View->T2C);
      List_Add(View->T2D, &d); 
    ;
    break;}
case 198:
#line 1141 "Gmsh.y"
{
      View->NbT2++ ;
    ;
    break;}
case 199:
#line 1148 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 200:
#line 1153 "Gmsh.y"
{ 
      for(i=0; i<(int)strlen(yyvsp[0].c)+1; i++) List_Add(View->T3C, &yyvsp[0].c[i]) ; 
      Free(yyvsp[0].c);
    ;
    break;}
case 201:
#line 1161 "Gmsh.y"
{ 
      List_Add(View->T3D, &yyvsp[-7].d); List_Add(View->T3D, &yyvsp[-5].d);
      List_Add(View->T3D, &yyvsp[-3].d); List_Add(View->T3D, &yyvsp[-1].d); 
      d = List_Nbr(View->T3C);
      List_Add(View->T3D, &d); 
    ;
    break;}
case 202:
#line 1168 "Gmsh.y"
{
      View->NbT3++ ;
    ;
    break;}
case 203:
#line 1177 "Gmsh.y"
{ yyval.i = 0 ; ;
    break;}
case 204:
#line 1178 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 205:
#line 1179 "Gmsh.y"
{ yyval.i = 2 ; ;
    break;}
case 206:
#line 1180 "Gmsh.y"
{ yyval.i = 3 ; ;
    break;}
case 207:
#line 1181 "Gmsh.y"
{ yyval.i = 4 ; ;
    break;}
case 208:
#line 1185 "Gmsh.y"
{ yyval.i = 1 ; ;
    break;}
case 209:
#line 1186 "Gmsh.y"
{ yyval.i = -1 ; ;
    break;}
case 210:
#line 1194 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, 0, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
      }
      else{
	pd = (double*)List_Pointer_Fast(pSymbol->val, 0) ; 
	switch(yyvsp[-2].i){
	case 0 : *pd = yyvsp[-1].d; break ;
	case 1 : *pd += yyvsp[-1].d ; break ;
	case 2 : *pd -= yyvsp[-1].d ; break ;
	case 3 : *pd *= yyvsp[-1].d ; break ;
	case 4 : 
	  if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	  else yymsg(GERROR, "Division by zero in '%s /= %g'", yyvsp[-3].c, yyvsp[-1].d);
	  break;
	}
      }
    ;
    break;}
case 211:
#line 1221 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	if(!yyvsp[-2].i){
	  List_Put(TheSymbol.val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  List_Add(Symbol_L, &TheSymbol);
	}
	else
	  yymsg(GERROR, "Unknown variable '%s'", yyvsp[-6].c) ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-4].d))){
	  switch(yyvsp[-2].i){
	  case 0 : *pd = yyvsp[-1].d; break ;
	  case 1 : *pd += yyvsp[-1].d ; break ;
	  case 2 : *pd -= yyvsp[-1].d ; break ;
	  case 3 : *pd *= yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) *pd /= yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].d);
	    break;
	  }
	}
	else{
	  if(!yyvsp[-2].i)
	    List_Put(pSymbol->val, (int)yyvsp[-4].d, &yyvsp[-1].d);
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-6].c, (int)yyvsp[-4].d) ;
	}
      }
    ;
    break;}
case 212:
#line 1255 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-5].l) != List_Nbr(yyvsp[-1].l))
	yymsg(GERROR, "Incompatible array dimensions in affectation");
      else{
	TheSymbol.Name = yyvsp[-8].c;
	if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	  TheSymbol.val = List_Create(5,5,sizeof(double));
	  if(!yyvsp[-2].i){
	    for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	      List_Put(TheSymbol.val, (int)(*(double*)List_Pointer(yyvsp[-5].l,i)),
		       (double*)List_Pointer(yyvsp[-1].l,i));
	    }
	    List_Add(Symbol_L, &TheSymbol);
	  }
	  else
	    yymsg(GERROR, "Unknown variable '%s'", yyvsp[-8].c) ;
	}
	else{
	  for(i=0 ; i<List_Nbr(yyvsp[-5].l) ; i++){
	    j = (int)(*(double*)List_Pointer(yyvsp[-5].l,i)) ;
	    d = *(double*)List_Pointer(yyvsp[-1].l,i) ;
	    if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	      switch(yyvsp[-2].i){
	      case 0 : *pd = d; break ;
	      case 1 : *pd += d ; break ;
	      case 2 : *pd -= d ; break ;
	      case 3 : *pd *= d ; break ;
	      case 4 : 
		if(yyvsp[-1].l) *pd /= d ; 
		else yymsg(GERROR, "Division by zero in '%s[%d] /= %g'", yyvsp[-8].c, j, d);
		break;
	      }
	    }
	    else{
	      if(!yyvsp[-2].i)
		List_Put(pSymbol->val, j, &d);
	      else
		yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-8].c, j) ;	  
	    }
	  }
	}
      }
      List_Delete(yyvsp[-5].l);
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 213:
#line 1302 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(5,5,sizeof(double));
	List_Copy(yyvsp[-1].l,TheSymbol.val);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Reset(pSymbol->val);
	List_Copy(yyvsp[-1].l, pSymbol->val);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 214:
#line 1317 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-2].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ; 
      else
	*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[-1].i; 
    ;
    break;}
case 215:
#line 1326 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols)))
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ; 
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-3].d)))
	  *pd += yyvsp[-1].i ;
	else
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, (int)yyvsp[-3].d) ;
      }
    ;
    break;}
case 216:
#line 1341 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-5].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else
	  pStrOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 217:
#line 1353 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-8].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-3].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else
	  pStrOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,yyvsp[-1].c) ;
      }
    ;
    break;}
case 218:
#line 1367 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
      else{
	if(!(pNumOpt = (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-5].c, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d ; break ;
	  case 1 : d = pNumOpt(0,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt(0,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt(0,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt(0,GMSH_GET,0) / yyvsp[-1].d ; 
	    else yymsg(GERROR, "Division by zero in '%s.%s /= %g'", yyvsp[-5].c, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt(0,GMSH_SET|GMSH_GUI, d) ;
	}
      }
    ;
    break;}
case 219:
#line 1390 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-8].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-8].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-3].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c);
	else{
	  switch(yyvsp[-2].i){
	  case 0 : d = yyvsp[-1].d; break ;
	  case 1 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) + yyvsp[-1].d ; break ;
	  case 2 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) - yyvsp[-1].d ; break ;
	  case 3 : d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) * yyvsp[-1].d ; break ;
	  case 4 : 
	    if(yyvsp[-1].d) d = pNumOpt((int)yyvsp[-6].d,GMSH_GET,0) / yyvsp[-1].d ;
	    else yymsg(GERROR, "Division by zero in '%s[%d].%s /= %g'", 
		       yyvsp[-8].c, (int)yyvsp[-6].d, yyvsp[-3].c, yyvsp[-1].d);
	    break;
	  }
	  pNumOpt((int)yyvsp[-6].d,GMSH_SET|GMSH_GUI,d) ;
	}
      }
    ;
    break;}
case 220:
#line 1414 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-4].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-4].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-4].c, yyvsp[-2].c);
	else
	  pNumOpt(0,GMSH_SET|GMSH_GUI,pNumOpt(0,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 221:
#line 1426 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-7].c);
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-2].c, pNumCat)))
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-7].c, (int)yyvsp[-5].d, yyvsp[-2].c);
	else
	  pNumOpt((int)yyvsp[-5].d,GMSH_SET|GMSH_GUI,pNumOpt((int)yyvsp[-5].d,GMSH_GET,0)+yyvsp[-1].i) ;
      }
    ;
    break;}
case 222:
#line 1440 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-7].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-7].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-7].c, yyvsp[-3].c);
	else
	  pColOpt(0,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 223:
#line 1452 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-10].c)))
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-10].c);
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[-3].c, pColCat)))
	  yymsg(GERROR, "Unknown color option '%s[%d].Color.%s'", yyvsp[-10].c, (int)yyvsp[-8].d, yyvsp[-3].c);
	else
	  pColOpt((int)yyvsp[-8].d,GMSH_SET|GMSH_GUI,yyvsp[-1].u) ;
      }
    ;
    break;}
case 224:
#line 1466 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable(0);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", 0);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		ct->size, COLORTABLE_NBMAX_COLOR, 0);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 225:
#line 1486 "Gmsh.y"
{
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-6].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-6].d);
      else{
	ct->size = List_Nbr(yyvsp[-1].l);
	if(ct->size > COLORTABLE_NBMAX_COLOR)
	  yymsg(GERROR, "Too many (%d>%d) colors in View[%d].ColorTable", 
		   ct->size, COLORTABLE_NBMAX_COLOR, (int)yyvsp[-6].d);
	else
	  for(i=0 ; i<ct->size ; i++) List_Read(yyvsp[-1].l, i, &ct->table[i]);
	if(ct->size == 1){
	  ct->size = 2;
	  ct->table[1] = ct->table[0];
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 226:
#line 1508 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].d); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 227:
#line 1520 "Gmsh.y"
{
      if(CTX.default_plugins){
	try {
	  GMSH_PluginManager::Instance()->SetPluginOption(yyvsp[-6].c,yyvsp[-3].c,yyvsp[-1].c); 
	}
	catch (...) {
	  yymsg(WARNING, "Unknown option '%s' or plugin '%s'",yyvsp[-3].c,yyvsp[-6].c);
	}
      }
    ;
    break;}
case 228:
#line 1540 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 229:
#line 1547 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 230:
#line 1553 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        v = FindPoint(ip,THEM);
        if(!v)
	  yymsg(WARNING, "Unknown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 231:
#line 1572 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindPoint((int)d,THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 232:
#line 1586 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 233:
#line 1592 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 234:
#line 1598 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-9].l);i++){
      	List_Read(yyvsp[-9].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  yymsg(WARNING, "Unknown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-6].d,yyvsp[-4].d,yyvsp[-2].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 235:
#line 1617 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 236:
#line 1623 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 237:
#line 1629 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 238:
#line 1646 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 239:
#line 1652 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 240:
#line 1658 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 241:
#line 1664 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for BSpline %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 242:
#line 1675 "Gmsh.y"
{
      if(List_Nbr(yyvsp[-1].l) > 3){
	Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BEZIER,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
	yyval.s.Type = MSH_SEGM_BSPLN;
	yyval.s.Num  = (int)yyvsp[-4].d;
      }
      else
	yymsg(GERROR, "Too few control points for Bezier %d (%d < 4)", (int)yyvsp[-4].d, 
	      List_Nbr(yyvsp[-1].l));
    ;
    break;}
case 243:
#line 1686 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yymsg(GERROR, "Wrong definition of Nurbs Curve %d: "
	      "got %d Knots, need N + D + 1 = %d + %d + 1 = %d",
	      (int)yyvsp[-8].d, 
	      List_Nbr(yyvsp[-3].l), List_Nbr(yyvsp[-5].l), (int)yyvsp[-1].d, List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1);
      }
      else{
	Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
	for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
	  List_Read(yyvsp[-5].l,i,&d);
	  j = (int)d;
	  List_Add(Temp,&j);
	}
	AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
	List_Delete(Temp);
      }
    ;
    break;}
case 244:
#line 1711 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 245:
#line 1717 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-4].d,THEM);
      if(!support)
	yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	Cdbz101((int)yyvsp[-8].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-2].l,NULL);
	s = FindSurface((int)yyvsp[-8].d,THEM);
	if(!s)
	  yymsg(GERROR, "Unknown Surface %d", (int)yyvsp[-8].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-8].d;
	}
      }
    ;
    break;}
case 246:
#line 1736 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	yymsg(GERROR, "Unknown Line Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  yymsg(GERROR, "Wrong definition of Ruled Surface %d: "
		   "%d borders instead of 3 or 4", 
		   (int)yyvsp[-4].d, j);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 247:
#line 1759 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 248:
#line 1767 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 249:
#line 1771 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 250:
#line 1777 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 251:
#line 1786 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 252:
#line 1792 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 253:
#line 1798 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 254:
#line 1809 "Gmsh.y"
{
      TranslateShapes (yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 255:
#line 1814 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 256:
#line 1819 "Gmsh.y"
{
      SymmetryShapes(yyvsp[-3].v[0],yyvsp[-3].v[1],yyvsp[-3].v[2],yyvsp[-3].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 257:
#line 1824 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 258:
#line 1831 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 259:
#line 1832 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 260:
#line 1833 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 261:
#line 1838 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 262:
#line 1842 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 263:
#line 1847 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Vertex *v = FindPoint(TheShape.Num,THEM);
	if(!v)
	  yymsg(WARNING, "Unknown Point %d", TheShape.Num);
	else{
	  TheShape.Type = MSH_POINT;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 264:
#line 1862 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Curve *c = FindCurve(TheShape.Num,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", TheShape.Num);
	else{
	  TheShape.Type = c->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 265:
#line 1877 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-2].l);i++){
	List_Read(yyvsp[-2].l, i, &d);
	TheShape.Num = (int)d;
	Surface *s = FindSurface(TheShape.Num,THEM);
	if(!s)
	  yymsg(WARNING, "Unknown Surface %d", TheShape.Num);
	else{
	  TheShape.Type = s->Typ;
	  List_Add(yyval.l,&TheShape);
	}
      }
      yyval.l = yyvsp[-5].l;
    ;
    break;}
case 266:
#line 1897 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 267:
#line 1907 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) DuplicateView((int)yyvsp[-2].d,0);
    ;
    break;}
case 268:
#line 1917 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 269:
#line 1924 "Gmsh.y"
{
      if(!strcmp(yyvsp[-4].c, "View")) FreeView((int)yyvsp[-2].d);
    ;
    break;}
case 270:
#line 1928 "Gmsh.y"
{
      Init_Mesh(THEM, 1);
    ;
    break;}
case 271:
#line 1937 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	ColorShape(TheShape.Type,TheShape.Num,yyvsp[-3].u);
      }
    ;
    break;}
case 272:
#line 1949 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Include")){

	yyinTab[RecursionLevel++] = yyin;

	strcpy(tmpstring, yyname);
	i = strlen(yyname)-1 ;
	while(i >= 0 && yyname[i] != '/' && yyname[i] != '\\') i-- ;
	tmpstring[i+1] = '\0';
	strcat(tmpstring,yyvsp[-1].c);

	if((yyin = fopen(tmpstring,"r"))){
	  Msg(INFO, "Including '%s'", tmpstring); 
	  strcpy(yynameTab[RecursionLevel-1],yyname);
	  yylinenoTab[RecursionLevel-1]=yylineno;
	  yylineno=1;
	  strcpy(yyname,tmpstring);
	  while(!feof(yyin)){
	    yyparse();
	  }
	  // FIXME: If we do fclose, we cannot call a Function defined
	  // in another file...
	  //fclose(yyin);
	  yyin = yyinTab[--RecursionLevel];
	  strcpy(yyname,yynameTab[RecursionLevel]);
	  yylineno = yylinenoTab[RecursionLevel];
	}
	else{
	  yymsg(GERROR, "Unknown file '%s'", tmpstring) ;  
	  yyin = yyinTab[--RecursionLevel];
	}

      }
      else if(!strcmp(yyvsp[-2].c, "Print")){
#if defined(HAVE_FLTK)
	if(!CTX.batch) CreateOutputFile(yyvsp[-1].c, CTX.print.format);
#endif
      }
      else if(!strcmp(yyvsp[-2].c, "Save")){
#if defined(HAVE_FLTK)
	CreateOutputFile(yyvsp[-1].c, CTX.mesh.format);
#endif
      }

      else if(!strcmp(yyvsp[-2].c, "Merge")){

	FILE *ff = yyin;
	MergeProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "MergeWithBoundingBox")){

	FILE *ff = yyin;
	MergeProblemWithBoundingBox(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "Open")){

	FILE *ff = yyin;
	OpenProblem(yyvsp[-1].c);
	yyin = ff;

      }
      else if(!strcmp(yyvsp[-2].c, "System")){
	
	SystemCall(yyvsp[-1].c);

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 273:
#line 2023 "Gmsh.y"
{
      if(!strcmp(yyvsp[-2].c, "Sleep")){

	long sleep_time = GetTime();
	while(1){
	  if(GetTime() - sleep_time > (long)(yyvsp[-1].d*1.e6)) break;
	}
      
      }
      else if(!strcmp(yyvsp[-2].c, "Mesh")){

	//Maillage_Dimension_0(THEM);
	//mai3d(THEM,(int)$2);
	yymsg(GERROR, "Mesh directives are not (yet) allowed in scripts");

      }
      else
	yymsg(GERROR, "Unknown command '%s'", yyvsp[-2].c);
    ;
    break;}
case 274:
#line 2043 "Gmsh.y"
{
    if(CTX.default_plugins)
      GMSH_PluginManager::Instance()->Action(yyvsp[-4].c,yyvsp[-1].c,0); 
   ;
    break;}
case 275:
#line 2048 "Gmsh.y"
{
      exit(0);
    ;
    break;}
case 276:
#line 2052 "Gmsh.y"
{
#if defined(HAVE_FLTK)
      if(!CTX.batch){ // we're in interactive mode
	if(Tree_Nbr(THEM->Points) != Last_NumberOfPoints){
	  Last_NumberOfPoints = Tree_Nbr(THEM->Points);
	  Replot();
	  DrawUI();
	}
	else{
	  Draw();
	  DrawUI();
	}
      }
#endif
    ;
    break;}
case 277:
#line 2074 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 278:
#line 2084 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = "" ;
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 279:
#line 2094 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-1].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = 1.0 ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-6].c ;
      
      TheSymbol.Name = yyvsp[-6].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-3].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-3].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 280:
#line 2115 "Gmsh.y"
{
      LoopControlVariablesTab[ImbricatedLoop][0] = yyvsp[-5].d ;
      LoopControlVariablesTab[ImbricatedLoop][1] = yyvsp[-3].d ;
      LoopControlVariablesTab[ImbricatedLoop][2] = yyvsp[-1].d ;
      LoopControlVariablesNameTab[ImbricatedLoop] = yyvsp[-8].c ;

      TheSymbol.Name = yyvsp[-8].c;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))){
	TheSymbol.val = List_Create(1,1,sizeof(double));
	List_Put(TheSymbol.val, 0, &yyvsp[-5].d);
	List_Add(Symbol_L, &TheSymbol);
      }
      else{
	List_Write(pSymbol->val, 0, &yyvsp[-5].d);
      }
      
      fgetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop]);
      yylinenoImbricatedLoopsTab[ImbricatedLoop] = yylineno;
      ImbricatedLoop++;
    ;
    break;}
case 281:
#line 2136 "Gmsh.y"
{
      if(LoopControlVariablesTab[ImbricatedLoop-1][1] >  
	 LoopControlVariablesTab[ImbricatedLoop-1][0]){
	LoopControlVariablesTab[ImbricatedLoop-1][0] +=
	  LoopControlVariablesTab[ImbricatedLoop-1][2];
	
	if(strlen(LoopControlVariablesNameTab[ImbricatedLoop-1])){
	  TheSymbol.Name = LoopControlVariablesNameTab[ImbricatedLoop-1];
	  pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols);
	  *(double*)List_Pointer_Fast(pSymbol->val, 0) += 
	    LoopControlVariablesTab[ImbricatedLoop-1][2] ;
	}
	
	fsetpos( yyin, &yyposImbricatedLoopsTab[ImbricatedLoop-1]);
	yylineno = yylinenoImbricatedLoopsTab[ImbricatedLoop-1];
      }
      else{
	ImbricatedLoop--;
      }
    ;
    break;}
case 282:
#line 2157 "Gmsh.y"
{
      if(!FunctionManager::Instance()->createFunction(yyvsp[0].c,yyin,yyname,yylineno))
	yymsg(GERROR, "Redefinition of function %s",yyvsp[0].c);
      skip_until(NULL, "Return");
    ;
    break;}
case 283:
#line 2163 "Gmsh.y"
{
      if(!FunctionManager::Instance()->leaveFunction(&yyin,yyname,yylineno))
	yymsg(GERROR, "Error while exiting function");
    ;
    break;}
case 284:
#line 2168 "Gmsh.y"
{
      if(!FunctionManager::Instance()->enterFunction(yyvsp[-1].c,&yyin,yyname,yylineno))
	yymsg(GERROR, "Unknown function %s",yyvsp[-1].c);
    ;
    break;}
case 285:
#line 2173 "Gmsh.y"
{
      if(!yyvsp[-1].d) skip_until("If", "EndIf");
    ;
    break;}
case 286:
#line 2177 "Gmsh.y"
{
    ;
    break;}
case 287:
#line 2189 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,
			   &pc,&prc,NULL);
    ;
    break;}
case 288:
#line 2196 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 289:
#line 2203 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 290:
#line 2213 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,NULL);
    ;
    break;}
case 291:
#line 2218 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 292:
#line 2223 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			   yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,1,NULL);
    ;
    break;}
case 293:
#line 2228 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 294:
#line 2233 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			   0.,0.,0.,0.,0.,0.,0.,1,&extr);
    ;
    break;}
case 295:
#line 2238 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 296:
#line 2243 "Gmsh.y"
{
      Extrude_ProtudeCurve(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 297:
#line 2248 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 298:
#line 2253 "Gmsh.y"
{
      Extrude_ProtudeCurve(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			   yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,1,&extr);
    ;
    break;}
case 299:
#line 2261 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],
			     0.,0.,0.,0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 300:
#line 2266 "Gmsh.y"
{
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-8].d,0.,0.,0.,
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 301:
#line 2271 "Gmsh.y"
{
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-10].d,yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],
			     yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 302:
#line 2276 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 303:
#line 2281 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],
			     0.,0.,0.,0.,0.,0.,0.,vol,&extr);
    ;
    break;}
case 304:
#line 2287 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 305:
#line 2293 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(ROTATE,(int)yyvsp[-12].d,0.,0.,0.,
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 306:
#line 2299 "Gmsh.y"
{
      extr.mesh.ExtrudeMesh = false;
      extr.mesh.Recombine = false;
    ;
    break;}
case 307:
#line 2305 "Gmsh.y"
{
      int vol = NEWREG();
      Extrude_ProtudeSurface(TRANSLATE_ROTATE,(int)yyvsp[-14].d,yyvsp[-12].v[0],yyvsp[-12].v[1],yyvsp[-12].v[2],
			     yyvsp[-10].v[0],yyvsp[-10].v[1],yyvsp[-10].v[2],yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].d,vol,&extr);
    ;
    break;}
case 308:
#line 2314 "Gmsh.y"
{
    ;
    break;}
case 309:
#line 2317 "Gmsh.y"
{
    ;
    break;}
case 310:
#line 2323 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      if(List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-4].l) && List_Nbr(yyvsp[-6].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	  List_Read(yyvsp[-6].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.ZonLayer[i] = (int)d;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d, %d}", 
	      List_Nbr(yyvsp[-6].l), List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-6].l);
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 311:
#line 2349 "Gmsh.y"
{
      double d;
      extr.mesh.ExtrudeMesh = true;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-4].l);
      if(List_Nbr(yyvsp[-4].l) == List_Nbr(yyvsp[-2].l)){
	extr.mesh.NbElmLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.ZonLayer = (int*)Malloc(extr.mesh.NbLayer*sizeof(int));
	extr.mesh.hLayer = (double*)Malloc(extr.mesh.NbLayer*sizeof(double));
	for(int i=0;i<List_Nbr(yyvsp[-4].l);i++){
	  List_Read(yyvsp[-4].l,i,&d);
	  extr.mesh.NbElmLayer[i] = (d>0)?(int)d:1;
	  extr.mesh.ZonLayer[i] = 0;
	  List_Read(yyvsp[-2].l,i,&d);
	  extr.mesh.hLayer[i] = d;
	}
      }
      else{
	yymsg(GERROR, "Wrong layer definition {%d, %d}", 
	      List_Nbr(yyvsp[-4].l), List_Nbr(yyvsp[-2].l));
      }
      List_Delete(yyvsp[-4].l);
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 312:
#line 2373 "Gmsh.y"
{
      extr.mesh.Recombine = true;
    ;
    break;}
case 313:
#line 2382 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-1].d>2)?(int)yyvsp[-1].d:2;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 314:
#line 2400 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = sign(d); /* Progresion : code 1 ou -1 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 315:
#line 2418 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  yymsg(WARNING, "Unknown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (yyvsp[-4].d>2)?(int)yyvsp[-4].d:2;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = fabs(yyvsp[-1].d);
	}
      }
      List_Delete(yyvsp[-6].l);
    ;
    break;}
case 316:
#line 2436 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  yymsg(GERROR, "Wrong definition of Transfinite Surface %d: "
		"%d points instead of 3 or 4" , yyvsp[-4].d, k) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 317:
#line 2458 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	yymsg(WARNING, "Unknown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
	  yymsg(GERROR, "Wrong definition of Elliptic Surface %d: "
		"%d points instead of 4" , yyvsp[-4].d, k) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 318:
#line 2479 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	yymsg(WARNING, "Unknown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  yymsg(GERROR, "Wrong definition of Transfinite Volume %d: "
		"%d points instead of 6 or 8" , yyvsp[-4].d, k) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 319:
#line 2500 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = (yyvsp[-1].d > 0 && yyvsp[-1].d < 90) ? yyvsp[-1].d : 90;
	}
      }
      List_Delete(yyvsp[-3].l);
    ;
    break;}
case 320:
#line 2514 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(s){
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 321:
#line 2534 "Gmsh.y"
{ 
      ReplaceAllDuplicates(THEM);
    ;
    break;}
case 322:
#line 2538 "Gmsh.y"
{ 
      IntersectAllSegmentsTogether();
    ;
    break;}
case 323:
#line 2547 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 324:
#line 2548 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 325:
#line 2549 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 326:
#line 2550 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 327:
#line 2551 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 328:
#line 2555 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 329:
#line 2556 "Gmsh.y"
{ yyval.d = yyvsp[-1].d ;          ;
    break;}
case 330:
#line 2557 "Gmsh.y"
{ yyval.d = -yyvsp[0].d ;         ;
    break;}
case 331:
#line 2558 "Gmsh.y"
{ yyval.d = yyvsp[0].d;           ;
    break;}
case 332:
#line 2559 "Gmsh.y"
{ yyval.d = !yyvsp[0].d ;         ;
    break;}
case 333:
#line 2560 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d ;     ;
    break;}
case 334:
#line 2561 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d ;     ;
    break;}
case 335:
#line 2562 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d ;     ;
    break;}
case 336:
#line 2564 "Gmsh.y"
{ 
      if(!yyvsp[0].d)
	yymsg(GERROR, "Division by zero in '%g / %g'", yyvsp[-2].d, yyvsp[0].d);
      else
	yyval.d = yyvsp[-2].d / yyvsp[0].d ;     
    ;
    break;}
case 337:
#line 2570 "Gmsh.y"
{ yyval.d = (int)yyvsp[-2].d % (int)yyvsp[0].d ;  ;
    break;}
case 338:
#line 2571 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d,yyvsp[0].d) ;  ;
    break;}
case 339:
#line 2572 "Gmsh.y"
{ yyval.d = yyvsp[-2].d < yyvsp[0].d ;     ;
    break;}
case 340:
#line 2573 "Gmsh.y"
{ yyval.d = yyvsp[-2].d > yyvsp[0].d ;     ;
    break;}
case 341:
#line 2574 "Gmsh.y"
{ yyval.d = yyvsp[-2].d <= yyvsp[0].d ;    ;
    break;}
case 342:
#line 2575 "Gmsh.y"
{ yyval.d = yyvsp[-2].d >= yyvsp[0].d ;    ;
    break;}
case 343:
#line 2576 "Gmsh.y"
{ yyval.d = yyvsp[-2].d == yyvsp[0].d ;    ;
    break;}
case 344:
#line 2577 "Gmsh.y"
{ yyval.d = yyvsp[-2].d != yyvsp[0].d ;    ;
    break;}
case 345:
#line 2578 "Gmsh.y"
{ yyval.d = yyvsp[-2].d && yyvsp[0].d ;    ;
    break;}
case 346:
#line 2579 "Gmsh.y"
{ yyval.d = yyvsp[-2].d || yyvsp[0].d ;    ;
    break;}
case 347:
#line 2580 "Gmsh.y"
{ yyval.d = yyvsp[-4].d? yyvsp[-2].d : yyvsp[0].d ; ;
    break;}
case 348:
#line 2581 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 349:
#line 2582 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 350:
#line 2583 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 351:
#line 2584 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 352:
#line 2585 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 353:
#line 2586 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 354:
#line 2587 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 355:
#line 2588 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 356:
#line 2589 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 357:
#line 2590 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 358:
#line 2591 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 359:
#line 2592 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 360:
#line 2593 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 361:
#line 2594 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 362:
#line 2595 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 363:
#line 2596 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 364:
#line 2597 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 365:
#line 2598 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 366:
#line 2599 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 367:
#line 2600 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 368:
#line 2601 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 369:
#line 2603 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 370:
#line 2604 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 371:
#line 2605 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 372:
#line 2606 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 373:
#line 2607 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 374:
#line 2608 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 375:
#line 2609 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 376:
#line 2610 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 377:
#line 2611 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 378:
#line 2612 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 379:
#line 2613 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 380:
#line 2614 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 381:
#line 2615 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 382:
#line 2616 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 383:
#line 2617 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 384:
#line 2618 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 385:
#line 2619 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 386:
#line 2620 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 387:
#line 2621 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 388:
#line 2622 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d); ;
    break;}
case 389:
#line 2623 "Gmsh.y"
{ yyval.d = yyvsp[-1].d*(double)rand()/(double)RAND_MAX; ;
    break;}
case 390:
#line 2632 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 391:
#line 2633 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 392:
#line 2634 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->rank(); ;
    break;}
case 393:
#line 2635 "Gmsh.y"
{ yyval.d = ParUtil::Instance()->size(); ;
    break;}
case 394:
#line 2640 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[0].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = *(double*)List_Pointer_Fast(pSymbol->val, 0) ;
    ;
    break;}
case 395:
#line 2651 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-3].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-1].d)))
	  yyval.d = *pd ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-3].c, (int)yyvsp[-1].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 396:
#line 2668 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-1].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-1].c) ;
	yyval.d = 0. ;
      }
      else
	yyval.d = (*(double*)List_Pointer_Fast(pSymbol->val, 0) += yyvsp[0].i) ;
    ;
    break;}
case 397:
#line 2679 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-4].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-4].c) ;
	yyval.d = 0. ;
      }
      else{
	if((pd = (double*)List_Pointer_Test(pSymbol->val, (int)yyvsp[-2].d)))
	  yyval.d = (*pd += yyvsp[0].i) ;
	else{
	  yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-4].c, (int)yyvsp[-2].d) ;
	  yyval.d = 0. ;
	}
      }
    ;
    break;}
case 398:
#line 2698 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-2].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-2].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-2].c, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_GET, 0);
      }
    ;
    break;}
case 399:
#line 2714 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-5].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-5].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[0].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-5].c, (int)yyvsp[-3].d, yyvsp[0].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-3].d, GMSH_GET, 0);
      }
    ;
    break;}
case 400:
#line 2730 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-3].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-3].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt(0, GMSH_SET|GMSH_GUI, pNumOpt(0, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 401:
#line 2746 "Gmsh.y"
{
      if(!(pNumCat = Get_NumberOptionCategory(yyvsp[-6].c))){
	yymsg(GERROR, "Unknown numeric option class '%s'", yyvsp[-6].c);
	yyval.d = 0. ;
      }
      else{
	if(!(pNumOpt =  (double (*) (int, int, double))Get_NumberOption(yyvsp[-1].c, pNumCat))){
	  yymsg(GERROR, "Unknown numeric option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	  yyval.d = 0. ;
	}
	else
	  yyval.d = pNumOpt((int)yyvsp[-4].d, GMSH_SET|GMSH_GUI, pNumOpt((int)yyvsp[-4].d, GMSH_GET, 0)+yyvsp[0].i);
      }
    ;
    break;}
case 402:
#line 2764 "Gmsh.y"
{
      memcpy(yyval.v, yyvsp[0].v, 5*sizeof(double)) ;
    ;
    break;}
case 403:
#line 2768 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = -yyvsp[0].v[i] ;
    ;
    break;}
case 404:
#line 2772 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[0].v[i];
    ;
    break;}
case 405:
#line 2776 "Gmsh.y"
{ 
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] - yyvsp[0].v[i] ;
    ;
    break;}
case 406:
#line 2780 "Gmsh.y"
{
      for(i=0 ; i<5 ; i++) yyval.v[i] = yyvsp[-2].v[i] + yyvsp[0].v[i] ;
    ;
    break;}
case 407:
#line 2787 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-9].d;  yyval.v[1]=yyvsp[-7].d;  yyval.v[2]=yyvsp[-5].d;  yyval.v[3]=yyvsp[-3].d; yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 408:
#line 2791 "Gmsh.y"
{ 
      yyval.v[0]=yyvsp[-7].d;  yyval.v[1]=yyvsp[-5].d;  yyval.v[2]=yyvsp[-3].d;  yyval.v[3]=yyvsp[-1].d; yyval.v[4]=1.0;
    ;
    break;}
case 409:
#line 2795 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 410:
#line 2799 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;  yyval.v[1]=yyvsp[-3].d;  yyval.v[2]=yyvsp[-1].d;  yyval.v[3]=0.0; yyval.v[4]=1.0;
    ;
    break;}
case 411:
#line 2806 "Gmsh.y"
{
    ;
    break;}
case 412:
#line 2809 "Gmsh.y"
{
    ;
    break;}
case 413:
#line 2815 "Gmsh.y"
{
    ;
    break;}
case 414:
#line 2818 "Gmsh.y"
{
    ;
    break;}
case 415:
#line 2824 "Gmsh.y"
{
    ;
    break;}
case 416:
#line 2827 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 417:
#line 2831 "Gmsh.y"
{
       yyval.l=yyvsp[-1].l;
    ;
    break;}
case 418:
#line 2838 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 419:
#line 2843 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].l)) ;
    ;
    break;}
case 420:
#line 2851 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 421:
#line 2856 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 422:
#line 2860 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
    ;
    break;}
case 423:
#line 2864 "Gmsh.y"
{
      yyval.l=yyvsp[-1].l;
      for(i=0 ; i<List_Nbr(yyval.l) ; i++){
	pd = (double*)List_Pointer(yyval.l, i);
	(*pd) = - (*pd);
      }
    ;
    break;}
case 424:
#line 2875 "Gmsh.y"
{ 
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(yyval.l, &d) ;
    ;
    break;}
case 425:
#line 2881 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[0].d || (yyvsp[-4].d<yyvsp[-2].d && yyvsp[0].d<0) || (yyvsp[-4].d>yyvsp[-2].d && yyvsp[0].d>0)){
        yymsg(GERROR, "Wrong increment in '%g:%g:%g'", yyvsp[-4].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(yyval.l, &(yyvsp[-4].d)) ;
      }
      else
	for(d=yyvsp[-4].d ; (yyvsp[0].d>0)?(d<=yyvsp[-2].d):(d>=yyvsp[-2].d) ; d+=yyvsp[0].d)
	  List_Add(yyval.l, &d) ;
   ;
    break;}
case 426:
#line 2892 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++)
	  List_Add(yyval.l, (double*)List_Pointer_Fast(pSymbol->val, i)) ;
      }
    ;
    break;}
case 427:
#line 2906 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-2].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-2].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(pSymbol->val) ; i++){
	  d = - *(double*)List_Pointer_Fast(pSymbol->val, i);
	  List_Add(yyval.l, &d) ;
	}
      }
    ;
    break;}
case 428:
#line 2922 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j)))
	    List_Add(yyval.l, pd) ;
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 429:
#line 2942 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      TheSymbol.Name = yyvsp[-5].c ;
      if (!(pSymbol = (Symbol*)List_PQuery(Symbol_L, &TheSymbol, CompareSymbols))) {
	yymsg(GERROR, "Unknown variable '%s'", yyvsp[-5].c) ;
	d = 0.0 ;
	List_Add(yyval.l, &d);
      }
      else{
	for(i = 0 ; i < List_Nbr(yyvsp[-2].l) ; i++){
	  j = (int)(*(double*)List_Pointer_Fast(yyvsp[-2].l, i));
	  if((pd = (double*)List_Pointer_Test(pSymbol->val, j))){
	    d = - *pd;
	    List_Add(yyval.l, &d) ;
	  }
	  else
	    yymsg(GERROR, "Uninitialized variable '%s[%d]'", yyvsp[-5].c, j) ;	  
	}
      }
      List_Delete(yyvsp[-2].l);
    ;
    break;}
case 430:
#line 2967 "Gmsh.y"
{
      yyval.l = List_Create(2,1,sizeof(double)) ;
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 431:
#line 2972 "Gmsh.y"
{
      yyval.l = yyvsp[0].l ;
    ;
    break;}
case 432:
#line 2976 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].d)) ;
    ;
    break;}
case 433:
#line 2980 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(yyvsp[0].l) ; i++){
	List_Read(yyvsp[0].l, i, &d) ;
	List_Add(yyval.l, &d) ;
      }
      List_Delete(yyvsp[0].l);
    ;
    break;}
case 434:
#line 2992 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-7].d, (int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d);
    ;
    break;}
case 435:
#line 2996 "Gmsh.y"
{
      yyval.u = PACK_COLOR((int)yyvsp[-5].d, (int)yyvsp[-3].d, (int)yyvsp[-1].d, 255);
    ;
    break;}
case 436:
#line 3007 "Gmsh.y"
{
      yyval.u = Get_ColorForString(ColorString, -1, yyvsp[0].c, &flag);
      if(flag) yymsg(GERROR, "Unknown color '%s'", yyvsp[0].c);
    ;
    break;}
case 437:
#line 3012 "Gmsh.y"
{
      if(!(pColCat = Get_ColorOptionCategory(yyvsp[-4].c))){
	yymsg(GERROR, "Unknown color option class '%s'", yyvsp[-4].c);
	yyval.u = 0 ;
      }
      else{
	if(!(pColOpt =  (unsigned int (*) (int, int, unsigned int))Get_ColorOption(yyvsp[0].c, pColCat))){
	  yymsg(GERROR, "Unknown color option '%s.Color.%s'", yyvsp[-4].c, yyvsp[0].c);
	  yyval.u = 0 ;
	}
	else{
	  yyval.u = pColOpt(0,GMSH_GET,0) ;
	}
      }
    ;
    break;}
case 438:
#line 3031 "Gmsh.y"
{
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 439:
#line 3035 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      GmshColorTable *ct = Get_ColorTable((int)yyvsp[-3].d);
      if(!ct)
	yymsg(GERROR, "View[%d] does not exist", (int)yyvsp[-3].d);
      else{
	for(i=0 ; i<ct->size ; i++) 
	  List_Add(yyval.l, &ct->table[i]);
      }
    ;
    break;}
case 440:
#line 3049 "Gmsh.y"
{
      yyval.l = List_Create(256,10,sizeof(unsigned int)) ;
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 441:
#line 3054 "Gmsh.y"
{
      List_Add(yyval.l, &(yyvsp[0].u)) ;
    ;
    break;}
case 442:
#line 3061 "Gmsh.y"
{
      yyval.c = yyvsp[0].c;
    ;
    break;}
case 443:
#line 3065 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-3].c)+strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      strcpy(yyval.c, yyvsp[-3].c) ;  
      strcat(yyval.c, yyvsp[-1].c) ;
      Free(yyvsp[-3].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 444:
#line 3073 "Gmsh.y"
{
      yyval.c = (char *)Malloc((strlen(yyvsp[-1].c)+1)*sizeof(char)) ;
      for(i=strlen(yyvsp[-1].c)-1; i>=0; i--){
	if(yyvsp[-1].c[i] == '.'){
	  strncpy(yyval.c,yyvsp[-1].c,i);
	  yyval.c[i]='\0';
	  break;
	}
      }
      if(i<=0) strcpy(yyval.c,yyvsp[-1].c);
      Free(yyvsp[-1].c);
    ;
    break;}
case 445:
#line 3086 "Gmsh.y"
{
      yyval.c = yyvsp[-1].c;
    ;
    break;}
case 446:
#line 3090 "Gmsh.y"
{
      i = PrintListOfDouble(yyvsp[-3].c,yyvsp[-1].l,tmpstring);
      if(i<0){
	yymsg(GERROR, "Too few arguments in Sprintf");
	yyval.c = yyvsp[-3].c;
      }
      else if(i>0){
	yymsg(GERROR, "Too many arguments (%d) in Sprintf", i);
	yyval.c = yyvsp[-3].c;
      }
      else{
	yyval.c = (char*)Malloc((strlen(tmpstring)+1)*sizeof(char));
	strcpy(yyval.c, tmpstring);
	Free(yyvsp[-3].c);
      }
      List_Delete(yyvsp[-1].l);
    ;
    break;}
case 447:
#line 3108 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-3].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-3].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s.%s'", yyvsp[-3].c, yyvsp[-1].c);
	else{
	  str = pStrOpt(0,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
case 448:
#line 3122 "Gmsh.y"
{ 
      if(!(pStrCat = Get_StringOptionCategory(yyvsp[-6].c)))
	yymsg(GERROR, "Unknown string option class '%s'", yyvsp[-6].c);
      else{
	if(!(pStrOpt = (char *(*) (int, int, char *))Get_StringOption(yyvsp[-1].c, pStrCat)))
	  yymsg(GERROR, "Unknown string option '%s[%d].%s'", yyvsp[-6].c, (int)yyvsp[-4].d, yyvsp[-1].c);
	else{
	  str = pStrOpt((int)yyvsp[-4].d,GMSH_GET,NULL) ;
	  yyval.c = (char*)Malloc((strlen(str)+1)*sizeof(char));
	  strcpy(yyval.c, str);
	}
      }
    ;
    break;}
}

#line 705 "/usr/share/bison/bison.simple"


  yyvsp -= yylen;
  yyssp -= yylen;
#if YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;
#if YYLSP_NEEDED
  *++yylsp = yyloc;
#endif

  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  YYSIZE_T yysize = 0;
	  char *yymsg;
	  int yyx, yycount;

	  yycount = 0;
	  /* Start YYX at -YYN if negative to avoid negative indexes in
	     YYCHECK.  */
	  for (yyx = yyn < 0 ? -yyn : 0;
	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
	    if (yycheck[yyx + yyn] == yyx)
	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
	  yysize += yystrlen ("parse error, unexpected ") + 1;
	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
	  yymsg = (char *) YYSTACK_ALLOC (yysize);
	  if (yymsg != 0)
	    {
	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);

	      if (yycount < 5)
		{
		  yycount = 0;
		  for (yyx = yyn < 0 ? -yyn : 0;
		       yyx < (int) (sizeof (yytname) / sizeof (char *));
		       yyx++)
		    if (yycheck[yyx + yyn] == yyx)
		      {
			const char *yyq = ! yycount ? ", expecting " : " or ";
			yyp = yystpcpy (yyp, yyq);
			yyp = yystpcpy (yyp, yytname[yyx]);
			yycount++;
		      }
		}
	      yyerror (yymsg);
	      YYSTACK_FREE (yymsg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exhausted");
	}
      else
#endif /* defined (YYERROR_VERBOSE) */
	yyerror ("parse error");
    }
  goto yyerrlab1;


/*--------------------------------------------------.
| yyerrlab1 -- error raised explicitly by an action |
`--------------------------------------------------*/
yyerrlab1:
  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
	 error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;
      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
		  yychar, yytname[yychar1]));
      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;


/*-------------------------------------------------------------------.
| yyerrdefault -- current state does not do anything special for the |
| error token.                                                       |
`-------------------------------------------------------------------*/
yyerrdefault:
#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */

  /* If its default is to accept any token, ok.  Otherwise pop it.  */
  yyn = yydefact[yystate];
  if (yyn)
    goto yydefault;
#endif


/*---------------------------------------------------------------.
| yyerrpop -- pop the current state because it cannot handle the |
| error token                                                    |
`---------------------------------------------------------------*/
yyerrpop:
  if (yyssp == yyss)
    YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#if YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG
  if (yydebug)
    {
      short *yyssp1 = yyss - 1;
      YYFPRINTF (stderr, "Error: state stack now");
      while (yyssp1 != yyssp)
	YYFPRINTF (stderr, " %d", *++yyssp1);
      YYFPRINTF (stderr, "\n");
    }
#endif

/*--------------.
| yyerrhandle.  |
`--------------*/
yyerrhandle:
  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

  YYDPRINTF ((stderr, "Shifting error token, "));

  *++yyvsp = yylval;
#if YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

/*---------------------------------------------.
| yyoverflowab -- parser overflow comes here.  |
`---------------------------------------------*/
yyoverflowlab:
  yyerror ("parser stack overflow");
  yyresult = 2;
  /* Fall through.  */

yyreturn:
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
  return yyresult;
}
#line 3137 "Gmsh.y"


void InitSymbols(void){
  if(!Symbol_L)
    Symbol_L = List_Create(50,10,sizeof(Symbol));
  else
    List_Reset(Symbol_L);
}

void DeleteSymbols(void){
  int i;
  for(i = 0 ; i < List_Nbr(Symbol_L) ; i++)
    List_Delete(((Symbol*)List_Pointer_Fast(Symbol_L,i))->val);
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}

int PrintListOfDouble(char *format, List_T *list, char *buffer){
  int i, j, k;
  char tmp1[256], tmp2[256];

  j=0;
  while(format[j]!='%') j++;
  strncpy(buffer, format, j); 
  buffer[j]='\0'; 
  for(i = 0 ; i<List_Nbr(list) ; i++){
    k = j;
    j++;
    if(j<(int)strlen(format)){
      if(format[j]=='%'){
	strcat(buffer, "%");
	j++;
      }
      while(format[j]!='%' && j<(int)strlen(format)) j++;
      if(k != j){
	strncpy(tmp1, &(format[k]),j-k);
	tmp1[j-k]='\0';
	sprintf(tmp2, tmp1, *(double*)List_Pointer(list,i)); 
	strcat(buffer, tmp2);
      }
    }
    else{
      return List_Nbr(list)-i;
      break ;
    }
  }
  if(j != (int)strlen(format))
    return -1;
  return 0;
}

void yyerror(char *s){
  Msg(GERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void yymsg(int type, char *fmt, ...){
  va_list args;
  char tmp[1024];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(type, "'%s', line %d : %s", yyname, yylineno-1, tmp);

  if(type == GERROR) yyerrorstate=1;
}


