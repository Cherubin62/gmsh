
/*  A Bison parser, made from Gmsh.y
    by GNU Bison version 1.28  */

#define YYBISON 1  /* Identify Bison output.  */

#define	tDOUBLE	257
#define	tSTRING	258
#define	tBIGSTR	259
#define	tEND	260
#define	tAFFECT	261
#define	tDOTS	262
#define	tPi	263
#define	tExp	264
#define	tLog	265
#define	tLog10	266
#define	tSqrt	267
#define	tSin	268
#define	tAsin	269
#define	tCos	270
#define	tAcos	271
#define	tTan	272
#define	tAtan	273
#define	tAtan2	274
#define	tSinh	275
#define	tCosh	276
#define	tTanh	277
#define	tFabs	278
#define	tFloor	279
#define	tCeil	280
#define	tFmod	281
#define	tModulo	282
#define	tHypot	283
#define	tPoint	284
#define	tCircle	285
#define	tEllipsis	286
#define	tLine	287
#define	tSurface	288
#define	tSpline	289
#define	tVolume	290
#define	tCharacteristic	291
#define	tLength	292
#define	tParametric	293
#define	tElliptic	294
#define	tPlane	295
#define	tRuled	296
#define	tTransfinite	297
#define	tComplex	298
#define	tPhysical	299
#define	tUsing	300
#define	tPower	301
#define	tBump	302
#define	tProgression	303
#define	tAssociation	304
#define	tRotate	305
#define	tTranslate	306
#define	tSymetry	307
#define	tDilate	308
#define	tExtrude	309
#define	tDuplicata	310
#define	tLoop	311
#define	tInclude	312
#define	tRecombine	313
#define	tDelete	314
#define	tCoherence	315
#define	tView	316
#define	tOffset	317
#define	tAttractor	318
#define	tLayers	319
#define	tScalarSimplex	320
#define	tVectorSimplex	321
#define	tTensorSimplex	322
#define	tScalarTriangle	323
#define	tVectorTriangle	324
#define	tTensorTriangle	325
#define	tScalarLine	326
#define	tVectorLine	327
#define	tTensorLine	328
#define	tScalarPoint	329
#define	tVectorPoint	330
#define	tTensorPoint	331
#define	tBSpline	332
#define	tNurbs	333
#define	tOrder	334
#define	tWith	335
#define	tBounds	336
#define	tKnots	337
#define	tColor	338
#define	tGeneral	339
#define	tGeometry	340
#define	tMesh	341
#define	tB_SPLINE_SURFACE_WITH_KNOTS	342
#define	tB_SPLINE_CURVE_WITH_KNOTS	343
#define	tCARTESIAN_POINT	344
#define	tTRUE	345
#define	tFALSE	346
#define	tUNSPECIFIED	347
#define	tU	348
#define	tV	349
#define	tEDGE_CURVE	350
#define	tVERTEX_POINT	351
#define	tORIENTED_EDGE	352
#define	tPLANE	353
#define	tFACE_OUTER_BOUND	354
#define	tEDGE_LOOP	355
#define	tADVANCED_FACE	356
#define	tVECTOR	357
#define	tDIRECTION	358
#define	tAXIS2_PLACEMENT_3D	359
#define	tISO	360
#define	tENDISO	361
#define	tENDSEC	362
#define	tDATA	363
#define	tHEADER	364
#define	tFILE_DESCRIPTION	365
#define	tFILE_SCHEMA	366
#define	tFILE_NAME	367
#define	tMANIFOLD_SOLID_BREP	368
#define	tCLOSED_SHELL	369
#define	tADVANCED_BREP_SHAPE_REPRESENTATION	370
#define	tFACE_BOUND	371
#define	tCYLINDRICAL_SURFACE	372
#define	tCONICAL_SURFACE	373
#define	tCIRCLE	374
#define	tTRIMMED_CURVE	375
#define	tGEOMETRIC_SET	376
#define	tCOMPOSITE_CURVE_SEGMENT	377
#define	tCONTINUOUS	378
#define	tCOMPOSITE_CURVE	379
#define	tTOROIDAL_SURFACE	380
#define	tPRODUCT_DEFINITION	381
#define	tPRODUCT_DEFINITION_SHAPE	382
#define	tSHAPE_DEFINITION_REPRESENTATION	383
#define	tELLIPSE	384
#define	tTrimmed	385
#define	tSolid	386
#define	tEndSolid	387
#define	tVertex	388
#define	tFacet	389
#define	tNormal	390
#define	tOuter	391
#define	tLoopSTL	392
#define	tEndLoop	393
#define	tEndFacet	394
#define	UMINUS	395

#line 1 "Gmsh.y"

#include <stdarg.h>

#include "Gmsh.h"
#include "Const.h"
#include "Context.h"
#include "Geo.h"
#include "CAD.h"
#include "DataBase.h"
#include "Mesh.h"
#include "Create.h"
#include "Views.h"
#include "StepGeomDatabase.h"
#include "Colors.h"
#include "Parser.h"

extern Mesh    *THEM;
extern char     ThePathForIncludes[NAME_STR_L];

FILE           *yyinTab[20];
int             yylinenoTab[20];
char            yynameTab[20][256];
char            tmpstring[256];
Symbol          TheSymbol;
Surface        *STL_Surf;
Shape           TheShape;
unsigned int    *ptr ;
int             i,j,k,flag,RecursionLevel=0,Loop[4];
double          d;
ExtrudeParams   extr;
List_T         *Symbol_L;
List_T         *ListOfDouble_L,*ListOfDouble2_L;
List_T         *ListOfListOfDouble_L;
StringXPointer *ColorField ;

void  yyerror (char *s);
void  vyyerror (char *fmt, ...);
int   Get_ColorForString(StringX4Int SX4I[], int alpha, 
			 char * string, int * FlagError);
void  Get_ColorPointerForString(StringXPointer SXP[], char * string,
				int * FlagError, unsigned int **Pointer);


#line 45 "Gmsh.y"
typedef union {
  char    *c;
  int      i;
  double   d;
  double   v[5];
  Shape    s;
  List_T  *l;
} YYSTYPE;
#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		1273
#define	YYFLAG		-32768
#define	YYNTBASE	157

#define YYTRANSLATE(x) ((unsigned)(x) <= 395 ? yytranslate[x] : 213)

static const short yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,   147,     2,     2,   150,
   152,   145,   143,   151,   144,     2,   146,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,   141,
     2,   142,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
   155,     2,   156,   149,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,   153,     2,   154,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    50,    51,    52,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,    80,    81,    82,    83,    84,    85,    86,
    87,    88,    89,    90,    91,    92,    93,    94,    95,    96,
    97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
   107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
   117,   118,   119,   120,   121,   122,   123,   124,   125,   126,
   127,   128,   129,   130,   131,   132,   133,   134,   135,   136,
   137,   138,   139,   140,   148
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    30,    32,    33,    36,    38,
    40,    42,    45,    48,    51,    54,    57,    60,    68,    74,
    92,   102,   126,   158,   174,   186,   198,   214,   224,   238,
   248,   260,   274,   284,   294,   306,   316,   328,   338,   350,
   364,   378,   390,   404,   422,   432,   444,   456,   470,   482,
   492,   493,   496,   498,   500,   502,   504,   506,   508,   510,
   512,   514,   516,   518,   521,   528,   537,   538,   541,   544,
   547,   550,   553,   556,   559,   562,   565,   568,   571,   574,
   603,   632,   661,   684,   707,   730,   747,   764,   781,   792,
   803,   814,   819,   827,   836,   849,   856,   862,   870,   878,
   891,   899,   909,   927,   935,   944,   953,   959,   967,   979,
   988,   998,  1007,  1030,  1051,  1060,  1069,  1075,  1084,  1092,
  1101,  1109,  1121,  1129,  1139,  1141,  1143,  1145,  1146,  1149,
  1154,  1159,  1163,  1171,  1180,  1192,  1205,  1218,  1227,  1240,
  1249,  1261,  1277,  1279,  1282,  1292,  1299,  1309,  1319,  1329,
  1338,  1347,  1356,  1363,  1368,  1377,  1380,  1385,  1386,  1389,
  1390,  1396,  1397,  1403,  1404,  1410,  1411,  1414,  1419,  1428,
  1433,  1443,  1451,  1453,  1455,  1457,  1459,  1461,  1463,  1467,
  1471,  1475,  1479,  1483,  1487,  1490,  1493,  1498,  1503,  1508,
  1513,  1518,  1523,  1528,  1533,  1538,  1543,  1550,  1555,  1560,
  1565,  1570,  1575,  1580,  1587,  1594,  1601,  1603,  1605,  1607,
  1611,  1618,  1630,  1640,  1648,  1656,  1657,  1661,  1663,  1667,
  1668,  1672,  1676,  1678,  1682,  1683,  1685,  1689,  1691,  1693,
  1697
};

static const short yyrhs[] = {   164,
     0,   159,     0,   158,     0,   132,     0,   135,   136,     3,
     3,     3,   137,   138,   134,     3,     3,     3,   134,     3,
     3,     3,   134,     3,     3,     3,   139,   140,     0,   133,
     0,     0,   159,   160,     0,   161,     0,   163,     0,   162,
     0,     1,     6,     0,   106,     6,     0,   107,     6,     0,
   109,     6,     0,   108,     6,     0,   110,     6,     0,   111,
   150,   207,   151,     5,   152,     6,     0,   112,   150,   207,
   152,     6,     0,   113,   150,     5,   151,     5,   151,   207,
   151,   207,   151,     5,   151,     5,   151,     5,   152,     6,
     0,     3,     7,    90,   150,     5,   151,   206,   152,     6,
     0,     3,     7,    89,   150,     5,   151,   203,   151,   211,
   151,   202,   151,   202,   151,   202,   151,   211,   151,   211,
   151,   202,   152,     6,     0,     3,     7,    88,   150,     5,
   151,   203,   151,   203,   151,   209,   151,   202,   151,   202,
   151,   202,   151,   202,   151,   211,   151,   211,   151,   211,
   151,   211,   151,   202,   152,     6,     0,     3,     7,    96,
   150,     5,   151,     3,   151,     3,   151,     3,   151,   202,
   152,     6,     0,     3,     7,   100,   150,     5,   151,     3,
   151,   202,   152,     6,     0,     3,     7,   117,   150,     5,
   151,     3,   151,   202,   152,     6,     0,     3,     7,    98,
   150,     5,   151,   145,   151,   145,   151,   203,   151,   202,
   152,     6,     0,     3,     7,   101,   150,     5,   151,   211,
   152,     6,     0,     3,     7,   102,   150,     5,   151,   211,
   151,     3,   151,   202,   152,     6,     0,     3,     7,    97,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   103,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   105,   150,     5,   151,     3,   151,     3,   151,     3,
   152,     6,     0,     3,     7,   104,   150,     5,   151,   206,
   152,     6,     0,     3,     7,    99,   150,     5,   151,     3,
   152,     6,     0,     3,     7,    33,   150,     5,   151,     3,
   151,     3,   152,     6,     0,     3,     7,   115,   150,     5,
   151,   211,   152,     6,     0,     3,     7,   116,   150,     5,
   151,   211,   151,     3,   152,     6,     0,     3,     7,   114,
   150,     5,   151,     3,   152,     6,     0,     3,     7,   118,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   119,   150,     5,   151,     3,   151,   203,   151,   203,
   152,     6,     0,     3,     7,   126,   150,     5,   151,     3,
   151,   203,   151,   203,   152,     6,     0,     3,     7,   120,
   150,     5,   151,     3,   151,   203,   152,     6,     0,     3,
     7,   130,   150,     5,   151,     3,   151,   203,   151,   203,
   152,     6,     0,     3,     7,   121,   150,     5,   151,     3,
   151,   211,   151,   211,   151,   202,   151,   202,   152,     6,
     0,     3,     7,   122,   150,     5,   151,   211,   152,     6,
     0,     3,     7,   123,   150,   124,   151,   202,   151,     3,
   152,     6,     0,     3,     7,   125,   150,     5,   151,   211,
   151,   202,   152,     6,     0,     3,     7,   127,   150,     5,
   151,     5,   151,     3,   151,     3,   152,     6,     0,     3,
     7,   128,   150,     5,   151,     5,   151,     3,   152,     6,
     0,     3,     7,   129,   150,     3,   151,     3,   152,     6,
     0,     0,   164,   165,     0,   166,     0,   180,     0,   181,
     0,   182,     0,   185,     0,   186,     0,   188,     0,   191,
     0,   192,     0,   187,     0,   193,     0,     1,     6,     0,
    62,     5,   153,   167,   154,     6,     0,    62,     5,    63,
   206,   153,   167,   154,     6,     0,     0,   167,   168,     0,
   167,   169,     0,   167,   170,     0,   167,   171,     0,   167,
   172,     0,   167,   173,     0,   167,   174,     0,   167,   175,
     0,   167,   176,     0,   167,   177,     0,   167,   178,     0,
   167,   179,     0,    66,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   152,   211,
     6,     0,    67,   150,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   152,   211,     6,
     0,    68,   150,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   152,   211,     6,     0,
    69,   150,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   152,
   211,     6,     0,    70,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   152,   211,     6,     0,    71,   150,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   151,
   203,   151,   203,   151,   203,   152,   211,     6,     0,    72,
   150,   203,   151,   203,   151,   203,   151,   203,   151,   203,
   151,   203,   152,   211,     6,     0,    73,   150,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   151,   203,   152,
   211,     6,     0,    74,   150,   203,   151,   203,   151,   203,
   151,   203,   151,   203,   151,   203,   152,   211,     6,     0,
    75,   150,   203,   151,   203,   151,   203,   152,   211,     6,
     0,    76,   150,   203,   151,   203,   151,   203,   152,   211,
     6,     0,    77,   150,   203,   151,   203,   151,   203,   152,
   211,     6,     0,     4,     7,   203,     6,     0,    30,   150,
   203,   152,     7,   206,     6,     0,    45,    30,   150,   203,
   152,     7,   211,     6,     0,    64,    30,   150,   203,   151,
   203,   151,   203,   152,     7,   211,     6,     0,    37,    38,
   211,     7,   203,     6,     0,    30,   150,   203,   152,     6,
     0,    33,   150,   203,   152,     7,   211,     6,     0,    35,
   150,   203,   152,     7,   211,     6,     0,    64,    33,   150,
   203,   151,   203,   151,   203,   152,     7,   211,     6,     0,
    31,   150,   203,   152,     7,   211,     6,     0,    31,   150,
   203,   152,     7,   211,    41,   206,     6,     0,    39,   150,
   203,   152,     7,   150,   203,   151,   203,   151,     5,   151,
     5,   151,     5,   152,     6,     0,    32,   150,   203,   152,
     7,   211,     6,     0,    45,    33,   150,   203,   152,     7,
   211,     6,     0,    33,    57,   150,   203,   152,     7,   211,
     6,     0,    33,   150,   203,   152,     6,     0,    78,   150,
   203,   152,     7,   211,     6,     0,    79,   150,   203,   152,
     7,   211,    83,   211,    80,   203,     6,     0,    41,    34,
   150,   203,   152,     7,   211,     6,     0,   131,    34,   150,
   203,   152,     7,   203,   211,     6,     0,    42,    34,   150,
   203,   152,     7,   211,     6,     0,    79,    34,    81,    82,
   150,   203,   152,     7,   209,    83,   153,   211,   151,   211,
   154,    80,   153,   203,   151,   203,   154,     6,     0,    79,
    34,   150,   203,   152,     7,   209,    83,   153,   211,   151,
   211,   154,    80,   153,   203,   151,   203,   154,     6,     0,
    45,    34,   150,   203,   152,     7,   211,     6,     0,    34,
    57,   150,   203,   152,     7,   211,     6,     0,    34,   150,
   203,   152,     6,     0,    44,    36,   150,   203,   152,     7,
   211,     6,     0,    36,   150,   203,   152,     7,   211,     6,
     0,    45,    36,   150,   203,   152,     7,   211,     6,     0,
    52,   150,   206,   152,   153,   183,   154,     0,    51,   150,
   206,   151,   206,   151,   203,   152,   153,   183,   154,     0,
    53,   150,   206,   152,   153,   183,   154,     0,    54,   150,
   206,   151,   203,   152,   153,   183,   154,     0,   185,     0,
   184,     0,   182,     0,     0,   184,   181,     0,    56,   153,
   184,   154,     0,    60,   153,   184,   154,     0,    58,     5,
     6,     0,    55,   150,   203,   151,   206,   152,     6,     0,
    55,    34,   150,   203,   151,   206,   152,     6,     0,    55,
   150,   203,   151,   206,   151,   206,   151,   203,   152,     6,
     0,    55,    34,   150,   203,   151,   206,   151,   206,   151,
   203,   152,     6,     0,    55,    30,   150,   203,   151,   206,
   151,   206,   151,   203,   152,     6,     0,    55,    30,   150,
   203,   151,   206,   152,     6,     0,    55,    33,   150,   203,
   151,   206,   151,   206,   151,   203,   152,     6,     0,    55,
    33,   150,   203,   151,   206,   152,     6,     0,    55,    34,
   150,   203,   151,   206,   152,   153,   189,   154,     6,     0,
    55,    34,   150,   203,   151,   206,   151,   206,   151,   203,
   152,   153,   189,   154,     6,     0,   190,     0,   189,   190,
     0,    65,   153,   211,   151,   211,   151,   211,   154,     6,
     0,    43,    33,   211,     7,   203,     6,     0,    43,    33,
   211,     7,   203,    46,    47,   203,     6,     0,    43,    33,
   211,     7,   203,    46,    48,   203,     6,     0,    43,    33,
   211,     7,   203,    46,    49,   203,     6,     0,    43,    34,
   153,   203,   154,     7,   211,     6,     0,    40,    34,   153,
   203,   154,     7,   211,     6,     0,    43,    36,   153,   203,
   154,     7,   211,     6,     0,    59,    34,   211,     7,   203,
     6,     0,    59,    34,   211,     6,     0,    45,    50,   150,
   203,   152,     7,   211,     6,     0,    61,     6,     0,    84,
   153,   194,   154,     0,     0,   194,   195,     0,     0,    85,
   196,   153,   199,   154,     0,     0,    86,   197,   153,   199,
   154,     0,     0,    87,   198,   153,   199,   154,     0,     0,
   200,   199,     0,     4,     7,     4,     6,     0,     4,     7,
   153,     4,   151,   203,   154,     6,     0,     4,     7,   201,
     6,     0,   153,   203,   151,   203,   151,   203,   151,   203,
   154,     0,   153,   203,   151,   203,   151,   203,   154,     0,
    91,     0,    92,     0,    93,     0,    94,     0,    95,     0,
   204,     0,   150,   203,   152,     0,   203,   144,   203,     0,
   203,   143,   203,     0,   203,   145,   203,     0,   203,   146,
   203,     0,   203,   149,   203,     0,   144,   203,     0,   143,
   203,     0,    10,   150,   203,   152,     0,    11,   150,   203,
   152,     0,    12,   150,   203,   152,     0,    13,   150,   203,
   152,     0,    14,   150,   203,   152,     0,    15,   150,   203,
   152,     0,    16,   150,   203,   152,     0,    17,   150,   203,
   152,     0,    18,   150,   203,   152,     0,    19,   150,   203,
   152,     0,    20,   150,   203,   151,   203,   152,     0,    21,
   150,   203,   152,     0,    22,   150,   203,   152,     0,    23,
   150,   203,   152,     0,    24,   150,   203,   152,     0,    25,
   150,   203,   152,     0,    26,   150,   203,   152,     0,    27,
   150,   203,   151,   203,   152,     0,    28,   150,   203,   151,
   203,   152,     0,    29,   150,   203,   151,   203,   152,     0,
     3,     0,     9,     0,     4,     0,   203,     8,   203,     0,
   203,     8,   155,   203,   156,   203,     0,   153,   203,   151,
   203,   151,   203,   151,   203,   151,   203,   154,     0,   153,
   203,   151,   203,   151,   203,   151,   203,   154,     0,   153,
   203,   151,   203,   151,   203,   154,     0,   150,   203,   151,
   203,   151,   203,   152,     0,     0,   150,   208,   152,     0,
     5,     0,   208,   151,     5,     0,     0,   153,   210,   154,
     0,   150,   210,   152,     0,   211,     0,   210,   151,   211,
     0,     0,   203,     0,   153,   212,   154,     0,   203,     0,
   205,     0,   212,   151,   203,     0,   212,   151,   205,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   104,   106,   107,   114,   122,   136,   148,   150,   153,   155,
   156,   157,   160,   166,   171,   172,   173,   176,   180,   183,
   189,   194,   200,   208,   213,   217,   223,   228,   232,   237,
   241,   244,   249,   253,   257,   261,   266,   270,   273,   277,
   281,   285,   289,   293,   297,   300,   304,   307,   311,   314,
   323,   325,   331,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   350,   355,   361,   366,   367,   368,
   369,   370,   371,   372,   373,   374,   375,   376,   377,   380,
   390,   400,   410,   419,   428,   437,   445,   453,   461,   468,
   475,   486,   500,   511,   517,   536,   547,   555,   561,   567,
   586,   592,   608,   615,   621,   627,   633,   642,   648,   668,
   674,   693,   712,   720,   726,   732,   738,   750,   756,   762,
   774,   780,   785,   790,   797,   799,   800,   803,   808,   819,
   837,   852,   883,   888,   892,   896,   900,   906,   911,   915,
   919,   924,   932,   936,   941,   965,   983,  1000,  1017,  1034,
  1054,  1073,  1092,  1107,  1122,  1133,  1144,  1148,  1150,  1153,
  1156,  1157,  1159,  1160,  1162,  1165,  1167,  1170,  1181,  1191,
  1201,  1209,  1285,  1287,  1288,  1289,  1290,  1293,  1295,  1296,
  1297,  1298,  1299,  1300,  1301,  1302,  1303,  1304,  1305,  1306,
  1307,  1308,  1309,  1310,  1311,  1312,  1313,  1314,  1315,  1316,
  1317,  1318,  1319,  1320,  1321,  1322,  1325,  1327,  1328,  1339,
  1346,  1359,  1368,  1376,  1384,  1394,  1398,  1403,  1407,  1412,
  1416,  1420,  1426,  1432,  1438,  1442,  1448,  1461,  1467,  1476,
  1480
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","tDOUBLE",
"tSTRING","tBIGSTR","tEND","tAFFECT","tDOTS","tPi","tExp","tLog","tLog10","tSqrt",
"tSin","tAsin","tCos","tAcos","tTan","tAtan","tAtan2","tSinh","tCosh","tTanh",
"tFabs","tFloor","tCeil","tFmod","tModulo","tHypot","tPoint","tCircle","tEllipsis",
"tLine","tSurface","tSpline","tVolume","tCharacteristic","tLength","tParametric",
"tElliptic","tPlane","tRuled","tTransfinite","tComplex","tPhysical","tUsing",
"tPower","tBump","tProgression","tAssociation","tRotate","tTranslate","tSymetry",
"tDilate","tExtrude","tDuplicata","tLoop","tInclude","tRecombine","tDelete",
"tCoherence","tView","tOffset","tAttractor","tLayers","tScalarSimplex","tVectorSimplex",
"tTensorSimplex","tScalarTriangle","tVectorTriangle","tTensorTriangle","tScalarLine",
"tVectorLine","tTensorLine","tScalarPoint","tVectorPoint","tTensorPoint","tBSpline",
"tNurbs","tOrder","tWith","tBounds","tKnots","tColor","tGeneral","tGeometry",
"tMesh","tB_SPLINE_SURFACE_WITH_KNOTS","tB_SPLINE_CURVE_WITH_KNOTS","tCARTESIAN_POINT",
"tTRUE","tFALSE","tUNSPECIFIED","tU","tV","tEDGE_CURVE","tVERTEX_POINT","tORIENTED_EDGE",
"tPLANE","tFACE_OUTER_BOUND","tEDGE_LOOP","tADVANCED_FACE","tVECTOR","tDIRECTION",
"tAXIS2_PLACEMENT_3D","tISO","tENDISO","tENDSEC","tDATA","tHEADER","tFILE_DESCRIPTION",
"tFILE_SCHEMA","tFILE_NAME","tMANIFOLD_SOLID_BREP","tCLOSED_SHELL","tADVANCED_BREP_SHAPE_REPRESENTATION",
"tFACE_BOUND","tCYLINDRICAL_SURFACE","tCONICAL_SURFACE","tCIRCLE","tTRIMMED_CURVE",
"tGEOMETRIC_SET","tCOMPOSITE_CURVE_SEGMENT","tCONTINUOUS","tCOMPOSITE_CURVE",
"tTOROIDAL_SURFACE","tPRODUCT_DEFINITION","tPRODUCT_DEFINITION_SHAPE","tSHAPE_DEFINITION_REPRESENTATION",
"tELLIPSE","tTrimmed","tSolid","tEndSolid","tVertex","tFacet","tNormal","tOuter",
"tLoopSTL","tEndLoop","tEndFacet","'<'","'>'","'+'","'-'","'*'","'/'","'%'",
"UMINUS","'^'","'('","','","')'","'{'","'}'","'['","']'","All","STLFormatItem",
"StepFormatItems","StepFormatItem","StepSpecial","StepHeaderItem","StepDataItem",
"GeomFormatList","GeomFormat","View","Views","ScalarSimplex","VectorSimplex",
"TensorSimplex","ScalarTriangle","VectorTriangle","TensorTriangle","ScalarLine",
"VectorLine","TensorLine","ScalarPoint","VectorPoint","TensorPoint","Affectation",
"Shape","Transform","MultipleShape","ListOfShapes","Duplicata","Delete","Macro",
"Extrude","ExtrudeParameters","ExtrudeParameter","Transfini","Coherence","Colors",
"ColorSections","ColorSection","@1","@2","@3","ColorAffects","ColorAffect","RGBAExpr",
"BoolExpr","FExpr","FExpr_Single","FExpr_Range","VExpr","ListOfStrings","RecursiveListOfStrings",
"ListOfListOfDouble","RecursiveListOfListOfDouble","ListOfDouble","RecursiveListOfDouble", NULL
};
#endif

static const short yyr1[] = {     0,
   157,   157,   157,   158,   158,   158,   159,   159,   160,   160,
   160,   160,   161,   161,   161,   161,   161,   162,   162,   162,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   163,   163,   163,   163,   163,   163,   163,   163,   163,   163,
   164,   164,   165,   165,   165,   165,   165,   165,   165,   165,
   165,   165,   165,   165,   166,   166,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   168,
   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
   179,   180,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   182,   182,   182,   182,   183,   183,   183,   184,   184,   185,
   186,   187,   188,   188,   188,   188,   188,   188,   188,   188,
   188,   188,   189,   189,   190,   191,   191,   191,   191,   191,
   191,   191,   191,   191,   191,   192,   193,   194,   194,   196,
   195,   197,   195,   198,   195,   199,   199,   200,   200,   200,
   201,   201,   202,   202,   202,   202,   202,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   203,   203,   203,   203,
   203,   203,   203,   203,   203,   203,   204,   204,   204,   205,
   205,   206,   206,   206,   206,   207,   207,   208,   208,   209,
   209,   209,   210,   210,   211,   211,   211,   212,   212,   212,
   212
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,    21,     1,     0,     2,     1,     1,
     1,     2,     2,     2,     2,     2,     2,     7,     5,    17,
     9,    23,    31,    15,    11,    11,    15,     9,    13,     9,
    11,    13,     9,     9,    11,     9,    11,     9,    11,    13,
    13,    11,    13,    17,     9,    11,    11,    13,    11,     9,
     0,     2,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     2,     6,     8,     0,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,    28,
    28,    28,    22,    22,    22,    16,    16,    16,    10,    10,
    10,     4,     7,     8,    12,     6,     5,     7,     7,    12,
     7,     9,    17,     7,     8,     8,     5,     7,    11,     8,
     9,     8,    22,    20,     8,     8,     5,     8,     7,     8,
     7,    11,     7,     9,     1,     1,     1,     0,     2,     4,
     4,     3,     7,     8,    11,    12,    12,     8,    12,     8,
    11,    15,     1,     2,     9,     6,     9,     9,     9,     8,
     8,     8,     6,     4,     8,     2,     4,     0,     2,     0,
     5,     0,     5,     0,     5,     0,     2,     4,     8,     4,
     9,     7,     1,     1,     1,     1,     1,     1,     3,     3,
     3,     3,     3,     3,     2,     2,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     6,     4,     4,     4,
     4,     4,     4,     6,     6,     6,     1,     1,     1,     3,
     6,    11,     9,     7,     7,     0,     3,     1,     3,     0,
     3,     3,     1,     3,     0,     1,     3,     1,     1,     3,
     3
};

static const short yydefact[] = {    51,
     4,     6,     0,     3,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     8,     9,    11,
    10,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
    58,    62,    59,    60,    61,    63,     0,    12,     0,    13,
    14,    16,    15,    17,   216,   216,     0,    64,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
     0,     0,     0,   225,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   128,     0,   225,   128,   156,     0,     0,     0,     0,     0,
     0,   158,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   207,   209,
   208,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   178,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   226,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   132,     0,     0,     0,    67,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   218,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,   186,   185,     0,    92,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   228,
   229,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   130,   129,   154,
     0,   131,     0,     0,     0,     0,     0,     0,     0,     0,
   160,   162,   164,   157,   159,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   217,     0,
    19,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   179,   181,   180,   182,   183,   184,    97,     0,
   225,   225,     0,   107,   225,     0,   117,   225,   225,     0,
     0,   227,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   128,
   128,     0,     0,     0,     0,     0,     0,    67,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,    78,    79,     0,     0,   225,     0,     0,   225,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   225,   225,     0,     0,     0,     0,   225,
   225,     0,     0,     0,     0,     0,   225,     0,   225,     0,
     0,     0,     0,     0,   219,     0,   216,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   196,     0,   198,   199,
   200,   201,   202,   203,     0,     0,     0,     0,     0,     0,
   225,     0,   225,     0,     0,     0,   210,   230,   231,    96,
     0,   225,   225,   225,   146,     0,   225,   225,   225,   225,
   225,   225,   225,   225,     0,     0,     0,   127,     0,   126,
   125,     0,     0,     0,     0,     0,     0,     0,   153,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    65,     0,     0,     0,     0,   220,     0,   166,
   166,   166,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   173,   174,   175,
   176,   177,     0,     0,     0,     0,     0,     0,     0,    18,
     0,     0,     0,     0,     0,    93,   101,     0,   104,     0,
    98,     0,    99,   119,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   121,   123,   128,     0,     0,     0,     0,
     0,     0,     0,   133,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   108,
     0,   225,   225,     0,   225,     0,     0,   166,     0,     0,
   225,     0,     0,     0,   225,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   225,     0,     0,     0,     0,     0,     0,
     0,     0,   216,   197,   204,   205,   206,     0,   106,   116,
     0,     0,   151,   110,   112,     0,     0,     0,   150,   152,
   118,    94,   105,   115,   120,   155,     0,     0,     0,     0,
     0,   138,     0,   140,     0,   134,     0,     0,    66,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,   220,     0,   223,     0,     0,     0,     0,
   161,   167,   163,   165,     0,     0,     0,     0,     0,     0,
     0,    21,     0,    30,     0,    34,     0,    28,     0,     0,
    33,     0,    38,    36,     0,     0,     0,     0,     0,     0,
    45,     0,     0,     0,     0,     0,    50,     0,     0,   102,
   211,     0,   147,   148,   149,   215,     0,   214,   128,   124,
     0,     0,     0,     0,     0,   143,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   225,   222,   221,   225,     0,     0,     0,     0,
   181,   180,   111,     0,     0,   220,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   225,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   225,     0,   144,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,   225,   225,
     0,   224,     0,     0,   168,   209,     0,   170,     0,    35,
     0,     0,     0,     0,    25,     0,    31,     0,    37,    26,
    39,     0,    42,     0,    46,    47,     0,     0,    49,     0,
     0,     0,     0,   213,   122,     0,     0,     0,     0,   141,
   135,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   225,   225,   109,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,   137,   139,   136,     0,   225,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   225,
   225,   225,    95,   100,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    29,    32,    40,     0,    41,    48,    43,
     0,     0,   212,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   225,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   225,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    89,    90,    91,     0,     0,   169,     0,     0,     0,     0,
    24,    27,     0,     0,     0,   142,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   172,
     0,     0,   225,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,    44,    20,   103,   145,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,   171,     0,     0,
   225,     0,     0,     0,     0,     0,     0,   225,   225,   225,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     5,   225,     0,     0,
     0,     0,     0,     0,     0,    86,    87,    88,     0,   114,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   225,
     0,     0,     0,     0,     0,     0,     0,   113,     0,    22,
     0,     0,     0,     0,     0,     0,   225,     0,     0,     0,
   225,   225,   225,     0,     0,     0,     0,     0,     0,     0,
   225,     0,     0,     0,    83,    84,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
   225,   225,   225,    23,     0,     0,     0,    80,    81,    82,
     0,     0,     0
};

static const short yydefgoto[] = {  1271,
     4,     5,    18,    19,    20,    21,     6,    55,    56,   344,
   472,   473,   474,   475,   476,   477,   478,   479,   480,   481,
   482,   483,    57,   339,   578,   579,   580,   581,    61,    62,
    63,   865,   866,    64,    65,    66,   234,   355,   490,   491,
   492,   717,   718,   890,   643,   197,   186,   311,   214,   156,
   268,   714,   805,   806,   312
};

static const short yypact[] = {   472,
-32768,-32768,  -109,-32768,   525,  1180,    33,    67,   105,    73,
   108,   114,   208,   222,    85,    87,    94,-32768,-32768,-32768,
-32768,   224,   263,   110,   154,   182,   -34,   -31,   191,   199,
   243,   225,   340,   350,   351,   323,   355,   379,   242,   245,
   250,   251,   -14,   233,   389,   370,   257,   405,   414,    -1,
   270,   -12,   268,   392,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   424,-32768,  1172,-32768,
-32768,-32768,-32768,-32768,   285,   285,   432,-32768,    40,    40,
    40,    40,   297,    40,   301,    40,    40,    40,   296,    40,
   305,   302,   304,   296,   311,   316,   306,   321,   324,   326,
   328,   329,    39,    39,    39,    39,   330,   331,   345,    40,
-32768,   491,   296,-32768,-32768,   -38,   349,   374,    40,   -40,
    40,-32768,   377,   526,   382,   385,   407,   412,   420,   422,
   423,   425,   426,   427,   436,   439,   440,   444,   445,   447,
   449,   451,   456,   458,   467,   469,   475,   476,   477,   478,
   489,   490,   492,   494,   560,   471,   495,   501,-32768,-32768,
-32768,   496,   503,   510,   511,   515,   516,   517,   518,   522,
   524,   528,   529,   530,   534,   535,   536,   537,   538,   539,
   548,    40,    40,    40,    42,-32768,   120,   657,   669,    40,
   680,    40,   694,   717,   727,    40,   885,   567,   737,    40,
    40,    40,   634,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    40,   549,   523,   551,   555,    40,    40,    40,
   287,   303,-32768,    65,   579,    39,-32768,    40,    40,   761,
   594,    40,   773,   -48,    40,   570,   703,   718,   720,   721,
   722,   723,   729,   740,   741,   748,   755,   762,   769,   771,
   772,   774,   776,   780,   785,   793,   800,   802,   806,   692,
   812,   814,   817,   822,   827,   826,-32768,   -44,   829,   835,
   830,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,   693,   693,   783,-32768,    40,    40,    40,    40,    40,
   236,   837,   838,   809,   282,   821,   841,   857,   858,   279,
-32768,   100,    40,   860,   586,   831,   869,    40,   598,   605,
   915,   927,   946,   956,   974,   996,   851,  1352,    39,   715,
   724,    40,  1553,  1685,  1694,    39,    44,-32768,-32768,-32768,
    40,-32768,   725,   417,  1703,  1712,   867,   734,  1009,   868,
-32768,-32768,-32768,-32768,-32768,  1042,   747,   736,   739,   742,
   746,   749,   750,   757,   758,   760,   763,   764,   779,   782,
   786,   787,   788,   789,   790,   805,   808,   811,   818,   820,
   836,   839,   847,   848,   850,   865,   866,   883,-32768,   784,
-32768,   871,  1057,  1102,  1160,  1170,  1181,  1191,  1201,  1218,
  1228,  1241,  1721,  1255,  1266,  1276,  1286,  1296,  1306,  1730,
  1739,  1748,-32768,   122,   122,   693,   693,   693,-32768,    39,
   296,   296,   884,-32768,   296,   891,-32768,   296,   296,    72,
    40,-32768,   103,   781,   905,   916,   917,   227,   944,   950,
   961,   965,   975,   979,   981,   982,    40,    40,   872,   409,
   409,  1316,    39,    39,    39,     3,   112,-32768,   870,   874,
   876,   882,   912,   913,   918,   919,   924,   925,   930,   931,
   886,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,    40,    40,   296,    40,  1012,   296,   828,
   880,   929,  1028,   932,  1062,    40,    40,    39,  1090,  1091,
   951,  1094,  1100,   296,   296,  1101,    39,  1104,  1106,   296,
   296,  1107,  1118,  1119,  1121,  1122,   296,    53,   296,  1124,
  1123,  1125,  1126,  1128,-32768,   928,   285,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,    40,-32768,-32768,
-32768,-32768,-32768,-32768,    40,    40,    40,  1137,    29,  1138,
   296,  1140,   296,  1141,  1150,    40,   885,   279,-32768,-32768,
    40,   296,   296,   296,-32768,    -2,   296,   296,   296,   296,
   296,   296,   296,   296,  1757,  1766,    40,-32768,   978,   660,
-32768,  1003,  1006,   144,   151,   209,    39,  1154,-32768,   434,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,    40,-32768,  1775,  1784,  1156,  1329,   178,  1083,  1163,
  1163,  1163,    40,  1165,  1018,  1793,  1802,  1019,  1021,  1025,
  1022,  1026,  1031,  1027,  1032,  1039,  1040,  1045,  1041,  1046,
  1053,  1056,  1075,  1076,  1077,  1078,  1085,-32768,-32768,-32768,
-32768,-32768,  1079,  1092,  1098,  1099,  1105,  1103,  1112,-32768,
  1114,  1339,  1364,  1374,  1384,-32768,-32768,    39,-32768,  1164,
-32768,  1202,-32768,-32768,    80,  1811,  1246,  1247,  1251,    40,
    40,    40,  1260,  1261,  1272,  1273,  1274,  1275,  1277,  1278,
    40,    40,  1394,-32768,-32768,   409,    39,  1279,    39,  1290,
    39,    27,  1131,-32768,  1301,  1820,  1829,  1838,  1847,  1856,
  1865,  1874,  1883,  1892,  1901,  1910,  1919,    40,    40,-32768,
  1190,   296,   296,  1225,   296,  1303,  1166,  1163,  1167,  1169,
   148,  1314,  1315,    40,   296,  1322,  1326,  1325,  1187,  1332,
    53,  1333,  1338,    40,  1336,  1345,  1343,  1346,  1348,    53,
    40,    40,    40,   296,  1349,  1351,    53,    40,  1353,  1355,
  1359,    40,   285,-32768,-32768,-32768,-32768,  1360,-32768,-32768,
    40,    40,-32768,-32768,-32768,   131,   234,   244,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,  1404,   299,  1206,  1214,
  1224,-32768,  1227,-32768,  1230,-32768,  1304,    40,-32768,    40,
    40,    40,    40,    40,    40,    40,    40,    40,    40,    40,
    40,  1414,  1424,   178,   214,-32768,   192,  1223,  1299,    26,
-32768,-32768,-32768,-32768,    40,    40,  1376,  1385,  1237,  1928,
  1240,-32768,  1243,-32768,  1244,-32768,  1250,-32768,  1245,  1434,
-32768,  1252,-32768,-32768,  1253,  1254,  1444,  1937,  1455,  1257,
-32768,  1264,  1265,  1946,  1282,  1271,-32768,  1955,  1283,-32768,
   885,  1964,-32768,-32768,-32768,-32768,    40,-32768,   409,-32768,
    40,    40,    40,  1239,    77,-32768,  1465,  1973,  1982,  1991,
  2000,  2009,  2018,  2027,  2036,  2045,  2054,  2063,  2072,  1417,
  1419,  1344,   296,-32768,-32768,   296,    40,  1430,   527,  1431,
   133,   181,-32768,  1309,  1438,   178,    53,  1443,    40,  1441,
    53,  1447,  1451,  1450,  1457,  1458,    40,  1460,   296,  1461,
  1463,    40,  1454,  1470,    40,  1472,  1474,   415,  1335,  1475,
  1485,  1502,   296,  1480,-32768,  1481,    40,    40,    40,    40,
    40,    40,    40,    40,    40,    40,    40,    40,   296,   296,
  1327,-32768,  1341,   253,-32768,  1342,  2081,-32768,  1487,-32768,
  1361,  1363,  1370,  2090,-32768,  1347,-32768,  1350,-32768,-32768,
-32768,  1512,-32768,  1371,-32768,-32768,  1522,  1372,-32768,  1533,
  1380,  1381,    40,-32768,-32768,  1494,  1505,    28,  1383,-32768,
-32768,  2099,  2108,  2117,  2126,  2135,  2144,  2153,  2162,  2171,
  1543,  1565,  1575,  1509,  1519,   296,   296,-32768,    40,    40,
  1532,    53,    53,    53,    53,  1535,  1538,  1539,    53,  1545,
  1546,  1548,  1556,  1557,   612,-32768,-32768,-32768,  1304,   296,
    40,    40,    40,    40,    40,    40,    40,    40,    40,   296,
   296,   296,-32768,-32768,  1413,  1411,   619,  2180,  1568,  1421,
  1423,  1429,  1432,-32768,-32768,-32768,  1440,-32768,-32768,-32768,
  1452,  1462,-32768,    78,  1464,  2189,  2198,  2207,  2216,  2225,
  2234,  2243,  2252,  2261,  1569,  1576,  1579,   296,  1514,  1586,
    40,  1468,    53,    53,  1589,  1599,    53,  1601,  1607,  1610,
   296,    40,    40,    40,    40,    40,    40,    40,    40,    40,
-32768,-32768,-32768,  1469,  1473,-32768,   505,  1619,  1482,  1488,
-32768,-32768,  1484,  1486,  1489,-32768,  1471,  2270,  2279,  2288,
  2297,  2306,  2315,  2324,  2333,  2342,  1552,    40,    40,-32768,
  1637,    53,   296,  1643,  1644,  1646,  1647,    40,    40,    40,
    40,    40,    40,    40,    40,    40,  1506,  2351,   626,  1657,
  1518,  1521,-32768,-32768,-32768,-32768,  2360,  2369,  2378,  2387,
  2396,  2405,  1595,  1605,  1615,    40,    40,-32768,  1524,    53,
   296,    40,    40,    40,    40,    40,    40,   296,   296,   296,
  2414,   643,  1530,  1529,  1540,  2423,  2432,  2441,  2450,  2459,
  2468,  1667,  1669,  1677,    40,  1684,-32768,   296,    53,    40,
    40,    40,    40,    40,    40,-32768,-32768,-32768,   650,-32768,
  1542,  1551,  2477,  2486,  2495,  2504,  2513,  2522,  1688,   296,
  1706,    40,    40,    40,    40,    40,    40,-32768,  1549,-32768,
  2531,  2540,  2549,  1625,  1635,  1645,   296,    40,    40,    40,
   296,   296,   296,  1562,  2558,  2567,  2576,  1710,  1716,  1717,
   296,    40,    40,    40,-32768,-32768,-32768,  1574,  2585,  2594,
  2603,    53,    40,    40,    40,  1577,  1655,  1665,  1675,  1720,
   296,   296,   296,-32768,  1722,  1724,  1725,-32768,-32768,-32768,
  1681,  1732,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,  1284,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,  1727,  1728,  -445,   239,  1737,-32768,-32768,
-32768,   726,  -841,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,  -594,-32768,-32768,  -719,   -79,-32768,  1321,   -91,   -72,
-32768,  -794,  1033,   474,-32768
};


#define	YYLAST		2754


static const short yytable[] = {   185,
   187,   188,   189,   157,   191,   582,   193,   194,   195,   882,
   199,   827,   215,   216,   217,   107,   719,   720,   108,   109,
   836,   120,    83,   925,   226,    85,     7,   843,   117,   888,
   221,   118,   786,  1018,   657,    67,   351,   352,   353,   230,
   231,   233,   159,   160,   670,   671,   672,   295,   161,   162,
   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
   173,   174,   175,   176,   177,   178,   179,   180,   181,   658,
   340,   341,    68,    98,   159,   160,    99,   100,    70,   101,
   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
   171,   172,   173,   174,   175,   176,   177,   178,   179,   180,
   181,   951,   292,   293,   294,   354,   388,   389,   560,   232,
   304,    69,   306,    71,   227,    84,   310,   589,    86,    72,
   315,   316,   317,   812,   319,   320,   321,   322,   323,   324,
   325,   326,   327,   328,   343,   110,   853,   121,   333,   334,
   335,   864,   864,   638,   639,   640,   641,   642,   345,   346,
   159,   160,   349,   587,   588,   356,   161,   162,   163,   164,
   165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
   175,   176,   177,   178,   179,   180,   181,   952,   889,   787,
  1019,   956,   182,   183,   296,   297,   298,   299,   212,   184,
   300,   213,   393,   394,   395,   396,   397,   398,   399,   400,
   401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
   411,   412,   925,    73,   182,   183,   414,   415,   416,   417,
   418,   184,   296,   297,   298,   299,   556,    74,   300,    78,
   924,  1080,   565,   433,    75,   761,    76,   449,   438,   854,
   780,   419,   420,    77,   456,   296,   297,   298,   299,   855,
   431,   300,   452,   432,   296,   297,   298,   299,   998,    80,
   300,   457,   296,   297,   298,   299,   298,   299,   300,    79,
   300,   301,   566,   296,   297,   298,   299,  -186,  -186,   300,
    89,   300,  1040,  1041,  1042,  1043,   430,   424,   425,  1047,
   815,   816,   298,   299,   687,   688,   300,   184,   159,   160,
   196,   689,   690,    81,   161,   162,   163,   164,   165,   166,
   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
   177,   178,   179,   180,   181,  -185,  -185,   712,   548,   300,
   713,    82,    24,    25,    26,    27,    28,    29,    30,    31,
    87,    32,   883,    34,    35,   885,    37,   337,    88,   222,
   557,   558,   225,  1099,  1100,    94,    95,  1103,    96,   691,
   692,   584,   585,   586,   883,   884,    50,   575,   576,   296,
   297,   298,   299,    91,    90,   300,   296,   297,   298,   299,
    51,    52,   300,    92,    93,   111,   296,   297,   298,   299,
    97,   103,   300,   112,   104,   296,   297,   298,   299,   105,
   106,   300,  1141,   113,   604,   605,   618,   607,    98,   114,
   115,    99,   100,   919,   101,   627,   616,   617,   116,   119,
   122,   296,   297,   298,   299,   123,   124,   300,   102,   296,
   297,   298,   299,    54,   155,   300,   158,   336,   182,   183,
  1174,   296,   297,   298,   299,   184,   190,   300,   196,   857,
   192,   201,   858,   202,   651,   206,   338,   200,   652,    39,
    40,    41,    42,   204,    44,   653,   654,   655,   205,  1202,
   207,    -7,    -7,   208,    -7,   209,   665,   210,   211,   218,
   219,   666,   459,   460,   461,   462,   463,   464,   465,   466,
   467,   468,   469,   470,   220,   693,   223,   683,   228,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   696,   697,   698,   699,   700,   701,   702,   703,   704,
   705,   706,   707,   229,    -2,     8,   235,     9,   236,   159,
   946,   237,  1256,   721,   238,   161,   162,   163,   164,   165,
   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
   176,   177,   178,   179,   180,   181,   239,   296,   297,   298,
   299,   240,   198,   300,   267,   973,   758,   203,   974,   241,
   471,   242,   243,   313,   244,   245,   246,    -7,    -7,    -7,
    -7,    -7,    -7,    -7,    -7,   247,   224,   695,   248,   249,
   766,   767,   768,   250,   251,   781,   252,   783,   253,   785,
   254,   777,   778,     1,     2,   255,     3,   256,    24,    25,
    26,    27,    28,    29,    30,    31,   257,    32,   258,    34,
    35,   269,    37,   337,   259,   260,   261,   262,   802,   803,
    10,    11,    12,    13,    14,    15,    16,    17,   263,   264,
   318,   265,    50,   266,   820,   272,   270,   296,   297,   298,
   299,   271,   273,   300,   830,  1119,    51,    52,  1120,   274,
   275,   837,   838,   839,   276,   277,   278,   279,   844,   182,
   183,   280,   848,   281,   330,   348,   184,   282,   283,   284,
   849,   851,   852,   285,   286,   287,   288,   289,   290,    24,
    25,    26,    27,    28,    29,    30,    31,   291,    32,   329,
    34,    35,   331,    37,   337,   332,   357,   358,   867,    54,
   868,   869,   870,   871,   872,   873,   874,   875,   876,   877,
   878,   879,   359,    50,   360,   361,   362,   363,   296,   297,
   298,   299,   342,   364,   300,   891,   892,    51,    52,   435,
   296,   297,   298,   299,   365,   366,   300,   296,   297,   298,
   299,   439,   367,   300,   296,   297,   298,   299,   440,   368,
   300,   296,   297,   298,   299,  1053,   369,   300,   296,   297,
   298,   299,  1070,   370,   300,   371,   372,   918,   373,  1158,
   374,   920,   921,   922,   375,   296,   297,   298,   299,   376,
    54,   300,   296,   297,   298,   299,  1186,   377,   300,   296,
   297,   298,   299,  1209,   378,   300,   379,   944,   302,   947,
   380,   296,   297,   298,   299,   381,   382,   300,   383,   954,
   303,   384,   296,   297,   298,   299,   385,   962,   300,   386,
   387,   305,   967,   390,   392,   970,   296,   297,   298,   299,
   391,   300,   300,   421,   422,   307,   427,   982,   983,   984,
   985,   986,   987,   988,   989,   990,   991,   992,   993,   296,
   297,   298,   299,   428,   429,   300,   434,   450,   308,   296,
   297,   298,   299,   486,   489,   300,   451,   458,   309,   296,
   297,   298,   299,   487,   494,   300,   495,   525,   314,   496,
   551,   603,   497,  1015,   549,   550,   498,   553,   552,   499,
   500,   554,   555,   296,   297,   298,   299,   501,   502,   300,
   503,   562,   347,   504,   505,   296,   297,   298,   299,  1037,
  1038,   300,   563,   564,   350,   296,   297,   298,   299,   506,
   561,   300,   507,   650,   413,   526,   508,   509,   510,   511,
   512,  1056,  1057,  1058,  1059,  1060,  1061,  1062,  1063,  1064,
   567,   296,   297,   298,   299,   513,   568,   300,   514,   606,
   423,   515,   609,   296,   297,   298,   299,   569,   516,   300,
   517,   570,   426,   296,   297,   298,   299,   624,   625,   300,
   610,   571,   436,   630,   631,   572,   518,   573,   574,   519,
   637,  1097,   644,   296,   297,   298,   299,   520,   521,   300,
   522,   447,  1108,  1109,  1110,  1111,  1112,  1113,  1114,  1115,
  1116,   296,   297,   298,   299,   523,   524,   300,   608,   591,
   437,   527,   577,   592,   660,   593,   662,   296,   297,   298,
   299,   594,   611,   300,   613,   667,   668,   669,  1138,  1139,
   673,   674,   675,   676,   677,   678,   679,   680,  1147,  1148,
  1149,  1150,  1151,  1152,  1153,  1154,  1155,   296,   297,   298,
   299,   595,   596,   300,   615,   614,   441,   597,   598,   296,
   297,   298,   299,   599,   600,   300,  1171,  1172,   442,   601,
   602,   612,  1176,  1177,  1178,  1179,  1180,  1181,   296,   297,
   298,   299,   619,   620,   300,   621,   622,   443,   296,   297,
   298,   299,   623,   626,   300,  1199,   628,   444,   629,   632,
  1203,  1204,  1205,  1206,  1207,  1208,   296,   297,   298,   299,
   633,   634,   300,   635,   636,   445,   645,   646,   648,   647,
   649,   684,  1221,  1222,  1223,  1224,  1225,  1226,   296,   297,
   298,   299,   656,   659,   300,   661,   663,   446,  1235,  1236,
  1237,   296,   297,   298,   299,   664,   685,   300,   686,   694,
   488,   710,  1249,  1250,  1251,   715,   716,   722,   723,   759,
   726,   727,   729,  1257,  1258,  1259,   728,   730,   732,    -1,
    22,   731,   733,    23,   296,   297,   298,   299,   809,   734,
   300,   735,   737,   493,   817,   736,   804,   738,   821,   296,
   297,   298,   299,   739,   125,   300,   740,   760,   528,    24,
    25,    26,    27,    28,    29,    30,    31,   840,    32,    33,
    34,    35,    36,    37,    38,   741,   742,   743,   744,   746,
    39,    40,    41,    42,    43,    44,   745,    45,    46,    47,
    48,    49,   747,    50,   296,   297,   298,   299,   748,   749,
   300,   763,   764,   529,   751,   750,   765,    51,    52,   126,
   127,   128,   752,    53,   753,   769,   770,   129,   130,   131,
   132,   133,   134,   135,   136,   137,   138,   771,   772,   773,
   774,   788,   775,   776,   782,   139,   140,   141,   142,   143,
   144,   145,   146,   147,   148,   784,   149,   150,   151,   152,
   153,   154,   296,   297,   298,   299,   789,   808,   300,   810,
    54,   530,   296,   297,   298,   299,   818,   819,   300,   811,
   813,   531,   814,   296,   297,   298,   299,   822,   823,   300,
   824,   825,   532,   296,   297,   298,   299,   826,   828,   300,
   829,   831,   533,   296,   297,   298,   299,   832,   833,   300,
   835,   834,   534,   842,   841,   845,   942,   846,   859,   943,
   296,   297,   298,   299,   847,   850,   300,   860,   864,   535,
   296,   297,   298,   299,   861,   886,   300,   862,   887,   536,
   863,   893,   964,   296,   297,   298,   299,   894,   895,   300,
   897,   923,   537,   898,   899,   901,   979,   296,   297,   298,
   299,   900,   903,   300,   904,   905,   539,   909,   296,   297,
   298,   299,   994,   995,   300,   910,   911,   540,   296,   297,
   298,   299,   914,   939,   300,   940,   941,   541,   296,   297,
   298,   299,   913,   916,   300,   945,   948,   542,   296,   297,
   298,   299,   949,   950,   300,   953,   955,   543,   296,   297,
   298,   299,   957,   958,   300,   959,   968,   544,   296,   297,
   298,   299,   960,   961,   300,   963,   965,   583,   966,  1035,
  1036,   296,   297,   298,   299,   969,   971,   300,   972,   996,
   711,   296,   297,   298,   299,   980,   981,   300,   975,  1001,
   754,   997,   999,  1055,   296,   297,   298,   299,  1006,  1016,
   300,  1007,   448,  1065,  1066,  1067,   296,   297,   298,   299,
  1017,  1002,   300,  1003,  1033,   755,   296,   297,   298,   299,
  1004,  1009,   300,  1011,  1034,   756,   296,   297,   298,   299,
  1013,  1014,   300,  1020,  1039,   757,   296,   297,   298,   299,
  1044,  1094,   300,  1045,  1046,   779,   296,   297,   298,   299,
  1048,  1049,   300,  1050,  1107,   856,   296,   297,   298,   299,
  1051,  1052,   300,  1068,  1069,   880,   296,   297,   298,   299,
  1072,  1073,   300,  1074,  1091,   881,   296,   297,   298,   299,
  1075,  1092,   300,  1076,  1093,   902,   296,   297,   298,   299,
  1077,  1096,   300,  1095,  1101,   906,  1142,   296,   297,   298,
   299,  1098,  1078,   300,  1102,  1104,   908,   296,   297,   298,
   299,  1105,  1079,   300,  1081,  1106,   926,   296,   297,   298,
   299,  1121,  1117,   300,  1127,  1118,   976,   296,   297,   298,
   299,  1137,  1122,   300,  1175,  1124,   977,  1125,  1123,  1140,
  1126,  1182,  1183,  1184,   296,   297,   298,   299,  1143,  1144,
   300,  1145,  1146,   978,   296,   297,   298,   299,  1156,  1159,
   300,  1201,  1173,  1008,   296,   297,   298,   299,  1160,  1187,
   300,  1161,  1196,  1010,  1197,   296,   297,   298,   299,  1188,
  1272,   300,  1198,  1219,  1012,   296,   297,   298,   299,  1200,
  1189,   300,  1210,  1218,  1030,   296,   297,   298,   299,  1227,
  1234,   300,  1211,   453,  1238,  1239,  1240,   296,   297,   298,
   299,  1220,  1241,   300,  1248,  1245,  1031,   296,   297,   298,
   299,  1246,  1247,   300,  1252,  1264,  1032,  1268,  1260,  1269,
  1270,  1273,    58,    59,  1265,  1266,  1267,   296,   297,   298,
   299,   590,    60,   300,  1054,   807,  1168,   296,   297,   298,
   299,   559,     0,   300,     0,     0,  1169,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1170,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1231,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1232,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1233,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1261,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1262,   296,   297,   298,
   299,     0,     0,   300,     0,     0,  1263,   296,   297,   298,
   299,     0,     0,   300,     0,   454,   296,   297,   298,   299,
     0,     0,   300,     0,   455,   296,   297,   298,   299,     0,
     0,   300,     0,   484,   296,   297,   298,   299,     0,     0,
   300,     0,   485,   296,   297,   298,   299,     0,     0,   300,
     0,   538,   296,   297,   298,   299,     0,     0,   300,     0,
   545,   296,   297,   298,   299,     0,     0,   300,     0,   546,
   296,   297,   298,   299,     0,     0,   300,     0,   547,   296,
   297,   298,   299,     0,     0,   300,     0,   681,   296,   297,
   298,   299,     0,     0,   300,     0,   682,   296,   297,   298,
   299,     0,     0,   300,     0,   708,   296,   297,   298,   299,
     0,     0,   300,     0,   709,   296,   297,   298,   299,     0,
     0,   300,     0,   724,   296,   297,   298,   299,     0,     0,
   300,     0,   725,   296,   297,   298,   299,     0,     0,   300,
     0,   762,   296,   297,   298,   299,     0,     0,   300,     0,
   790,   296,   297,   298,   299,     0,     0,   300,     0,   791,
   296,   297,   298,   299,     0,     0,   300,     0,   792,   296,
   297,   298,   299,     0,     0,   300,     0,   793,   296,   297,
   298,   299,     0,     0,   300,     0,   794,   296,   297,   298,
   299,     0,     0,   300,     0,   795,   296,   297,   298,   299,
     0,     0,   300,     0,   796,   296,   297,   298,   299,     0,
     0,   300,     0,   797,   296,   297,   298,   299,     0,     0,
   300,     0,   798,   296,   297,   298,   299,     0,     0,   300,
     0,   799,   296,   297,   298,   299,     0,     0,   300,     0,
   800,   296,   297,   298,   299,     0,     0,   300,     0,   801,
   296,   297,   298,   299,     0,     0,   300,     0,   896,   296,
   297,   298,   299,     0,     0,   300,     0,   907,   296,   297,
   298,   299,     0,     0,   300,     0,   912,   296,   297,   298,
   299,     0,     0,   300,     0,   915,   296,   297,   298,   299,
     0,     0,   300,     0,   917,   296,   297,   298,   299,     0,
     0,   300,     0,   927,   296,   297,   298,   299,     0,     0,
   300,     0,   928,   296,   297,   298,   299,     0,     0,   300,
     0,   929,   296,   297,   298,   299,     0,     0,   300,     0,
   930,   296,   297,   298,   299,     0,     0,   300,     0,   931,
   296,   297,   298,   299,     0,     0,   300,     0,   932,   296,
   297,   298,   299,     0,     0,   300,     0,   933,   296,   297,
   298,   299,     0,     0,   300,     0,   934,   296,   297,   298,
   299,     0,     0,   300,     0,   935,   296,   297,   298,   299,
     0,     0,   300,     0,   936,   296,   297,   298,   299,     0,
     0,   300,     0,   937,   296,   297,   298,   299,     0,     0,
   300,     0,   938,   296,   297,   298,   299,     0,     0,   300,
     0,  1000,   296,   297,   298,   299,     0,     0,   300,     0,
  1005,   296,   297,   298,   299,     0,     0,   300,     0,  1021,
   296,   297,   298,   299,     0,     0,   300,     0,  1022,   296,
   297,   298,   299,     0,     0,   300,     0,  1023,   296,   297,
   298,   299,     0,     0,   300,     0,  1024,   296,   297,   298,
   299,     0,     0,   300,     0,  1025,   296,   297,   298,   299,
     0,     0,   300,     0,  1026,   296,   297,   298,   299,     0,
     0,   300,     0,  1027,   296,   297,   298,   299,     0,     0,
   300,     0,  1028,   296,   297,   298,   299,     0,     0,   300,
     0,  1029,   296,   297,   298,   299,     0,     0,   300,     0,
  1071,   296,   297,   298,   299,     0,     0,   300,     0,  1082,
   296,   297,   298,   299,     0,     0,   300,     0,  1083,   296,
   297,   298,   299,     0,     0,   300,     0,  1084,   296,   297,
   298,   299,     0,     0,   300,     0,  1085,   296,   297,   298,
   299,     0,     0,   300,     0,  1086,   296,   297,   298,   299,
     0,     0,   300,     0,  1087,   296,   297,   298,   299,     0,
     0,   300,     0,  1088,   296,   297,   298,   299,     0,     0,
   300,     0,  1089,   296,   297,   298,   299,     0,     0,   300,
     0,  1090,   296,   297,   298,   299,     0,     0,   300,     0,
  1128,   296,   297,   298,   299,     0,     0,   300,     0,  1129,
   296,   297,   298,   299,     0,     0,   300,     0,  1130,   296,
   297,   298,   299,     0,     0,   300,     0,  1131,   296,   297,
   298,   299,     0,     0,   300,     0,  1132,   296,   297,   298,
   299,     0,     0,   300,     0,  1133,   296,   297,   298,   299,
     0,     0,   300,     0,  1134,   296,   297,   298,   299,     0,
     0,   300,     0,  1135,   296,   297,   298,   299,     0,     0,
   300,     0,  1136,   296,   297,   298,   299,     0,     0,   300,
     0,  1157,   296,   297,   298,   299,     0,     0,   300,     0,
  1162,   296,   297,   298,   299,     0,     0,   300,     0,  1163,
   296,   297,   298,   299,     0,     0,   300,     0,  1164,   296,
   297,   298,   299,     0,     0,   300,     0,  1165,   296,   297,
   298,   299,     0,     0,   300,     0,  1166,   296,   297,   298,
   299,     0,     0,   300,     0,  1167,   296,   297,   298,   299,
     0,     0,   300,     0,  1185,   296,   297,   298,   299,     0,
     0,   300,     0,  1190,   296,   297,   298,   299,     0,     0,
   300,     0,  1191,   296,   297,   298,   299,     0,     0,   300,
     0,  1192,   296,   297,   298,   299,     0,     0,   300,     0,
  1193,   296,   297,   298,   299,     0,     0,   300,     0,  1194,
   296,   297,   298,   299,     0,     0,   300,     0,  1195,   296,
   297,   298,   299,     0,     0,   300,     0,  1212,   296,   297,
   298,   299,     0,     0,   300,     0,  1213,   296,   297,   298,
   299,     0,     0,   300,     0,  1214,   296,   297,   298,   299,
     0,     0,   300,     0,  1215,   296,   297,   298,   299,     0,
     0,   300,     0,  1216,   296,   297,   298,   299,     0,     0,
   300,     0,  1217,   296,   297,   298,   299,     0,     0,   300,
     0,  1228,   296,   297,   298,   299,     0,     0,   300,     0,
  1229,   296,   297,   298,   299,     0,     0,   300,     0,  1230,
   296,   297,   298,   299,     0,     0,   300,     0,  1242,   296,
   297,   298,   299,     0,     0,   300,     0,  1243,   296,   297,
   298,   299,     0,     0,   300,     0,  1244,   296,   297,   298,
   299,     0,     0,   300,     0,  1253,   296,   297,   298,   299,
     0,     0,   300,     0,  1254,   296,   297,   298,   299,     0,
     0,   300,     0,  1255
};

static const short yycheck[] = {    79,
    80,    81,    82,    76,    84,   451,    86,    87,    88,   804,
    90,   731,   104,   105,   106,    30,   611,   612,    33,    34,
   740,    34,    57,   865,    63,    57,   136,   747,    30,     4,
   110,    33,     6,     6,     6,     3,    85,    86,    87,   119,
    81,   121,     3,     4,    47,    48,    49,     6,     9,    10,
    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    28,    29,    41,
     6,     7,     6,    30,     3,     4,    33,    34,     6,    36,
     9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
    19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
    29,   896,   182,   183,   184,   154,   151,   152,     6,   150,
   190,     7,   192,     6,   153,   150,   196,     6,   150,     6,
   200,   201,   202,   718,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   226,   150,     6,   150,   218,   219,
   220,    65,    65,    91,    92,    93,    94,    95,   228,   229,
     3,     4,   232,   151,   152,   235,     9,    10,    11,    12,
    13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    28,    29,   897,   153,   153,
   153,   901,   143,   144,   143,   144,   145,   146,   150,   150,
   149,   153,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,  1054,     6,   143,   144,   296,   297,   298,   299,
   300,   150,   143,   144,   145,   146,   155,     6,   149,     6,
   154,   154,     6,   313,   150,   156,   150,   329,   318,     6,
   686,     6,     7,   150,   336,   143,   144,   145,   146,     6,
   151,   149,   332,   154,   143,   144,   145,   146,     6,   150,
   149,   341,   143,   144,   145,   146,   145,   146,   149,     7,
   149,   152,    46,   143,   144,   145,   146,   145,   146,   149,
    38,   149,  1002,  1003,  1004,  1005,     8,     6,     7,  1009,
   143,   144,   145,   146,   151,   152,   149,   150,     3,     4,
   153,   151,   152,   150,     9,    10,    11,    12,    13,    14,
    15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
    25,    26,    27,    28,    29,   145,   146,   150,   420,   149,
   153,   150,    30,    31,    32,    33,    34,    35,    36,    37,
   150,    39,   151,    41,    42,   154,    44,    45,   150,   111,
   430,   431,   114,  1073,  1074,    33,    34,  1077,    36,   151,
   152,   453,   454,   455,   151,   152,    64,   447,   448,   143,
   144,   145,   146,    34,   150,   149,   143,   144,   145,   146,
    78,    79,   149,    34,    34,   153,   143,   144,   145,   146,
    36,   150,   149,     5,   150,   143,   144,   145,   146,   150,
   150,   149,  1122,    34,   484,   485,   498,   487,    30,   153,
     6,    33,    34,   859,    36,   507,   496,   497,     5,   150,
   153,   143,   144,   145,   146,    34,     3,   149,    50,   143,
   144,   145,   146,   131,   150,   149,     5,   151,   143,   144,
  1160,   143,   144,   145,   146,   150,   150,   149,   153,   151,
   150,   150,   154,   150,   527,   150,   154,   153,   538,    51,
    52,    53,    54,   153,    56,   545,   546,   547,   153,  1189,
   150,     0,     1,   150,     3,   150,   556,   150,   150,   150,
   150,   561,    66,    67,    68,    69,    70,    71,    72,    73,
    74,    75,    76,    77,   150,   587,     6,   577,   150,    66,
    67,    68,    69,    70,    71,    72,    73,    74,    75,    76,
    77,   591,   592,   593,   594,   595,   596,   597,   598,   599,
   600,   601,   602,   150,     0,     1,   150,     3,     3,     3,
     4,   150,  1252,   613,   150,     9,    10,    11,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    28,    29,   150,   143,   144,   145,
   146,   150,    89,   149,     5,   151,   658,    94,   154,   150,
   154,   150,   150,     7,   150,   150,   150,   106,   107,   108,
   109,   110,   111,   112,   113,   150,   113,   154,   150,   150,
   670,   671,   672,   150,   150,   687,   150,   689,   150,   691,
   150,   681,   682,   132,   133,   150,   135,   150,    30,    31,
    32,    33,    34,    35,    36,    37,   150,    39,   150,    41,
    42,   151,    44,    45,   150,   150,   150,   150,   708,   709,
   106,   107,   108,   109,   110,   111,   112,   113,   150,   150,
     7,   150,    64,   150,   724,   150,   152,   143,   144,   145,
   146,   151,   150,   149,   734,   151,    78,    79,   154,   150,
   150,   741,   742,   743,   150,   150,   150,   150,   748,   143,
   144,   150,   752,   150,   152,    82,   150,   150,   150,   150,
   753,   761,   762,   150,   150,   150,   150,   150,   150,    30,
    31,    32,    33,    34,    35,    36,    37,   150,    39,   151,
    41,    42,   152,    44,    45,   151,   137,     5,   788,   131,
   790,   791,   792,   793,   794,   795,   796,   797,   798,   799,
   800,   801,     5,    64,     5,     5,     5,     5,   143,   144,
   145,   146,   154,     5,   149,   815,   816,    78,    79,   154,
   143,   144,   145,   146,     5,     5,   149,   143,   144,   145,
   146,   154,     5,   149,   143,   144,   145,   146,   154,     5,
   149,   143,   144,   145,   146,   154,     5,   149,   143,   144,
   145,   146,   154,     5,   149,     5,     5,   857,     5,   154,
     5,   861,   862,   863,     5,   143,   144,   145,   146,     5,
   131,   149,   143,   144,   145,   146,   154,     5,   149,   143,
   144,   145,   146,   154,     5,   149,     5,   887,   152,   889,
     5,   143,   144,   145,   146,   124,     5,   149,     5,   899,
   152,     5,   143,   144,   145,   146,     5,   907,   149,     3,
     5,   152,   912,     5,     5,   915,   143,   144,   145,   146,
     6,   149,   149,     7,     7,   152,     6,   927,   928,   929,
   930,   931,   932,   933,   934,   935,   936,   937,   938,   143,
   144,   145,   146,     7,     7,   149,     7,   153,   152,   143,
   144,   145,   146,     7,     7,   149,   153,   153,   152,   143,
   144,   145,   146,   150,   138,   149,   151,     5,   152,   151,
     7,     6,   151,   973,   421,   422,   151,     7,   425,   151,
   151,   428,   429,   143,   144,   145,   146,   151,   151,   149,
   151,     7,   152,   151,   151,   143,   144,   145,   146,   999,
  1000,   149,     7,     7,   152,   143,   144,   145,   146,   151,
   150,   149,   151,     6,   152,   152,   151,   151,   151,   151,
   151,  1021,  1022,  1023,  1024,  1025,  1026,  1027,  1028,  1029,
     7,   143,   144,   145,   146,   151,     7,   149,   151,   486,
   152,   151,   489,   143,   144,   145,   146,     7,   151,   149,
   151,     7,   152,   143,   144,   145,   146,   504,   505,   149,
   153,     7,   152,   510,   511,     7,   151,     7,     7,   151,
   517,  1071,   519,   143,   144,   145,   146,   151,   151,   149,
   151,   151,  1082,  1083,  1084,  1085,  1086,  1087,  1088,  1089,
  1090,   143,   144,   145,   146,   151,   151,   149,     7,   150,
   152,   151,   151,   150,   551,   150,   553,   143,   144,   145,
   146,   150,   153,   149,     7,   562,   563,   564,  1118,  1119,
   567,   568,   569,   570,   571,   572,   573,   574,  1128,  1129,
  1130,  1131,  1132,  1133,  1134,  1135,  1136,   143,   144,   145,
   146,   150,   150,   149,     3,   134,   152,   150,   150,   143,
   144,   145,   146,   150,   150,   149,  1156,  1157,   152,   150,
   150,   153,  1162,  1163,  1164,  1165,  1166,  1167,   143,   144,
   145,   146,     3,     3,   149,   145,     3,   152,   143,   144,
   145,   146,     3,     3,   149,  1185,     3,   152,     3,     3,
  1190,  1191,  1192,  1193,  1194,  1195,   143,   144,   145,   146,
     3,     3,   149,     3,     3,   152,     3,     5,     3,     5,
     3,   154,  1212,  1213,  1214,  1215,  1216,  1217,   143,   144,
   145,   146,     6,     6,   149,     6,     6,   152,  1228,  1229,
  1230,   143,   144,   145,   146,     6,   154,   149,   153,     6,
   152,     6,  1242,  1243,  1244,    83,     4,     3,   151,     6,
   152,   151,   151,  1253,  1254,  1255,   152,   152,   152,     0,
     1,   151,   151,     4,   143,   144,   145,   146,   715,   151,
   149,   152,   152,   152,   721,   151,     7,   152,   725,   143,
   144,   145,   146,   151,    33,   149,   151,     6,   152,    30,
    31,    32,    33,    34,    35,    36,    37,   744,    39,    40,
    41,    42,    43,    44,    45,   151,   151,   151,   151,   151,
    51,    52,    53,    54,    55,    56,   152,    58,    59,    60,
    61,    62,   151,    64,   143,   144,   145,   146,   151,   151,
   149,     6,     6,   152,   152,   151,     6,    78,    79,    88,
    89,    90,   151,    84,   151,     6,     6,    96,    97,    98,
    99,   100,   101,   102,   103,   104,   105,     6,     6,     6,
     6,   151,     6,     6,     6,   114,   115,   116,   117,   118,
   119,   120,   121,   122,   123,     6,   125,   126,   127,   128,
   129,   130,   143,   144,   145,   146,     6,    83,   149,     7,
   131,   152,   143,   144,   145,   146,     3,     3,   149,   154,
   154,   152,   154,   143,   144,   145,   146,     6,     3,   149,
     6,   145,   152,   143,   144,   145,   146,     6,     6,   149,
     3,     6,   152,   143,   144,   145,   146,     3,     6,   149,
     3,     6,   152,     3,     6,     3,   883,     3,   153,   886,
   143,   144,   145,   146,     6,     6,   149,   154,    65,   152,
   143,   144,   145,   146,   151,   153,   149,   151,    80,   152,
   151,     6,   909,   143,   144,   145,   146,     3,   152,   149,
   151,   153,   152,   151,   151,   151,   923,   143,   144,   145,
   146,   152,   151,   149,   152,   152,   152,   151,   143,   144,
   145,   146,   939,   940,   149,   152,   152,   152,   143,   144,
   145,   146,   152,     7,   149,     7,    83,   152,   143,   144,
   145,   146,   151,   151,   149,     6,     6,   152,   143,   144,
   145,   146,   134,     6,   149,     3,     6,   152,   143,   144,
   145,   146,     6,     3,   149,     6,     3,   152,   143,   144,
   145,   146,     6,     6,   149,     6,     6,   152,     6,   996,
   997,   143,   144,   145,   146,     6,     5,   149,     5,   153,
   152,   143,   144,   145,   146,     6,     6,   149,   154,     3,
   152,   151,   151,  1020,   143,   144,   145,   146,   152,     6,
   149,   152,   151,  1030,  1031,  1032,   143,   144,   145,   146,
     6,   151,   149,   151,     6,   152,   143,   144,   145,   146,
   151,   151,   149,   152,     6,   152,   143,   144,   145,   146,
   151,   151,   149,   151,     3,   152,   143,   144,   145,   146,
     6,  1068,   149,     6,     6,   152,   143,   144,   145,   146,
     6,     6,   149,     6,  1081,   152,   143,   144,   145,   146,
     5,     5,   149,   151,   154,   152,   143,   144,   145,   146,
     3,   151,   149,   151,     6,   152,   143,   144,   145,   146,
   152,     6,   149,   152,     6,   152,   143,   144,   145,   146,
   151,     6,   149,    80,     6,   152,  1123,   143,   144,   145,
   146,   134,   151,   149,     6,     5,   152,   143,   144,   145,
   146,     5,   151,   149,   151,     6,   152,   143,   144,   145,
   146,     3,   154,   149,   154,   153,   152,   143,   144,   145,
   146,    80,   151,   149,  1161,   152,   152,   152,   151,     3,
   152,  1168,  1169,  1170,   143,   144,   145,   146,     6,     6,
   149,     6,     6,   152,   143,   144,   145,   146,   153,     3,
   149,  1188,   139,   152,   143,   144,   145,   146,   151,   140,
   149,   151,     6,   152,     6,   143,   144,   145,   146,   151,
     0,   149,     6,  1210,   152,   143,   144,   145,   146,     6,
   151,   149,   151,     6,   152,   143,   144,   145,   146,   151,
  1227,   149,   152,   151,  1231,  1232,  1233,   143,   144,   145,
   146,     6,   151,   149,  1241,     6,   152,   143,   144,   145,
   146,     6,     6,   149,   151,     6,   152,     6,   152,     6,
     6,     0,     6,     6,  1261,  1262,  1263,   143,   144,   145,
   146,   458,     6,   149,  1019,   713,   152,   143,   144,   145,
   146,   431,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,    -1,   152,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,
   149,    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,
    -1,   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,
   151,   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,
   143,   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,
   144,   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,
   145,   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,
   146,    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,
    -1,    -1,   149,    -1,   151,   143,   144,   145,   146,    -1,
    -1,   149,    -1,   151
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/lib/bison.simple"
/* This file comes from bison-1.28.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330,
   Boston, MA 02111-1307, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

#ifndef YYSTACK_USE_ALLOCA
#ifdef alloca
#define YYSTACK_USE_ALLOCA
#else /* alloca not defined */
#ifdef __GNUC__
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
#define YYSTACK_USE_ALLOCA
#include <alloca.h>
#else /* not sparc */
/* We think this test detects Watcom and Microsoft C.  */
/* This used to test MSDOS, but that is a bad idea
   since that symbol is in the user namespace.  */
#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
#if 0 /* No need for malloc.h, which pollutes the namespace;
	 instead, just don't use alloca.  */
#include <malloc.h>
#endif
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
/* I don't know what this was needed for, but it pollutes the namespace.
   So I turned it off.   rms, 2 May 1997.  */
/* #include <malloc.h>  */
 #pragma alloca
#define YYSTACK_USE_ALLOCA
#else /* not MSDOS, or __TURBOC__, or _AIX */
#if 0
#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
		 and on HPUX 10.  Eventually we can turn this on.  */
#define YYSTACK_USE_ALLOCA
#define alloca __builtin_alloca
#endif /* __hpux */
#endif
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc */
#endif /* not GNU C */
#endif /* alloca not defined */
#endif /* YYSTACK_USE_ALLOCA not defined */

#ifdef YYSTACK_USE_ALLOCA
#define YYSTACK_ALLOC alloca
#else
#define YYSTACK_ALLOC malloc
#endif

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	goto yyacceptlab
#define YYABORT 	goto yyabortlab
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Define __yy_memcpy.  Note that the size argument
   should be passed with type unsigned int, because that is what the non-GCC
   definitions require.  With GCC, __builtin_memcpy takes an arg
   of type size_t, but it can handle unsigned int.  */

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     unsigned int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, unsigned int count)
{
  register char *t = to;
  register char *f = from;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 217 "/usr/lib/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
#ifdef YYPARSE_PARAM
int yyparse (void *);
#else
int yyparse (void);
#endif
#endif

int
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;
  int yyfree_stacks = 0;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  if (yyfree_stacks)
	    {
	      free (yyss);
	      free (yyvs);
#ifdef YYLSP_NEEDED
	      free (yyls);
#endif
	    }
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
#ifndef YYSTACK_USE_ALLOCA
      yyfree_stacks = 1;
#endif
      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1,
		   size * (unsigned int) sizeof (*yyssp));
      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
		   size * (unsigned int) sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1,
		   size * (unsigned int) sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 4:
#line 116 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format");
      STL_Surf = Create_Surface(1,MSH_SURF_STL,1);
      STL_Surf->STL = new STL_Data;
      return 1;
    ;
    break;}
case 5:
#line 130 "Gmsh.y"
{
      STL_Surf->STL->Add_Facet( yyvsp[-12].d, yyvsp[-11].d, yyvsp[-10].d,
				yyvsp[-8].d, yyvsp[-7].d, yyvsp[-6].d,
				yyvsp[-4].d, yyvsp[-3].d, yyvsp[-2].d);
      return 1;
    ;
    break;}
case 6:
#line 137 "Gmsh.y"
{
      Msg(PARSER_INFO,"STL File Format Read");
      Tree_Add(THEM->Surfaces, &STL_Surf);
      return 1;
    ;
    break;}
case 9:
#line 154 "Gmsh.y"
{ return 1; ;
    break;}
case 10:
#line 155 "Gmsh.y"
{ return 1; ;
    break;}
case 11:
#line 156 "Gmsh.y"
{ return 1; ;
    break;}
case 12:
#line 157 "Gmsh.y"
{ yyerrok ; return 1; ;
    break;}
case 13:
#line 162 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format");
      Create_Step_Solid_BRep();
    ;
    break;}
case 14:
#line 167 "Gmsh.y"
{
      Msg(PARSER_INFO,"Step Iso-10303-21 File Format Read");
      Resolve_BREP ();
    ;
    break;}
case 18:
#line 178 "Gmsh.y"
{
    ;
    break;}
case 19:
#line 181 "Gmsh.y"
{
    ;
    break;}
case 20:
#line 185 "Gmsh.y"
{
   ;
    break;}
case 21:
#line 191 "Gmsh.y"
{
        Add_Cartesian_Point((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2]);
    ;
    break;}
case 22:
#line 197 "Gmsh.y"
{
       Add_BSpline_Curve_With_Knots ((int)yyvsp[-22].d, yyvsp[-18].c, (int) yyvsp[-16].d, yyvsp[-14].l,	yyvsp[-6].l, yyvsp[-4].l, 0., 1.);
    ;
    break;}
case 23:
#line 204 "Gmsh.y"
{
      Add_BSpline_Surface_With_Knots ((int)yyvsp[-30].d, yyvsp[-26].c, (int) yyvsp[-24].d, (int) yyvsp[-22].d, yyvsp[-20].l, yyvsp[-10].l,
				      yyvsp[-8].l, yyvsp[-6].l, yyvsp[-4].l, 0., 1., 0., 1. );
    ;
    break;}
case 24:
#line 210 "Gmsh.y"
{
      Add_Edge_Curve ((int)yyvsp[-14].d, yyvsp[-10].c , (int)yyvsp[-8].d , (int)yyvsp[-6].d, (int)yyvsp[-4].d);
    ;
    break;}
case 25:
#line 214 "Gmsh.y"
{
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,1);
    ;
    break;}
case 26:
#line 218 "Gmsh.y"
{
      /* La je dois voir la norme ! Face_Bound : trou externe a la surface ! */
      Msg(PARSER_INFO,"Found a Face Bound");
      Add_Face_Outer_Bound((int)yyvsp[-10].d,yyvsp[-6].c,(int)yyvsp[-4].d,yyvsp[-2].i,0);
    ;
    break;}
case 27:
#line 225 "Gmsh.y"
{
      Add_Oriented_Edge((int)yyvsp[-14].d,yyvsp[-10].c,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 28:
#line 229 "Gmsh.y"
{
      Add_Edge_Loop((int)yyvsp[-8].d,yyvsp[-4].c,yyvsp[-2].l);
    ;
    break;}
case 29:
#line 234 "Gmsh.y"
{
      Add_Advanced_Face((int)yyvsp[-12].d,yyvsp[-8].c,yyvsp[-6].l,(int)yyvsp[-4].d,yyvsp[-2].i);
    ;
    break;}
case 30:
#line 238 "Gmsh.y"
{
      Add_Vertex_Point((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 31:
#line 242 "Gmsh.y"
{
    ;
    break;}
case 32:
#line 246 "Gmsh.y"
{
      Add_Axis2_Placement3D  ( (int)yyvsp[-12].d, (int)yyvsp[-4].d, (int)yyvsp[-2].d, (int)yyvsp[-6].d);
    ;
    break;}
case 33:
#line 250 "Gmsh.y"
{
      Add_Direction((int)yyvsp[-8].d , yyvsp[-4].c, yyvsp[-2].v[0], yyvsp[-2].v[1], yyvsp[-2].v[2]);
    ;
    break;}
case 34:
#line 254 "Gmsh.y"
{
      Add_Plane((int)yyvsp[-8].d,yyvsp[-4].c,(int)yyvsp[-2].d);
    ;
    break;}
case 35:
#line 258 "Gmsh.y"
{
      Add_Line ((int)yyvsp[-10].d, yyvsp[-6].c , (int) yyvsp[-4].d, (int)yyvsp[-2].d);
    ;
    break;}
case 36:
#line 262 "Gmsh.y"
{
      Msg(PARSER_INFO,"Found a Closed shell");
      Add_Closed_Shell((int)yyvsp[-8].d, yyvsp[-4].c , yyvsp[-2].l);
    ;
    break;}
case 37:
#line 268 "Gmsh.y"
{
    ;
    break;}
case 38:
#line 271 "Gmsh.y"
{
    ;
    break;}
case 39:
#line 274 "Gmsh.y"
{
      Add_Cylinder ((int)yyvsp[-10].d, yyvsp[-6].c , (int)yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 40:
#line 278 "Gmsh.y"
{
      Add_Cone ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 41:
#line 282 "Gmsh.y"
{
      Add_Torus ((int)yyvsp[-12].d, yyvsp[-8].c , (int)yyvsp[-6].d, yyvsp[-4].d,yyvsp[-2].d);
    ;
    break;}
case 42:
#line 286 "Gmsh.y"
{
      Add_Circle((int) yyvsp[-10].d, yyvsp[-6].c, (int) yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 43:
#line 290 "Gmsh.y"
{
      Add_Ellipsis((int) yyvsp[-12].d, yyvsp[-8].c, (int) yyvsp[-6].d, yyvsp[-4].d, yyvsp[-2].d);
    ;
    break;}
case 44:
#line 295 "Gmsh.y"
{
    ;
    break;}
case 45:
#line 298 "Gmsh.y"
{
    ;
    break;}
case 46:
#line 302 "Gmsh.y"
{
    ;
    break;}
case 47:
#line 305 "Gmsh.y"
{
    ;
    break;}
case 48:
#line 309 "Gmsh.y"
{
    ;
    break;}
case 49:
#line 312 "Gmsh.y"
{
    ;
    break;}
case 50:
#line 315 "Gmsh.y"
{
    ;
    break;}
case 52:
#line 326 "Gmsh.y"
{
      Msg(PARSER_INFO,"Gmsh File Format Read");
    ;
    break;}
case 53:
#line 332 "Gmsh.y"
{ return 1; ;
    break;}
case 54:
#line 333 "Gmsh.y"
{ return 1; ;
    break;}
case 55:
#line 334 "Gmsh.y"
{ return 1; ;
    break;}
case 56:
#line 335 "Gmsh.y"
{ return 1; ;
    break;}
case 57:
#line 336 "Gmsh.y"
{ return 1; ;
    break;}
case 58:
#line 337 "Gmsh.y"
{ return 1; ;
    break;}
case 59:
#line 338 "Gmsh.y"
{ return 1; ;
    break;}
case 60:
#line 339 "Gmsh.y"
{ return 1; ;
    break;}
case 61:
#line 340 "Gmsh.y"
{ return 1; ;
    break;}
case 62:
#line 341 "Gmsh.y"
{ return 1; ;
    break;}
case 63:
#line 342 "Gmsh.y"
{ return 1; ;
    break;}
case 64:
#line 343 "Gmsh.y"
{ yyerrok; return 1;;
    break;}
case 65:
#line 352 "Gmsh.y"
{ 
      EndView(yyvsp[-4].c,0.,0.,0.); 
    ;
    break;}
case 66:
#line 356 "Gmsh.y"
{
      EndView(yyvsp[-6].c,yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2]);
    ;
    break;}
case 67:
#line 363 "Gmsh.y"
{
      BeginView(1); 
    ;
    break;}
case 80:
#line 385 "Gmsh.y"
{
      AddView_ScalarSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 81:
#line 395 "Gmsh.y"
{
      AddView_VectorSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 82:
#line 405 "Gmsh.y"
{
      AddView_TensorSimplex(yyvsp[-25].d,yyvsp[-23].d,yyvsp[-21].d,yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 83:
#line 414 "Gmsh.y"
{
      AddView_ScalarTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 84:
#line 423 "Gmsh.y"
{
      AddView_VectorTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 85:
#line 432 "Gmsh.y"
{
      AddView_TensorTriangle(yyvsp[-19].d,yyvsp[-17].d,yyvsp[-15].d,yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 86:
#line 440 "Gmsh.y"
{
      AddView_ScalarLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 87:
#line 448 "Gmsh.y"
{
      AddView_VectorLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 88:
#line 456 "Gmsh.y"
{
      AddView_TensorLine(yyvsp[-13].d,yyvsp[-11].d,yyvsp[-9].d,yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 89:
#line 463 "Gmsh.y"
{
      AddView_ScalarPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 90:
#line 470 "Gmsh.y"
{
      AddView_VectorPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 91:
#line 477 "Gmsh.y"
{
      AddView_TensorPoint(yyvsp[-7].d,yyvsp[-5].d,yyvsp[-3].d,yyvsp[-1].l);
    ;
    break;}
case 92:
#line 488 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[-3].c;
      TheSymbol.val  = yyvsp[-1].d;
      List_Replace(Symbol_L,&TheSymbol,CompareSymbols);
    ;
    break;}
case 93:
#line 505 "Gmsh.y"
{
      Cdbpts101((int)yyvsp[-4].d,yyvsp[-1].v[0],yyvsp[-1].v[1],yyvsp[-1].v[2],yyvsp[-1].v[3],yyvsp[-1].v[4]);
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 94:
#line 512 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_POINT,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_POINT;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 95:
#line 518 "Gmsh.y"
{
      Vertex *v;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        v = FindVertex(ip,THEM);
        if(!v)
	  vyyerror("Unkown Point %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,v,NULL,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 96:
#line 537 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	Vertex *v = FindVertex((int)d,THEM);
	if(!v)
	  vyyerror("Unkown Point %d", (int)d);
	else
	  v->lc = yyvsp[-1].d;
      }
    ;
    break;}
case 97:
#line 548 "Gmsh.y"
{
      yyval.s.Type = MSH_POINT;
      yyval.s.Num  = (int)yyvsp[-2].d;
    ;
    break;}
case 98:
#line 556 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_LINE,1,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 99:
#line 562 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_SPLN,3,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_SPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 100:
#line 568 "Gmsh.y"
{
      Curve *c;
      Attractor *a;
      double p;
      int ip;
      for(int i=0;i<List_Nbr(yyvsp[-1].l);i++){
      	List_Read(yyvsp[-1].l,i,&p);
        ip = (int)p;
        c = FindCurve(ip,THEM);
        if(!c)
	  vyyerror("Unkown Curve %d", ip);
	else{
	  a = Create_Attractor(List_Nbr(THEM->Metric->Attractors)+1,
			       yyvsp[-8].d,yyvsp[-6].d,yyvsp[-4].d,NULL,c,NULL);
	  List_Add(THEM->Metric->Attractors,&a);
        }
      }
    ;
    break;}
case 101:
#line 587 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_CIRC,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 102:
#line 593 "Gmsh.y"
{
      List_T *temp;
      int i,j;
      double d;
      temp = List_Create(List_Nbr(yyvsp[-3].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
      	List_Read(yyvsp[-3].l,i,&d);
        j = (int)d;
        List_Add(temp,&j);
      }
      AddCircleInDataBase ((int) yyvsp[-6].d, MSH_SEGM_CIRC, temp, yyvsp[-1].v);
      List_Delete(temp);
      yyval.s.Type = MSH_SEGM_CIRC ;
      yyval.s.Num  = (int)yyvsp[-6].d;
    ;
    break;}
case 103:
#line 610 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-14].d,MSH_SEGM_PARAMETRIC,2,NULL,NULL,-1,-1,yyvsp[-10].d,yyvsp[-8].d,yyvsp[-6].c,yyvsp[-4].c,yyvsp[-2].c);
      yyval.s.Type = MSH_SEGM_PARAMETRIC ;
      yyval.s.Num  = (int)yyvsp[-14].d;
    ;
    break;}
case 104:
#line 616 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_ELLI,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_ELLI ;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 105:
#line 622 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_LINE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_LINE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 106:
#line 628 "Gmsh.y"
{
      yyval.s.Type = MSH_SEGM_LOOP;
      Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Num = (int)yyvsp[-4].d;
    ;
    break;}
case 107:
#line 634 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Curve *c = FindCurve(yyval.s.Num,THEM);
      if(!c)
	vyyerror("Unkown Curve %d", yyval.s.Num);
      else
	yyval.s.Type = c->Typ;
    ;
    break;}
case 108:
#line 643 "Gmsh.y"
{
      Cdbseg101((int)yyvsp[-4].d,MSH_SEGM_BSPLN,2,yyvsp[-1].l,NULL,-1,-1,0.,1.,NULL,NULL,NULL);
      yyval.s.Type = MSH_SEGM_BSPLN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 109:
#line 649 "Gmsh.y"
{
      List_T *Temp;
      int i;
      double d;
      if(List_Nbr(yyvsp[-5].l) + (int)yyvsp[-1].d + 1 != List_Nbr(yyvsp[-3].l)){
	yyerror("wrong nurbs curve definition (deg + 1 + nbpts != nbknots)");
      }
      Temp = List_Create(List_Nbr(yyvsp[-5].l),1,sizeof(int));
      for(i=0;i<List_Nbr(yyvsp[-5].l);i++) {
      	List_Read(yyvsp[-5].l,i,&d);
        j = (int)d;
        List_Add(Temp,&j);
      }
      AddCurveInDataBase ((int)yyvsp[-8].d,MSH_SEGM_NURBS,(int)yyvsp[-1].d,Temp,yyvsp[-3].l,-1,-1,0.,1.);
      List_Delete(Temp);
    ;
    break;}
case 110:
#line 669 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_PLAN;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 111:
#line 675 "Gmsh.y"
{
      Surface *s,*support;
      support = FindSurface((int)yyvsp[-2].d,THEM);
      if(!support)
	vyyerror("Unkown Surface %d", (int)yyvsp[-2].d);
      else{
	Cdbz101((int)yyvsp[-5].d,MSH_SURF_PLAN,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	s = FindSurface((int)yyvsp[-5].d,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", (int)yyvsp[-5].d);
	else{
	  s->Typ =  MSH_SURF_TRIMMED;
	  s->Support = support;
	  yyval.s.Type = MSH_SURF_TRIMMED;
	  yyval.s.Num  = (int)yyvsp[-5].d;
	}
      }
    ;
    break;}
case 112:
#line 694 "Gmsh.y"
{
      List_Read(yyvsp[-1].l,0,&d);
      i = (int)d;
      EdgeLoop *el = FindEdgeLoop(i,THEM);
      if(!el)
	vyyerror("Unkown Loop %d", i);
      else{
	j = List_Nbr(el->Curves);
	if(j==4)
	  yyval.s.Type = MSH_SURF_REGL;
	else if(j==3)
	  yyval.s.Type  = MSH_SURF_TRIC;
	else
	  vyyerror("Ruled surface %d has not 3 or 4 borders", yyvsp[-4].d);
	Cdbz101((int)yyvsp[-4].d,yyval.s.Type,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
	yyval.s.Num = (int)yyvsp[-4].d;
      }
    ;
    break;}
case 113:
#line 715 "Gmsh.y"
{
      CreateNurbsSurface ( (int) yyvsp[-16].d , (int)yyvsp[-4].d , (int)yyvsp[-2].d  , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
      yyval.s.Type  = MSH_SURF_NURBS;
      yyval.s.Num = (int)yyvsp[-16].d;
    ;
    break;}
case 114:
#line 723 "Gmsh.y"
{
      CreateNurbsSurfaceSupport ((int)yyvsp[-16].d, (int) yyvsp[-4].d , (int) yyvsp[-2].d , yyvsp[-13].l, yyvsp[-10].l, yyvsp[-8].l);
    ;
    break;}
case 115:
#line 727 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_SURFACE,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_SURFACE;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 116:
#line 733 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_SURF_LOOP,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_SURF_LOOP;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 117:
#line 739 "Gmsh.y"
{
      yyval.s.Num = (int)yyvsp[-2].d;
      Surface *s = FindSurface(yyval.s.Num,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", yyval.s.Num);
      else
	yyval.s.Type = s->Typ;
     ;
    break;}
case 118:
#line 751 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;      
    ;
    break;}
case 119:
#line 757 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 120:
#line 763 "Gmsh.y"
{
      Cdbz101((int)yyvsp[-4].d,MSH_PHYSICAL_VOLUME,0,0,0,0,0,NULL,yyvsp[-1].l,NULL);
      yyval.s.Type = MSH_PHYSICAL_VOLUME;
      yyval.s.Num  = (int)yyvsp[-4].d;
    ;
    break;}
case 121:
#line 776 "Gmsh.y"
{
      TranslateShapes (yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 122:
#line 781 "Gmsh.y"
{
      RotateShapes(yyvsp[-8].v[0],yyvsp[-8].v[1],yyvsp[-8].v[2],yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 123:
#line 786 "Gmsh.y"
{
      SymetryShapes(yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-4].v[3],yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 124:
#line 791 "Gmsh.y"
{
      DilatShapes(yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].d,yyvsp[-1].l,1);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 125:
#line 798 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 126:
#line 799 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 127:
#line 800 "Gmsh.y"
{ yyval.l = yyvsp[0].l; ;
    break;}
case 128:
#line 805 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
    ;
    break;}
case 129:
#line 809 "Gmsh.y"
{
      List_Add(yyval.l,&yyvsp[0].s);
      yyval.l = yyvsp[-1].l;
    ;
    break;}
case 130:
#line 821 "Gmsh.y"
{
      yyval.l = List_Create(3,3,sizeof(Shape));
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	CopyShape(TheShape.Type,TheShape.Num,&j);
	TheShape.Num = j;
	List_Add(yyval.l,&TheShape);
      }
    ;
    break;}
case 131:
#line 839 "Gmsh.y"
{
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read (yyvsp[-1].l,i,&TheShape);
	DeleteShape(TheShape.Type,TheShape.Num);
      }
    ;
    break;}
case 132:
#line 854 "Gmsh.y"
{
      yyinTab[RecursionLevel++] = yyin;
      strcpy(tmpstring, ThePathForIncludes);
      if((yyin = fopen(strcat(tmpstring,yyvsp[-1].c),"r"))){
	strcpy(yynameTab[RecursionLevel-1],yyname);
	yylinenoTab[RecursionLevel-1]=yylineno;
	yylineno=1;
	strcpy(yyname,yyvsp[-1].c);
	while(!feof(yyin)){
	  yyparse();
	}
	fclose(yyin);
	yyin = yyinTab[--RecursionLevel];
	strcpy(yyname,yynameTab[RecursionLevel]);
	yylineno = yylinenoTab[RecursionLevel];
      }
      else{
	vyyerror("Unknown file: %s", yyvsp[-1].c) ;  
	yyin = yyinTab[--RecursionLevel];
      }
    ;
    break;}
case 133:
#line 885 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 134:
#line 889 "Gmsh.y"
{
      Extrude_ProtudeSurface(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,0,NULL);
    ;
    break;}
case 135:
#line 893 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 136:
#line 897 "Gmsh.y"
{
      Extrude_ProtudeSurface(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,0,NULL);
    ;
    break;}
case 137:
#line 901 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,
			   &pc,&prc,NULL);
    ;
    break;}
case 138:
#line 907 "Gmsh.y"
{
      Curve *pc, *prc;
      Extrude_ProtudePoint(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,&pc,&prc,NULL);
    ;
    break;}
case 139:
#line 912 "Gmsh.y"
{
      Extrude_ProtudeCurve(0,(int)yyvsp[-8].d,yyvsp[-6].v[0],yyvsp[-6].v[1],yyvsp[-6].v[2],yyvsp[-4].v[0],yyvsp[-4].v[1],yyvsp[-4].v[2],yyvsp[-2].d,NULL);
    ;
    break;}
case 140:
#line 916 "Gmsh.y"
{
      Extrude_ProtudeCurve(1,(int)yyvsp[-4].d,yyvsp[-2].v[0],yyvsp[-2].v[1],yyvsp[-2].v[2],0.,0.,0.,0.,NULL);
    ;
    break;}
case 141:
#line 920 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(1,(int)yyvsp[-7].d,yyvsp[-5].v[0],yyvsp[-5].v[1],yyvsp[-5].v[2],0.,0.,0.,0.,vol,&extr);
  ;
    break;}
case 142:
#line 926 "Gmsh.y"
{
    int vol = NEWREG();
    Extrude_ProtudeSurface(0,(int)yyvsp[-11].d,yyvsp[-9].v[0],yyvsp[-9].v[1],yyvsp[-9].v[2],yyvsp[-7].v[0],yyvsp[-7].v[1],yyvsp[-7].v[2],yyvsp[-5].d,vol,&extr);
  ;
    break;}
case 143:
#line 934 "Gmsh.y"
{
    ;
    break;}
case 144:
#line 937 "Gmsh.y"
{
    ;
    break;}
case 145:
#line 943 "Gmsh.y"
{
      double d;
      int j;
      extr.mesh.NbLayer = List_Nbr(yyvsp[-6].l);
      extr.mesh.ExtrudeMesh = true;
      for(int i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)d;
	extr.mesh.NbElmLayer[i] = j;
	List_Read(yyvsp[-4].l,i,&d);
	j = (int)d;
	extr.mesh.ZonLayer[i] = j;
	List_Read(yyvsp[-2].l,i,&d);
	extr.mesh.hLayer[i] = d;
      }
    ;
    break;}
case 146:
#line 967 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-1].d;
	  c->ipar[1] = sign(d);
	  c->dpar[0] = 1.0;
	}
      }
    ;
    break;}
case 147:
#line 984 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = sign(d); /* Power : code 1 ou -1 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 148:
#line 1001 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 2*sign(d); /* Bump : code 2 ou -2 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 149:
#line 1018 "Gmsh.y"
{
      Curve *c;
      for(i=0;i<List_Nbr(yyvsp[-6].l);i++){
	List_Read(yyvsp[-6].l,i,&d);
	j = (int)fabs(d);
        c = FindCurve(j,THEM);
	if(!c)
	  vyyerror("Unkown Curve %d", j);
	else{
	  c->Method = TRANSFINI;
	  c->ipar[0] = (int)yyvsp[-4].d;
	  c->ipar[1] = 3*sign(d); /* Progresion : code 3 ou -3 */
	  c->dpar[0] = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 150:
#line 1035 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
	s->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=3 && k!=4){
	  vyyerror("Bad Number of Points for Transfinite Surface %d", yyvsp[-4].d) ;
	}
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 151:
#line 1055 "Gmsh.y"
{
      Surface *s = FindSurface((int)yyvsp[-4].d,THEM);
      if(!s)
	vyyerror("Unkown Surface %d", (int)yyvsp[-4].d);
      else{
        s->Method = ELLIPTIC;
        k = List_Nbr(yyvsp[-1].l);
        if(k != 4)
          vyyerror("Bad Number of Points for Elliptic Surface %d", yyvsp[-4].d) ;
        else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    s->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 152:
#line 1074 "Gmsh.y"
{
      Volume *v = FindVolume((int)yyvsp[-4].d,THEM);
      if(!v)
	vyyerror("Unkown Volume %d", (int)yyvsp[-4].d);
      else{
	v->Method = TRANSFINI;
	k = List_Nbr(yyvsp[-1].l);
	if(k!=6 && k!=8)
	  vyyerror("Bad Number of Points for Transfinite Volume %d", yyvsp[-4].d) ;
	else{
	  for(i=0;i<k;i++){
	    List_Read(yyvsp[-1].l,i,&d);
	    j = (int)fabs(d);
	    v->ipar[i] = j;
	  }
	}
      }
    ;
    break;}
case 153:
#line 1093 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-3].l);i++){
	List_Read(yyvsp[-3].l,i,&d);
	j = (int)d;
	s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = yyvsp[-1].d;
	}
      }
    ;
    break;}
case 154:
#line 1108 "Gmsh.y"
{
      Surface *s;
      for(i=0;i<List_Nbr(yyvsp[-1].l);i++){
	List_Read(yyvsp[-1].l,i,&d);
	j = (int)d;
        s = FindSurface(j,THEM);
	if(!s)
	  vyyerror("Unkown Surface %d", j);
	else{
	  s->Recombine = 1;
	  s->RecombineAngle = 30.;
        }
      }
    ;
    break;}
case 155:
#line 1123 "Gmsh.y"
{
      Msg(PARSER_ERROR, "Physical Associations do not exist anymore!");
    ;
    break;}
case 156:
#line 1135 "Gmsh.y"
{ 
      Coherence_PS();
    ;
    break;}
case 160:
#line 1155 "Gmsh.y"
{ ColorField = ColorGeneral; ;
    break;}
case 162:
#line 1158 "Gmsh.y"
{ ColorField = ColorGeometry; ;
    break;}
case 164:
#line 1161 "Gmsh.y"
{ ColorField = ColorMesh; ;
    break;}
case 168:
#line 1172 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, -1, yyvsp[-1].c, &flag);
      if(flag) vyyerror("Unknown Color: %s", yyvsp[-1].c);
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-3].c);
      else
	*ptr = i ;
    ;
    break;}
case 169:
#line 1182 "Gmsh.y"
{
      i = Get_ColorForString(ColorString, (int)yyvsp[-2].d, yyvsp[-4].c, &flag);
      if(flag) vyyerror("Unknown Color: %s", yyvsp[-4].c);
      Get_ColorPointerForString(ColorField, yyvsp[-7].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-7].c);
      else
	*ptr = i ;
    ;
    break;}
case 170:
#line 1192 "Gmsh.y"
{
      Get_ColorPointerForString(ColorField, yyvsp[-3].c, &flag, &ptr);
      if(flag)
	vyyerror("Unknown Color Field: %s", yyvsp[-1].v);
      else
	*ptr = PACK_COLOR((int)yyvsp[-1].v[0], (int)yyvsp[-1].v[1], (int)yyvsp[-1].v[2], (int)yyvsp[-1].v[3]);
    ;
    break;}
case 171:
#line 1203 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
    ;
    break;}
case 172:
#line 1210 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=255.;
    ;
    break;}
case 173:
#line 1286 "Gmsh.y"
{yyval.i = 1;;
    break;}
case 174:
#line 1287 "Gmsh.y"
{yyval.i = 0;;
    break;}
case 175:
#line 1288 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 176:
#line 1289 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 177:
#line 1290 "Gmsh.y"
{yyval.i = -1;;
    break;}
case 178:
#line 1294 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 179:
#line 1295 "Gmsh.y"
{ yyval.d = yyvsp[-1].d; ;
    break;}
case 180:
#line 1296 "Gmsh.y"
{ yyval.d = yyvsp[-2].d - yyvsp[0].d; ;
    break;}
case 181:
#line 1297 "Gmsh.y"
{ yyval.d = yyvsp[-2].d + yyvsp[0].d; ;
    break;}
case 182:
#line 1298 "Gmsh.y"
{ yyval.d = yyvsp[-2].d * yyvsp[0].d; ;
    break;}
case 183:
#line 1299 "Gmsh.y"
{ yyval.d = yyvsp[-2].d / yyvsp[0].d; ;
    break;}
case 184:
#line 1300 "Gmsh.y"
{ yyval.d = pow(yyvsp[-2].d, yyvsp[0].d); ;
    break;}
case 185:
#line 1301 "Gmsh.y"
{ yyval.d = - yyvsp[0].d; ;
    break;}
case 186:
#line 1302 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 187:
#line 1303 "Gmsh.y"
{ yyval.d = exp(yyvsp[-1].d);      ;
    break;}
case 188:
#line 1304 "Gmsh.y"
{ yyval.d = log(yyvsp[-1].d);      ;
    break;}
case 189:
#line 1305 "Gmsh.y"
{ yyval.d = log10(yyvsp[-1].d);    ;
    break;}
case 190:
#line 1306 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-1].d);     ;
    break;}
case 191:
#line 1307 "Gmsh.y"
{ yyval.d = sin(yyvsp[-1].d);      ;
    break;}
case 192:
#line 1308 "Gmsh.y"
{ yyval.d = asin(yyvsp[-1].d);     ;
    break;}
case 193:
#line 1309 "Gmsh.y"
{ yyval.d = cos(yyvsp[-1].d);      ;
    break;}
case 194:
#line 1310 "Gmsh.y"
{ yyval.d = acos(yyvsp[-1].d);     ;
    break;}
case 195:
#line 1311 "Gmsh.y"
{ yyval.d = tan(yyvsp[-1].d);      ;
    break;}
case 196:
#line 1312 "Gmsh.y"
{ yyval.d = atan(yyvsp[-1].d);     ;
    break;}
case 197:
#line 1313 "Gmsh.y"
{ yyval.d = atan2(yyvsp[-3].d,yyvsp[-1].d); ;
    break;}
case 198:
#line 1314 "Gmsh.y"
{ yyval.d = sinh(yyvsp[-1].d);     ;
    break;}
case 199:
#line 1315 "Gmsh.y"
{ yyval.d = cosh(yyvsp[-1].d);     ;
    break;}
case 200:
#line 1316 "Gmsh.y"
{ yyval.d = tanh(yyvsp[-1].d);     ;
    break;}
case 201:
#line 1317 "Gmsh.y"
{ yyval.d = fabs(yyvsp[-1].d);     ;
    break;}
case 202:
#line 1318 "Gmsh.y"
{ yyval.d = floor(yyvsp[-1].d);    ;
    break;}
case 203:
#line 1319 "Gmsh.y"
{ yyval.d = ceil(yyvsp[-1].d);     ;
    break;}
case 204:
#line 1320 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 205:
#line 1321 "Gmsh.y"
{ yyval.d = fmod(yyvsp[-3].d,yyvsp[-1].d);  ;
    break;}
case 206:
#line 1322 "Gmsh.y"
{ yyval.d = sqrt(yyvsp[-3].d*yyvsp[-3].d+yyvsp[-1].d*yyvsp[-1].d);  ;
    break;}
case 207:
#line 1326 "Gmsh.y"
{ yyval.d = yyvsp[0].d; ;
    break;}
case 208:
#line 1327 "Gmsh.y"
{ yyval.d = 3.141592653589793; ;
    break;}
case 209:
#line 1329 "Gmsh.y"
{
      TheSymbol.Name = yyvsp[0].c ;
      if (!List_Query(Symbol_L, &TheSymbol, CompareSymbols)) {
	vyyerror("Unknown variable: %s", yyvsp[0].c) ;  yyval.d = 0. ;
      }
      else  yyval.d = TheSymbol.val ;
      Free(yyvsp[0].c);
    ;
    break;}
case 210:
#line 1341 "Gmsh.y"
{ 
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      for(d=yyvsp[-2].d ; (yyvsp[-2].d<yyvsp[0].d)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; (yyvsp[-2].d<yyvsp[0].d)?(d+=1.):(d-=1.)) 
	List_Add(ListOfDouble2_L, &d) ;
    ;
    break;}
case 211:
#line 1347 "Gmsh.y"
{
      ListOfDouble2_L = List_Create(2,1,sizeof(double)) ; 
      if(!yyvsp[-2].d || (yyvsp[-5].d<yyvsp[0].d && yyvsp[-2].d<0) || (yyvsp[-5].d>yyvsp[0].d && yyvsp[-2].d>0)){
        vyyerror("Wrong Increment in '%g :[%g] %g'", yyvsp[-5].d, yyvsp[-2].d, yyvsp[0].d) ;
	List_Add(ListOfDouble2_L, &(yyvsp[-5].d)) ;
      }
      else 
	for(d=yyvsp[-5].d ; (yyvsp[-2].d>0)?(d<=yyvsp[0].d):(d>=yyvsp[0].d) ; d+=yyvsp[-2].d)
	  List_Add(ListOfDouble2_L, &d) ;
   ;
    break;}
case 212:
#line 1361 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-9].d;
      yyval.v[1]=yyvsp[-7].d;
      yyval.v[2]=yyvsp[-5].d;
      yyval.v[3]=yyvsp[-3].d;
      yyval.v[4]=yyvsp[-1].d;
    ;
    break;}
case 213:
#line 1369 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-7].d;
      yyval.v[1]=yyvsp[-5].d;
      yyval.v[2]=yyvsp[-3].d;
      yyval.v[3]=yyvsp[-1].d;
      yyval.v[4]=1.0;
    ;
    break;}
case 214:
#line 1377 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 215:
#line 1385 "Gmsh.y"
{
      yyval.v[0]=yyvsp[-5].d;
      yyval.v[1]=yyvsp[-3].d;
      yyval.v[2]=yyvsp[-1].d;
      yyval.v[3]=0.0;
      yyval.v[4]=1.0;
    ;
    break;}
case 216:
#line 1396 "Gmsh.y"
{
    ;
    break;}
case 217:
#line 1399 "Gmsh.y"
{
    ;
    break;}
case 218:
#line 1405 "Gmsh.y"
{
    ;
    break;}
case 219:
#line 1408 "Gmsh.y"
{
    ;
    break;}
case 220:
#line 1414 "Gmsh.y"
{
    ;
    break;}
case 221:
#line 1417 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 222:
#line 1421 "Gmsh.y"
{
       yyval.l=ListOfListOfDouble_L;
    ;
    break;}
case 223:
#line 1428 "Gmsh.y"
{
      ListOfListOfDouble_L = List_Create(2,1,sizeof(List_T*)) ;
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 224:
#line 1433 "Gmsh.y"
{
      List_Add(ListOfListOfDouble_L, &(yyvsp[0].l)) ;
    ;
    break;}
case 225:
#line 1440 "Gmsh.y"
{
    ;
    break;}
case 226:
#line 1443 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 227:
#line 1449 "Gmsh.y"
{
      yyval.l=ListOfDouble_L;
    ;
    break;}
case 228:
#line 1463 "Gmsh.y"
{
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 229:
#line 1468 "Gmsh.y"
{ 
      ListOfDouble_L = List_Create(2,1,sizeof(double)) ;
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
case 230:
#line 1477 "Gmsh.y"
{
      List_Add(ListOfDouble_L, &(yyvsp[0].d)) ;
    ;
    break;}
case 231:
#line 1481 "Gmsh.y"
{
      for(i=0 ; i<List_Nbr(ListOfDouble2_L) ; i++){
	List_Read(ListOfDouble2_L, i, &d) ;
	List_Add(ListOfDouble_L, &d) ;
      }
      List_Delete(ListOfDouble2_L);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 543 "/usr/lib/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;

 yyacceptlab:
  /* YYACCEPT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 0;

 yyabortlab:
  /* YYABORT comes here.  */
  if (yyfree_stacks)
    {
      free (yyss);
      free (yyvs);
#ifdef YYLSP_NEEDED
      free (yyls);
#endif
    }
  return 1;
}
#line 1491 "Gmsh.y"


void InitSymbols(void){
  Symbol_L = List_Create(10,1,sizeof(Symbol));
}

void DeleteSymbols(void){
  List_Delete(Symbol_L);
}

int CompareSymbols (const void *a, const void *b){
  return(strcmp(((Symbol*)a)->Name,((Symbol*)b)->Name));
}
  
void yyerror(char *s){
  Msg(PARSER_ERROR, "'%s', line %d : %s (%s)",yyname,yylineno-1,s,yytext);
  yyerrorstate=1;
}

void  vyyerror (char *fmt, ...){
  va_list args;
  char    tmp[TEXT_BUFFER_SIZE];

  va_start (args, fmt);
  vsprintf (tmp, fmt, args);
  va_end (args);

  Msg(PARSER_ERROR, "'%s', line %d : %s", yyname, yylineno-1, tmp);
  yyerrorstate=1;
}

int Get_ColorForString(StringX4Int SX4I[], int alpha, 
		       char * string, int * FlagError) {
  int  i = 0 ;
  while ((SX4I[i].string != NULL) && (strcmp(SX4I[i].string, string)))  i++ ;
  *FlagError = (SX4I[i].string == NULL)? 1 : 0 ;
  if(alpha > 0)
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,alpha) ;
  else
    return PACK_COLOR(SX4I[i].int1,SX4I[i].int2,SX4I[i].int3,SX4I[i].int4) ;
}

void Get_ColorPointerForString(StringXPointer SXP[], char * string,
			  int * FlagError, unsigned int **Pointer) {
  int  i = 0 ;
  while ((SXP[i].string != NULL) && (strcmp(SXP[i].string, string)))  i++ ;
  *FlagError = (SXP[i].string == NULL)? 1 : 0 ;
  *Pointer = (unsigned int *)SXP[i].Pointer ;
}

