# -*- coding: utf-8 -*-
########################################################################
# Copyright (C) 2018 by Marek Wojciechowski
# <mwojc@p.lodz.pl>
#
# Distributed under the terms of GPL-2.0 license
# https://opensource.org/licenses/GPL-2.0
########################################################################

from __future__ import print_function
import os
import shutil
import platform
import tarfile
import zipfile
from setuptools import setup
from setuptools.dist import Distribution

# Server and gmsh version
server = 'https://gmsh.info/bin'
version = '${GMSH_MAJOR_VERSION}.${GMSH_MINOR_VERSION}.${GMSH_PATCH_VERSION}'

# Determine file name and and url to be downloaded and installed
system = platform.system().lower()
machine = platform.machine().lower()
plat = None
plat = 'Linux64' if 'linux' in system and '64' in machine else plat
plat = 'Linux32' if 'linux' in system and '64' not in machine else plat
plat = 'Windows64' if 'windows' in system and '64' in machine else plat
plat = 'Windows32' if 'windows' in system and '64' not in machine else plat
plat = 'MacOSX' if 'darwin' in system else plat
if plat is None:
    raise TypeError(
            "Platform '{}' is not supported.".format(system+'-'+machine))
name = "gmsh-git-{}-sdk".format(plat)
ext = '.zip' if plat.startswith('Windows') else '.tgz'
fname = name + ext
if plat.startswith('Linux'):
    url = server + "/Linux/" + fname
elif plat.startswith('Windows'):
    url = server + "/Windows/" + fname
else:
    url = server + "/MacOSX/" + fname


def download_and_extract():
    """Download and extract the gmsh binaries from https://gmsh.info/bin"""
    import requests
    if not os.path.isfile(fname):
        print('Downloading {}, please wait...'.format(url))
        sdk = requests.get(url, allow_redirects=True)
        with open(fname, "wb") as f:
            f.write(sdk.content)

    print('Extracting {}, please wait...'.format(fname))
    tar = tarfile.open(fname) if ext == '.tgz' else zipfile.ZipFile(fname, 'r')
    tar.extractall()

    # move extracted contents into "gmsh" directory
    for filename in os.listdir(name):
        shutil.move(os.path.join(name, filename), 'gmsh')


# check if the install contains the gmsh lib and download it if necessary
if not os.path.isdir('gmsh/lib'):
    download_and_extract()


def package_files(directory):
    """Provide a list of files for setup package_data"""
    pth_file = 'gmsh.pth'
    with open(pth_file, 'w') as pth:
        pth.write(name+'/lib\n')
        pth.write(name+'/bin')

    paths = [os.path.join('..', pth_file)]
    for (path, _, filenames) in os.walk(directory):
        for filename in filenames:
            paths.append(os.path.join('..', path, filename))
    return paths


# Run setup
if __name__ == "__main__":
    setup(name            = 'gmsh-dev',
          packages=['gmsh'],
        version           = version,
        description       = 'Gmsh app and SDK installer for the latest development snapshot. Gmsh is a three-dimensional finite element mesh generator with built-in pre- and post-processing facilities.',
        long_description  = open('README.rst', 'r').read(),
        long_description_content_type='text/x-rst',
        maintainer        = 'Christophe Geuzaine',
        maintainer_email  = 'cgeuzaine@uliege.be',
        keywords          = ['fem', 'mesh', 'finite element method', 'cad'],
        url               = 'https://gmsh.info',
        license           = 'GPL-2',
        platforms         = 'Posix, Windows',
        classifiers       = ['Development Status :: 5 - Production/Stable',
                            'Intended Audience :: Education',
                            'Intended Audience :: Science/Research',
                            'License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)',
                            'Operating System :: POSIX :: Linux',
                            'Operating System :: Microsoft :: Windows',
                            'Operating System :: MacOS :: MacOS X',
                            'Programming Language :: C',
                            'Programming Language :: C++',
                            'Programming Language :: Python :: Implementation :: CPython',
                            'Topic :: Scientific/Engineering'],
        scripts           = ['gmsh/gmsh', 'gmsh.bat'] if plat.startswith('Windows') else ['gmsh/gmsh'],
        package_data      = {'': package_files('gmsh')},
        setup_requires    = ['requests']
        )
